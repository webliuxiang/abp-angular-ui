/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/operator/finally';
import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';

import moment from 'moment';

export class AccountServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    activateEmail(body: ActivateEmailInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processActivateEmail(_response);
        });
    }

    protected processActivateEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @return Success
     */
    backToImpersonator(): Promise<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBackToImpersonator(_response);
        });
    }

    protected processBackToImpersonator(response: AxiosResponse): Promise<ImpersonateOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ImpersonateOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ImpersonateOutput>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    impersonate(body: ImpersonateInput | undefined): Promise<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processImpersonate(_response);
        });
    }

    protected processImpersonate(response: AxiosResponse): Promise<ImpersonateOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ImpersonateOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ImpersonateOutput>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    isTenantAvailable(body: IsTenantAvailableInput | undefined): Promise<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processIsTenantAvailable(_response);
        });
    }

    protected processIsTenantAvailable(response: AxiosResponse): Promise<IsTenantAvailableOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = IsTenantAvailableOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IsTenantAvailableOutput>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    register(body: RegisterInput | undefined): Promise<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<RegisterOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = RegisterOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegisterOutput>(<any> null);
    }

    /**
     * 重置密码
     * @param body (optional)
     * @return Success
     */
    resetPassword(body: ResetPasswordInput | undefined): Promise<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResetPassword(_response);
        });
    }

    protected processResetPassword(response: AxiosResponse): Promise<ResetPasswordOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ResetPasswordOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResetPasswordOutput>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    resolveTenantId(body: ResolveTenantIdInput | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResolveTenantId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResolveTenantId(_response);
        });
    }

    protected processResolveTenantId(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    sendEmailActivationLink(body: SendEmailActivationLinkInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendEmailActivationLink(_response);
        });
    }

    protected processSendEmailActivationLink(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 发送密码重置Code
     * @param body (optional)
     * @return Success
     */
    sendPasswordResetCode(body: SendPasswordResetCodeInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendPasswordResetCode(_response);
        });
    }

    protected processSendPasswordResetCode(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    switchToLinkedAccount(body: SwitchToLinkedAccountInput | undefined): Promise<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSwitchToLinkedAccount(_response);
        });
    }

    protected processSwitchToLinkedAccount(response: AxiosResponse): Promise<SwitchToLinkedAccountOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = SwitchToLinkedAccountOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SwitchToLinkedAccountOutput>(<any> null);
    }
}

export class AddressLinkageServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有数据
     * @return Success
     */
    getAll(): Promise<AllAddressLinkage> {
        let url_ = this.baseUrl + "/api/services/app/AddressLinkage/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<AllAddressLinkage> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = AllAddressLinkage.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AllAddressLinkage>(<any> null);
    }

    /**
     * 获取所有县数据
     * @return Success
     */
    getAllArea(): Promise<AddressAreaDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AddressLinkage/GetAllArea";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllArea(_response);
        });
    }

    protected processGetAllArea(response: AxiosResponse): Promise<AddressAreaDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(AddressAreaDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressAreaDto[]>(<any> null);
    }

    /**
     * 获取所有市数据
     * @return Success
     */
    getAllCity(): Promise<AddressCityDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AddressLinkage/GetAllCity";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllCity(_response);
        });
    }

    protected processGetAllCity(response: AxiosResponse): Promise<AddressCityDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(AddressCityDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressCityDto[]>(<any> null);
    }

    /**
     * 获取所有镇数据
     * @return Success
     */
    getAllStreet(): Promise<AddressStreetDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AddressLinkage/GetAllStreet";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllStreet(_response);
        });
    }

    protected processGetAllStreet(response: AxiosResponse): Promise<AddressStreetDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(AddressStreetDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressStreetDto[]>(<any> null);
    }

    /**
     * 通过code获取省市区县镇名称（没有code传空）
     * @param provinceCode (optional)
     * @param cityCode (optional)
     * @param areaCode (optional)
     * @param streetCode (optional)
     * @return Success
     */
    getByCode(provinceCode: string | undefined, cityCode: string | undefined, areaCode: string | undefined, streetCode: string | undefined): Promise<GetByCodeOutput> {
        let url_ = this.baseUrl + "/api/services/app/AddressLinkage/GetByCode?";
        if (provinceCode === null) {
            throw new Error("The parameter 'provinceCode' cannot be null.");
        } else if (provinceCode !== undefined) {
            url_ += "provinceCode=" + encodeURIComponent("" + provinceCode) + "&";
        }
        if (cityCode === null) {
            throw new Error("The parameter 'cityCode' cannot be null.");
        } else if (cityCode !== undefined) {
            url_ += "cityCode=" + encodeURIComponent("" + cityCode) + "&";
        }
        if (areaCode === null) {
            throw new Error("The parameter 'areaCode' cannot be null.");
        } else if (areaCode !== undefined) {
            url_ += "areaCode=" + encodeURIComponent("" + areaCode) + "&";
        }
        if (streetCode === null) {
            throw new Error("The parameter 'streetCode' cannot be null.");
        } else if (streetCode !== undefined) {
            url_ += "streetCode=" + encodeURIComponent("" + streetCode) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetByCode(_response);
        });
    }

    protected processGetByCode(response: AxiosResponse): Promise<GetByCodeOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetByCodeOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetByCodeOutput>(<any> null);
    }

    /**
     * 通过父级code获取省市区县镇数据
     * @param parentCode (optional) 父级code
     * @return Success
     */
    getByParentCode(addressEnum: AddressEnum, parentCode: string | undefined): Promise<AddressProvincetDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AddressLinkage/GetByParentCode?";
        if (addressEnum === undefined || addressEnum === null) {
            throw new Error("The parameter 'addressEnum' must be defined and cannot be null.");
        } else {
            url_ += "addressEnum=" + encodeURIComponent("" + addressEnum) + "&";
        }
        if (parentCode === null) {
            throw new Error("The parameter 'parentCode' cannot be null.");
        } else if (parentCode !== undefined) {
            url_ += "parentCode=" + encodeURIComponent("" + parentCode) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetByParentCode(_response);
        });
    }

    protected processGetByParentCode(response: AxiosResponse): Promise<AddressProvincetDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(AddressProvincetDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressProvincetDto[]>(<any> null);
    }
}

export class AuditLogServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param userName (optional) 用户名
     * @param serviceName (optional) 服务名称
     * @param methodName (optional) 方法名称
     * @param browserInfo (optional) 浏览器信息
     * @param hasException (optional) 是否包含异常
     * @param minExecutionDuration (optional)
     * @param maxExecutionDuration (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment | undefined, endDate: moment.Moment | undefined, userName: string | undefined, serviceName: string | undefined, methodName: string | undefined, browserInfo: string | undefined, hasException: boolean | undefined, minExecutionDuration: number | undefined, maxExecutionDuration: number | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate === null) {
            throw new Error("The parameter 'startDate' cannot be null.");
        } else if (startDate !== undefined) {
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        }
        if (endDate === null) {
            throw new Error("The parameter 'endDate' cannot be null.");
        } else if (endDate !== undefined) {
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        }
        if (userName === null) {
            throw new Error("The parameter 'userName' cannot be null.");
        } else if (userName !== undefined) {
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        }
        if (serviceName === null) {
            throw new Error("The parameter 'serviceName' cannot be null.");
        } else if (serviceName !== undefined) {
            url_ += "serviceName=" + encodeURIComponent("" + serviceName) + "&";
        }
        if (methodName === null) {
            throw new Error("The parameter 'methodName' cannot be null.");
        } else if (methodName !== undefined) {
            url_ += "methodName=" + encodeURIComponent("" + methodName) + "&";
        }
        if (browserInfo === null) {
            throw new Error("The parameter 'browserInfo' cannot be null.");
        } else if (browserInfo !== undefined) {
            url_ += "browserInfo=" + encodeURIComponent("" + browserInfo) + "&";
        }
        if (hasException === null) {
            throw new Error("The parameter 'hasException' cannot be null.");
        } else if (hasException !== undefined) {
            url_ += "hasException=" + encodeURIComponent("" + hasException) + "&";
        }
        if (minExecutionDuration === null) {
            throw new Error("The parameter 'minExecutionDuration' cannot be null.");
        } else if (minExecutionDuration !== undefined) {
            url_ += "minExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
        }
        if (maxExecutionDuration === null) {
            throw new Error("The parameter 'maxExecutionDuration' cannot be null.");
        } else if (maxExecutionDuration !== undefined) {
            url_ += "maxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAuditLogsToExcel(_response);
        });
    }

    protected processGetAuditLogsToExcel(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }

    /**
     * @param startDate (optional)
     * @param endDate (optional)
     * @param userName (optional)
     * @param entityTypeFullName (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getEntityChanges(startDate: moment.Moment | undefined, endDate: moment.Moment | undefined, userName: string | undefined, entityTypeFullName: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfEntityChangeListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChanges?";
        if (startDate === null) {
            throw new Error("The parameter 'startDate' cannot be null.");
        } else if (startDate !== undefined) {
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        }
        if (endDate === null) {
            throw new Error("The parameter 'endDate' cannot be null.");
        } else if (endDate !== undefined) {
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        }
        if (userName === null) {
            throw new Error("The parameter 'userName' cannot be null.");
        } else if (userName !== undefined) {
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        }
        if (entityTypeFullName === null) {
            throw new Error("The parameter 'entityTypeFullName' cannot be null.");
        } else if (entityTypeFullName !== undefined) {
            url_ += "entityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEntityChanges(_response);
        });
    }

    protected processGetEntityChanges(response: AxiosResponse): Promise<PagedResultDtoOfEntityChangeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfEntityChangeListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfEntityChangeListDto>(<any> null);
    }

    /**
     * @param startDate (optional)
     * @param endDate (optional)
     * @param userName (optional)
     * @param entityTypeFullName (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getEntityChangesToExcel(startDate: moment.Moment | undefined, endDate: moment.Moment | undefined, userName: string | undefined, entityTypeFullName: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChangesToExcel?";
        if (startDate === null) {
            throw new Error("The parameter 'startDate' cannot be null.");
        } else if (startDate !== undefined) {
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        }
        if (endDate === null) {
            throw new Error("The parameter 'endDate' cannot be null.");
        } else if (endDate !== undefined) {
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        }
        if (userName === null) {
            throw new Error("The parameter 'userName' cannot be null.");
        } else if (userName !== undefined) {
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        }
        if (entityTypeFullName === null) {
            throw new Error("The parameter 'entityTypeFullName' cannot be null.");
        } else if (entityTypeFullName !== undefined) {
            url_ += "entityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEntityChangesToExcel(_response);
        });
    }

    protected processGetEntityChangesToExcel(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }

    /**
     * @return Success
     */
    getEntityHistoryObjectTypes(): Promise<NameValueDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityHistoryObjectTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEntityHistoryObjectTypes(_response);
        });
    }

    protected processGetEntityHistoryObjectTypes(response: AxiosResponse): Promise<NameValueDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(NameValueDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NameValueDto[]>(<any> null);
    }

    /**
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param userName (optional) 用户名
     * @param serviceName (optional) 服务名称
     * @param methodName (optional) 方法名称
     * @param browserInfo (optional) 浏览器信息
     * @param hasException (optional) 是否包含异常
     * @param minExecutionDuration (optional)
     * @param maxExecutionDuration (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPagedAuditLogs(startDate: moment.Moment | undefined, endDate: moment.Moment | undefined, userName: string | undefined, serviceName: string | undefined, methodName: string | undefined, browserInfo: string | undefined, hasException: boolean | undefined, minExecutionDuration: number | undefined, maxExecutionDuration: number | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetPagedAuditLogs?";
        if (startDate === null) {
            throw new Error("The parameter 'startDate' cannot be null.");
        } else if (startDate !== undefined) {
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        }
        if (endDate === null) {
            throw new Error("The parameter 'endDate' cannot be null.");
        } else if (endDate !== undefined) {
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        }
        if (userName === null) {
            throw new Error("The parameter 'userName' cannot be null.");
        } else if (userName !== undefined) {
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        }
        if (serviceName === null) {
            throw new Error("The parameter 'serviceName' cannot be null.");
        } else if (serviceName !== undefined) {
            url_ += "serviceName=" + encodeURIComponent("" + serviceName) + "&";
        }
        if (methodName === null) {
            throw new Error("The parameter 'methodName' cannot be null.");
        } else if (methodName !== undefined) {
            url_ += "methodName=" + encodeURIComponent("" + methodName) + "&";
        }
        if (browserInfo === null) {
            throw new Error("The parameter 'browserInfo' cannot be null.");
        } else if (browserInfo !== undefined) {
            url_ += "browserInfo=" + encodeURIComponent("" + browserInfo) + "&";
        }
        if (hasException === null) {
            throw new Error("The parameter 'hasException' cannot be null.");
        } else if (hasException !== undefined) {
            url_ += "hasException=" + encodeURIComponent("" + hasException) + "&";
        }
        if (minExecutionDuration === null) {
            throw new Error("The parameter 'minExecutionDuration' cannot be null.");
        } else if (minExecutionDuration !== undefined) {
            url_ += "minExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
        }
        if (maxExecutionDuration === null) {
            throw new Error("The parameter 'maxExecutionDuration' cannot be null.");
        } else if (maxExecutionDuration !== undefined) {
            url_ += "maxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPagedAuditLogs(_response);
        });
    }

    protected processGetPagedAuditLogs(response: AxiosResponse): Promise<PagedResultDtoOfAuditLogListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfAuditLogListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfAuditLogListDto>(<any> null);
    }
}

export class BannerImgServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除BannerAd的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改轮播图广告的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateBannerAdInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除轮播图广告信息
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取BannerAdListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: number | undefined): Promise<BannerAdListDto> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<BannerAdListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = BannerAdListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BannerAdListDto>(<any> null);
    }

    /**
     * 获取编辑 轮播图广告
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<GetBannerAdForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetBannerAdForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetBannerAdForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetBannerAdForEditOutput>(<any> null);
    }

    /**
     * 获取前端门户使用的banner图
     * @return Success
     */
    getForReadBannerAds(): Promise<BannerAdListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/GetForReadBannerAds";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForReadBannerAds(_response);
        });
    }

    protected processGetForReadBannerAds(response: AxiosResponse): Promise<BannerAdListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(BannerAdListDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BannerAdListDto[]>(<any> null);
    }

    /**
     * 获取轮播图广告的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfBannerAdListDto> {
        let url_ = this.baseUrl + "/api/services/app/BannerImg/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfBannerAdListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfBannerAdListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfBannerAdListDto>(<any> null);
    }
}

export class BlogServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除Blog的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: string[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Blog/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改博客的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateBlogInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Blog/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除博客信息
     * @param id (optional)
     * @return Success
     */
    delete(id: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Blog/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 获取博客列表
     * @return Success
     */
    getBlogs(): Promise<BlogListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetBlogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetBlogs(_response);
        });
    }

    protected processGetBlogs(response: AxiosResponse): Promise<BlogListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(BlogListDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BlogListDto[]>(<any> null);
    }

    /**
     * 通过指定id获取BlogListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: string | undefined): Promise<BlogListDto> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<BlogListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = BlogListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BlogListDto>(<any> null);
    }

    /**
     * 根据短名称获取博客信息
     * @param shortName (optional)
     * @return Success
     */
    getByShortName(shortName: string | undefined): Promise<BlogListDto> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetByShortName?";
        if (shortName === null) {
            throw new Error("The parameter 'shortName' cannot be null.");
        } else if (shortName !== undefined) {
            url_ += "shortName=" + encodeURIComponent("" + shortName) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetByShortName(_response);
        });
    }

    protected processGetByShortName(response: AxiosResponse): Promise<BlogListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = BlogListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BlogListDto>(<any> null);
    }

    /**
     * 获取编辑 博客
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: string | undefined): Promise<GetBlogForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetBlogForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetBlogForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetBlogForEditOutput>(<any> null);
    }

    /**
     * 获取博客的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfBlogListDto> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfBlogListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfBlogListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfBlogListDto>(<any> null);
    }

    /**
     * 获取博客下的标签列表
     * @param id (optional)
     * @return Success
     */
    getTagsOfBlog(id: string | undefined): Promise<TagListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetTagsOfBlog?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTagsOfBlog(_response);
        });
    }

    protected processGetTagsOfBlog(response: AxiosResponse): Promise<TagListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(TagListDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TagListDto[]>(<any> null);
    }

    /**
     * 导出博客为excel文件
     * @return Success
     */
    getToExcelFile(): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Blog/GetToExcelFile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetToExcelFile(_response);
        });
    }

    protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }
}

export class BlogrollServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除Blogroll的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Blogroll/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改友情链接的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateBlogrollInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Blogroll/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除友情链接信息
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Blogroll/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取BlogrollListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: number | undefined): Promise<BlogrollListDto> {
        let url_ = this.baseUrl + "/api/services/app/Blogroll/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<BlogrollListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = BlogrollListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BlogrollListDto>(<any> null);
    }

    /**
     * 获取编辑 友情链接
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<GetBlogrollForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Blogroll/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetBlogrollForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetBlogrollForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetBlogrollForEditOutput>(<any> null);
    }

    /**
     * 获取友情链接的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfBlogrollListDto> {
        let url_ = this.baseUrl + "/api/services/app/Blogroll/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfBlogrollListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfBlogrollListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfBlogrollListDto>(<any> null);
    }
}

export class BlogrollTypeServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除BlogrollType的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/BlogrollType/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改友情链接分类的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateBlogrollTypeInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/BlogrollType/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除友情链接分类信息
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/BlogrollType/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取BlogrollTypeListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: number | undefined): Promise<BlogrollTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/BlogrollType/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<BlogrollTypeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = BlogrollTypeListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BlogrollTypeListDto>(<any> null);
    }

    /**
     * 获取编辑 友情链接分类
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<GetBlogrollTypeForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/BlogrollType/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetBlogrollTypeForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetBlogrollTypeForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetBlogrollTypeForEditOutput>(<any> null);
    }

    /**
     * 获取友情链接分类的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfBlogrollTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/BlogrollType/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfBlogrollTypeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfBlogrollTypeListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfBlogrollTypeListDto>(<any> null);
    }
}

export class ChatServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取好友列表
     * @return Success
     */
    getUserChatFriendsWithSettings(): Promise<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatFriendsWithSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserChatFriendsWithSettings(_response);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: AxiosResponse): Promise<GetUserChatFriendsWithSettingsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetUserChatFriendsWithSettingsOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserChatFriendsWithSettingsOutput>(<any> null);
    }

    /**
     * 获取聊天记录
     * @param tenantId (optional)
     * @param userId (optional)
     * @param minMessageId (optional)
     * @return Success
     */
    getUserChatMessages(tenantId: number | undefined, userId: number | undefined, minMessageId: number | undefined): Promise<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatMessages?";
        if (tenantId === null) {
            throw new Error("The parameter 'tenantId' cannot be null.");
        } else if (tenantId !== undefined) {
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        }
        if (userId === null) {
            throw new Error("The parameter 'userId' cannot be null.");
        } else if (userId !== undefined) {
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        }
        if (minMessageId === null) {
            throw new Error("The parameter 'minMessageId' cannot be null.");
        } else if (minMessageId !== undefined) {
            url_ += "minMessageId=" + encodeURIComponent("" + minMessageId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserChatMessages(_response);
        });
    }

    protected processGetUserChatMessages(response: AxiosResponse): Promise<ListResultDtoOfChatMessageDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfChatMessageDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfChatMessageDto>(<any> null);
    }

    /**
     * 讲所有未读变成已读
     * @param body (optional)
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(body: MarkAllUnreadMessagesOfUserAsReadInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(_response);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class CommentServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除Comment的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: string[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Comment/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改评论的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateCommentInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Comment/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除评论信息
     * @param id (optional)
     * @return Success
     */
    delete(id: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Comment/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取CommentListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: string | undefined): Promise<CommentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Comment/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<CommentListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = CommentListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CommentListDto>(<any> null);
    }

    /**
     * 获取编辑 评论
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: string | undefined): Promise<GetCommentForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Comment/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetCommentForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetCommentForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCommentForEditOutput>(<any> null);
    }

    /**
     * 获取评论的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfCommentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Comment/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfCommentListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfCommentListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfCommentListDto>(<any> null);
    }

    /**
     * 导出评论为excel文件
     * @return Success
     */
    getToExcelFile(): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Comment/GetToExcelFile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetToExcelFile(_response);
        });
    }

    protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }
}

export class CommonLookupServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    findUsers(body: CommonLookupFindUsersInput | undefined): Promise<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFindUsers(_response);
        });
    }

    protected processFindUsers(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfNameValueDto>(<any> null);
    }

    /**
     * @return Success
     */
    getDefaultEditionName(): Promise<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetDefaultEditionName(_response);
        });
    }

    protected processGetDefaultEditionName(response: AxiosResponse): Promise<GetDefaultEditionNameOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetDefaultEditionNameOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetDefaultEditionNameOutput>(<any> null);
    }

    /**
     * @param onlyFreeItems (optional)
     * @return Success
     */
    getEditionsForCombobox(onlyFreeItems: boolean | undefined): Promise<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems === null) {
            throw new Error("The parameter 'onlyFreeItems' cannot be null.");
        } else if (onlyFreeItems !== undefined) {
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEditionsForCombobox(_response);
        });
    }

    protected processGetEditionsForCombobox(response: AxiosResponse): Promise<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfSubscribableEditionComboboxItemDto>(<any> null);
    }

    /**
     * @return Success
     */
    getValidateCodeTypesForCombobox(): Promise<ListResultDtoOfComboboxItemDtoTOfInt32> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetValidateCodeTypesForCombobox";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetValidateCodeTypesForCombobox(_response);
        });
    }

    protected processGetValidateCodeTypesForCombobox(response: AxiosResponse): Promise<ListResultDtoOfComboboxItemDtoTOfInt32> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfComboboxItemDtoTOfInt32.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfComboboxItemDtoTOfInt32>(<any> null);
    }
}

export class EditionServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createOrUpdateEdition(body: CreateOrUpdateEditionDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdateEdition(_response);
        });
    }

    protected processCreateOrUpdateEdition(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    deleteEdition(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteEdition(_response);
        });
    }

    protected processDeleteEdition(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param selectedEditionId (optional)
     * @param addAllItem (optional)
     * @param onlyFreeItems (optional)
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number | undefined, addAllItem: boolean | undefined, onlyFreeItems: boolean | undefined): Promise<SubscribableEditionComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId === null) {
            throw new Error("The parameter 'selectedEditionId' cannot be null.");
        } else if (selectedEditionId !== undefined) {
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&";
        }
        if (addAllItem === null) {
            throw new Error("The parameter 'addAllItem' cannot be null.");
        } else if (addAllItem !== undefined) {
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&";
        }
        if (onlyFreeItems === null) {
            throw new Error("The parameter 'onlyFreeItems' cannot be null.");
        } else if (onlyFreeItems !== undefined) {
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEditionComboboxItems(_response);
        });
    }

    protected processGetEditionComboboxItems(response: AxiosResponse): Promise<SubscribableEditionComboboxItemDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(SubscribableEditionComboboxItemDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubscribableEditionComboboxItemDto[]>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getEditionForEdit(id: number | undefined): Promise<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEditionForEdit(_response);
        });
    }

    protected processGetEditionForEdit(response: AxiosResponse): Promise<GetEditionEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetEditionEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetEditionEditOutput>(<any> null);
    }

    /**
     * @return Success
     */
    getEditions(): Promise<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetEditions(_response);
        });
    }

    protected processGetEditions(response: AxiosResponse): Promise<ListResultDtoOfEditionListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfEditionListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfEditionListDto>(<any> null);
    }

    /**
     * @param editionId (optional)
     * @return Success
     */
    getTenantCount(editionId: number | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetTenantCount?";
        if (editionId === null) {
            throw new Error("The parameter 'editionId' cannot be null.");
        } else if (editionId !== undefined) {
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTenantCount(_response);
        });
    }

    protected processGetTenantCount(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    moveTenantsToAnotherEdition(body: MoveTenantsToAnotherEditionDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/MoveTenantsToAnotherEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMoveTenantsToAnotherEdition(_response);
        });
    }

    protected processMoveTenantsToAnotherEdition(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class FriendshipServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    acceptFriendshipRequest(body: AcceptFriendshipRequestInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/AcceptFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAcceptFriendshipRequest(_response);
        });
    }

    protected processAcceptFriendshipRequest(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 屏蔽用户消息
     * @param body (optional)
     * @return Success
     */
    blockUser(body: BlockUserInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/BlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBlockUser(_response);
        });
    }

    protected processBlockUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加好友关系
     * @param body (optional)
     * @return Success
     */
    createFriendshipRequest(body: CreateFriendshipRequestInput | undefined): Promise<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateFriendshipRequest(_response);
        });
    }

    protected processCreateFriendshipRequest(response: AxiosResponse): Promise<FriendDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FriendDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FriendDto>(<any> null);
    }

    /**
     * 根据用户名查找用户
     * @param body (optional)
     * @return Success
     */
    createFriendshipRequestByUserName(body: CreateFriendshipRequestByUserNameInput | undefined): Promise<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequestByUserName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateFriendshipRequestByUserName(_response);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: AxiosResponse): Promise<FriendDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FriendDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FriendDto>(<any> null);
    }

    /**
     * 接收用户消息
     * @param body (optional)
     * @return Success
     */
    unblockUser(body: UnblockUserInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/UnblockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUnblockUser(_response);
        });
    }

    protected processUnblockUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class GitlabClientServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClientInfo(): Promise<GitLabClient> {
        let url_ = this.baseUrl + "/api/services/app/GitlabClient/GetClientInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetClientInfo(_response);
        });
    }

    protected processGetClientInfo(response: AxiosResponse): Promise<GitLabClient> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GitLabClient.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GitLabClient>(<any> null);
    }

    /**
     * @return Success
     */
    getDocument(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/GitlabClient/GetDocument";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetDocument(_response);
        });
    }

    protected processGetDocument(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param pathWithNamespace (optional)
     * @param filePath (optional)
     * @param fileName (optional)
     * @param fullPath (optional)
     * @param sercertCode (optional)
     * @return Success
     */
    getGitlabFileInfo(pathWithNamespace: string | undefined, filePath: string | undefined, fileName: string | undefined, fullPath: string | undefined, sercertCode: string | undefined): Promise<File> {
        let url_ = this.baseUrl + "/api/services/app/GitlabClient/GetGitlabFileInfo?";
        if (pathWithNamespace === null) {
            throw new Error("The parameter 'pathWithNamespace' cannot be null.");
        } else if (pathWithNamespace !== undefined) {
            url_ += "pathWithNamespace=" + encodeURIComponent("" + pathWithNamespace) + "&";
        }
        if (filePath === null) {
            throw new Error("The parameter 'filePath' cannot be null.");
        } else if (filePath !== undefined) {
            url_ += "filePath=" + encodeURIComponent("" + filePath) + "&";
        }
        if (fileName === null) {
            throw new Error("The parameter 'fileName' cannot be null.");
        } else if (fileName !== undefined) {
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        }
        if (fullPath === null) {
            throw new Error("The parameter 'fullPath' cannot be null.");
        } else if (fullPath !== undefined) {
            url_ += "fullPath=" + encodeURIComponent("" + fullPath) + "&";
        }
        if (sercertCode === null) {
            throw new Error("The parameter 'sercertCode' cannot be null.");
        } else if (sercertCode !== undefined) {
            url_ += "sercertCode=" + encodeURIComponent("" + sercertCode) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetGitlabFileInfo(_response);
        });
    }

    protected processGetGitlabFileInfo(response: AxiosResponse): Promise<File> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = File.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<File>(<any> null);
    }

    /**
     * @return Success
     */
    getProjects(): Promise<Project[]> {
        let url_ = this.baseUrl + "/api/services/app/GitlabClient/GetProjects";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetProjects(_response);
        });
    }

    protected processGetProjects(response: AxiosResponse): Promise<Project[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(Project.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Project[]>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    uploadPictureToImgBed(body: UploadPictureToBed | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/GitlabClient/UploadPictureToImgBed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUploadPictureToImgBed(_response);
        });
    }

    protected processUploadPictureToImgBed(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }
}

export class HostCachingServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    clearAllCaches(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/HostCaching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processClearAllCaches(_response);
        });
    }

    protected processClearAllCaches(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    clearCache(body: EntityDtoOfString | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/HostCaching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processClearCache(_response);
        });
    }

    protected processClearCache(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @return Success
     */
    getAllCaches(): Promise<ListResultDtoOfHostCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/HostCaching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllCaches(_response);
        });
    }

    protected processGetAllCaches(response: AxiosResponse): Promise<ListResultDtoOfHostCacheDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfHostCacheDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfHostCacheDto>(<any> null);
    }
}

export class HostSettingsServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Promise<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllSettings(_response);
        });
    }

    protected processGetAllSettings(response: AxiosResponse): Promise<HostSettingsEditDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = HostSettingsEditDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HostSettingsEditDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    sendTestEmail(body: SendTestEmailInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendTestEmail(_response);
        });
    }

    protected processSendTestEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updateAllSettings(body: HostSettingsEditDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateAllSettings(_response);
        });
    }

    protected processUpdateAllSettings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class InvalidUserExporterServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    exportToFile(body: ImportUserDto[] | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/InvalidUserExporter/ExportToFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processExportToFile(_response);
        });
    }

    protected processExportToFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }
}

export class LanguageServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createOrUpdateLanguage(body: CreateOrUpdateLanguageInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdateLanguage(_response);
        });
    }

    protected processCreateOrUpdateLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    deleteLanguage(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteLanguage(_response);
        });
    }

    protected processDeleteLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getLanguageForEdit(id: number | undefined): Promise<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetLanguageForEdit(_response);
        });
    }

    protected processGetLanguageForEdit(response: AxiosResponse): Promise<GetLanguageForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetLanguageForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetLanguageForEditOutput>(<any> null);
    }

    /**
     * @return Success
     */
    getLanguages(): Promise<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetLanguages(_response);
        });
    }

    protected processGetLanguages(response: AxiosResponse): Promise<GetLanguagesOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetLanguagesOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetLanguagesOutput>(<any> null);
    }

    /**
     * @param sourceName 语言名称
     * @param baseLanguageName (optional) 原语言名称
     * @param targetLanguageName 目标语言名称
     * @param targetValueFilter (optional) 目标值过滤
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getLanguageTexts(sourceName: string, baseLanguageName: string | undefined, targetLanguageName: string, targetValueFilter: string | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (sourceName === undefined || sourceName === null) {
            throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
        } else {
            url_ += "sourceName=" + encodeURIComponent("" + sourceName) + "&";
        }
        if (baseLanguageName === null) {
            throw new Error("The parameter 'baseLanguageName' cannot be null.");
        } else if (baseLanguageName !== undefined) {
            url_ += "baseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&";
        }
        if (targetLanguageName === undefined || targetLanguageName === null) {
            throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
        } else {
            url_ += "targetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&";
        }
        if (targetValueFilter === null) {
            throw new Error("The parameter 'targetValueFilter' cannot be null.");
        } else if (targetValueFilter !== undefined) {
            url_ += "targetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&";
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetLanguageTexts(_response);
        });
    }

    protected processGetLanguageTexts(response: AxiosResponse): Promise<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfLanguageTextListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfLanguageTextListDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    setDefaultLanguage(body: SetDefaultLanguageInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSetDefaultLanguage(_response);
        });
    }

    protected processSetDefaultLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 修改语言的文本内容
     * @param body (optional)
     * @return Success
     */
    updateLanguageText(body: UpdateLanguageTextInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateLanguageText(_response);
        });
    }

    protected processUpdateLanguageText(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class NotificationServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 删除通知
     * @param id (optional)
     * @return Success
     */
    deleteNotification(id: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/DeleteNotification?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteNotification(_response);
        });
    }

    protected processDeleteNotification(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @return Success
     */
    getNotificationSettings(): Promise<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetNotificationSettings(_response);
        });
    }

    protected processGetNotificationSettings(response: AxiosResponse): Promise<GetNotificationSettingsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetNotificationSettingsOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetNotificationSettingsOutput>(<any> null);
    }

    /**
     * @param state (optional) 是否阅读枚举 0是未读 1是已经阅读
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPagedUserNotifications(state: UserNotificationState | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetPagedUserNotifications?";
        if (state === null) {
            throw new Error("The parameter 'state' cannot be null.");
        } else if (state !== undefined) {
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPagedUserNotifications(_response);
        });
    }

    protected processGetPagedUserNotifications(response: AxiosResponse): Promise<GetNotificationsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetNotificationsOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetNotificationsOutput>(<any> null);
    }

    /**
     * @return Success
     */
    makeAllUserNotificationsAsRead(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/MakeAllUserNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMakeAllUserNotificationsAsRead(_response);
        });
    }

    protected processMakeAllUserNotificationsAsRead(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    makeNotificationAsRead(body: EntityDtoOfGuid | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/MakeNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMakeNotificationAsRead(_response);
        });
    }

    protected processMakeNotificationAsRead(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 更新消息设置
     * @param body (optional)
     * @return Success
     */
    updateNotificationSettings(body: UpdateNotificationSettingsInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateNotificationSettings(_response);
        });
    }

    protected processUpdateNotificationSettings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class OrganizationUnitServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 添加角色 组织关联
     * @param body (optional)
     * @return Success
     */
    addRoles(body: RolesToOrganizationUnitInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddRoles(_response);
        });
    }

    protected processAddRoles(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    addUsers(body: UsersToOrganizationUnitInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddUsers(_response);
        });
    }

    protected processAddUsers(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 批量从组织中移除角色
     * @param organizationUnitId (optional)
     * @param body (optional)
     * @return Success
     */
    batchRemoveRoleFromOrganizationUnit(organizationUnitId: number | undefined, body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/BatchRemoveRoleFromOrganizationUnit?";
        if (organizationUnitId === null) {
            throw new Error("The parameter 'organizationUnitId' cannot be null.");
        } else if (organizationUnitId !== undefined) {
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchRemoveRoleFromOrganizationUnit(_response);
        });
    }

    protected processBatchRemoveRoleFromOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 批量从组织中移除用户
     * @param organizationUnitId (optional) 组织机构Id
     * @param body (optional) 用户Id列表
     * @return Success
     */
    batchRemoveUserFromOrganizationUnit(organizationUnitId: number | undefined, body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/BatchRemoveUserFromOrganizationUnit?";
        if (organizationUnitId === null) {
            throw new Error("The parameter 'organizationUnitId' cannot be null.");
        } else if (organizationUnitId !== undefined) {
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchRemoveUserFromOrganizationUnit(_response);
        });
    }

    protected processBatchRemoveUserFromOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    create(body: CreateOrganizationUnitInput | undefined): Promise<OrganizationUnitListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<OrganizationUnitListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = OrganizationUnitListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrganizationUnitListDto>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    findRoles(body: FindUsersInput | undefined): Promise<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFindRoles(_response);
        });
    }

    protected processFindRoles(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfNameValueDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    findUsers(body: FindUsersInput | undefined): Promise<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFindUsers(_response);
        });
    }

    protected processFindUsers(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfNameValueDto>(<any> null);
    }

    /**
     * @return Success
     */
    getAllOrganizationUnitList(): Promise<ListResultDtoOfOrganizationUnitListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetAllOrganizationUnitList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllOrganizationUnitList(_response);
        });
    }

    protected processGetAllOrganizationUnitList(response: AxiosResponse): Promise<ListResultDtoOfOrganizationUnitListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfOrganizationUnitListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfOrganizationUnitListDto>(<any> null);
    }

    /**
     * 获取角色列表
     * @param id (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPagedOrganizationUnitRoles(id: number | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfOrganizationUnitRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetPagedOrganizationUnitRoles?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPagedOrganizationUnitRoles(_response);
        });
    }

    protected processGetPagedOrganizationUnitRoles(response: AxiosResponse): Promise<PagedResultDtoOfOrganizationUnitRoleListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfOrganizationUnitRoleListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfOrganizationUnitRoleListDto>(<any> null);
    }

    /**
     * @param id (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPagedOrganizationUnitUsers(id: number | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetPagedOrganizationUnitUsers?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPagedOrganizationUnitUsers(_response);
        });
    }

    protected processGetPagedOrganizationUnitUsers(response: AxiosResponse): Promise<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfOrganizationUnitUserListDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    isInOrganizationUnit(body: UserToOrganizationUnitInput | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/IsInOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processIsInOrganizationUnit(_response);
        });
    }

    protected processIsInOrganizationUnit(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    move(body: MoveOrganizationUnitInput | undefined): Promise<OrganizationUnitListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Move";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMove(_response);
        });
    }

    protected processMove(response: AxiosResponse): Promise<OrganizationUnitListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = OrganizationUnitListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrganizationUnitListDto>(<any> null);
    }

    /**
     * 删除 角色 组织关联
     * @param roleId (optional)
     * @param organizationUnitId (optional)
     * @return Success
     */
    removeRole(roleId: number | undefined, organizationUnitId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveRole?";
        if (roleId === null) {
            throw new Error("The parameter 'roleId' cannot be null.");
        } else if (roleId !== undefined) {
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        }
        if (organizationUnitId === null) {
            throw new Error("The parameter 'organizationUnitId' cannot be null.");
        } else if (organizationUnitId !== undefined) {
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveRole(_response);
        });
    }

    protected processRemoveRole(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param userId (optional)
     * @param organizationUnitId (optional)
     * @return Success
     */
    removeUser(userId: number | undefined, organizationUnitId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUser?";
        if (userId === null) {
            throw new Error("The parameter 'userId' cannot be null.");
        } else if (userId !== undefined) {
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        }
        if (organizationUnitId === null) {
            throw new Error("The parameter 'organizationUnitId' cannot be null.");
        } else if (organizationUnitId !== undefined) {
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveUser(_response);
        });
    }

    protected processRemoveUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 判断角色是否在当前组织
     * @param body (optional)
     * @return Success
     */
    rolesIsInOrganizationUnit(body: RoleToOrganizationUnitInput | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RolesIsInOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRolesIsInOrganizationUnit(_response);
        });
    }

    protected processRolesIsInOrganizationUnit(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    update(body: UpdateOrganizationUnitInput | undefined): Promise<OrganizationUnitListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<OrganizationUnitListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = OrganizationUnitListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrganizationUnitListDto>(<any> null);
    }
}

export class PermissionServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllPermissions(): Promise<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllPermissions(_response);
        });
    }

    protected processGetAllPermissions(response: AxiosResponse): Promise<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfFlatPermissionWithLevelDto>(<any> null);
    }

    /**
     * @return Success
     */
    getAllPermissionsTree(): Promise<ListResultDtoOfTreePermissionDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissionsTree";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllPermissionsTree(_response);
        });
    }

    protected processGetAllPermissionsTree(response: AxiosResponse): Promise<ListResultDtoOfTreePermissionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfTreePermissionDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfTreePermissionDto>(<any> null);
    }
}

export class PortalBlogServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    autoMaticallyPublishMarkdownPosts(body: GitlabPostsNavInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/PortalBlog/AutoMaticallyPublishMarkdownPosts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAutoMaticallyPublishMarkdownPosts(_response);
        });
    }

    protected processAutoMaticallyPublishMarkdownPosts(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param dt (optional)
     * @return Success
     */
    convertDatetimeToTimeAgo(dt: moment.Moment | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/PortalBlog/ConvertDatetimeToTimeAgo?";
        if (dt === null) {
            throw new Error("The parameter 'dt' cannot be null.");
        } else if (dt !== undefined) {
            url_ += "dt=" + encodeURIComponent(dt ? "" + dt.toJSON() : "") + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processConvertDatetimeToTimeAgo(_response);
        });
    }

    protected processConvertDatetimeToTimeAgo(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }

    /**
     * @param content (optional)
     * @return Success
     */
    getShortContentByHtml(content: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/PortalBlog/GetShortContentByHtml?";
        if (content === null) {
            throw new Error("The parameter 'content' cannot be null.");
        } else if (content !== undefined) {
            url_ += "content=" + encodeURIComponent("" + content) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetShortContentByHtml(_response);
        });
    }

    protected processGetShortContentByHtml(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }

    /**
     * @param content (optional)
     * @return Success
     */
    getShortContentByMarkDown(content: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/PortalBlog/GetShortContentByMarkDown?";
        if (content === null) {
            throw new Error("The parameter 'content' cannot be null.");
        } else if (content !== undefined) {
            url_ += "content=" + encodeURIComponent("" + content) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetShortContentByMarkDown(_response);
        });
    }

    protected processGetShortContentByMarkDown(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }

    /**
     * @param content (optional)
     * @return Success
     */
    renderMarkdownToHtml(content: string | undefined): Promise<IHtmlContent> {
        let url_ = this.baseUrl + "/api/services/app/PortalBlog/RenderMarkdownToHtml?";
        if (content === null) {
            throw new Error("The parameter 'content' cannot be null.");
        } else if (content !== undefined) {
            url_ += "content=" + encodeURIComponent("" + content) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRenderMarkdownToHtml(_response);
        });
    }

    protected processRenderMarkdownToHtml(response: AxiosResponse): Promise<IHtmlContent> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = IHtmlContent.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IHtmlContent>(<any> null);
    }

    /**
     * @param content (optional)
     * @return Success
     */
    renderMarkdownToString(content: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/PortalBlog/RenderMarkdownToString?";
        if (content === null) {
            throw new Error("The parameter 'content' cannot be null.");
        } else if (content !== undefined) {
            url_ += "content=" + encodeURIComponent("" + content) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRenderMarkdownToString(_response);
        });
    }

    protected processRenderMarkdownToString(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }
}

export class PostServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除Post的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: string[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Post/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改文章的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdatePostInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Post/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createPostByMakrdown(body: CreatePostDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Post/CreatePostByMakrdown";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreatePostByMakrdown(_response);
        });
    }

    protected processCreatePostByMakrdown(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除文章信息
     * @param id (optional)
     * @return Success
     */
    delete(id: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Post/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取PostListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: string | undefined): Promise<PostListDto> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<PostListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PostListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostListDto>(<any> null);
    }

    /**
     * 获取编辑 文章
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: string | undefined): Promise<GetPostForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetPostForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetPostForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetPostForEditOutput>(<any> null);
    }

    /**
     * 获取阅读文章的地址
     * @param url (optional)
     * @param blogId (optional)
     * @return Success
     */
    getForReading(url: string | undefined, blogId: string | undefined): Promise<PostDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetForReading?";
        if (url === null) {
            throw new Error("The parameter 'url' cannot be null.");
        } else if (url !== undefined) {
            url_ += "url=" + encodeURIComponent("" + url) + "&";
        }
        if (blogId === null) {
            throw new Error("The parameter 'blogId' cannot be null.");
        } else if (blogId !== undefined) {
            url_ += "blogId=" + encodeURIComponent("" + blogId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForReading(_response);
        });
    }

    protected processGetForReading(response: AxiosResponse): Promise<PostDetailsDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PostDetailsDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostDetailsDto>(<any> null);
    }

    /**
     * 根据博客id或者标签查询文章列表
     * @param blogId (optional)
     * @param tagName (optional)
     * @return Success
     */
    getListByBlogIdAndTagName(blogId: string | undefined, tagName: string | undefined): Promise<ListResultDtoOfPostDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetListByBlogIdAndTagName?";
        if (blogId === null) {
            throw new Error("The parameter 'blogId' cannot be null.");
        } else if (blogId !== undefined) {
            url_ += "blogId=" + encodeURIComponent("" + blogId) + "&";
        }
        if (tagName === null) {
            throw new Error("The parameter 'tagName' cannot be null.");
        } else if (tagName !== undefined) {
            url_ += "tagName=" + encodeURIComponent("" + tagName) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetListByBlogIdAndTagName(_response);
        });
    }

    protected processGetListByBlogIdAndTagName(response: AxiosResponse): Promise<ListResultDtoOfPostDetailsDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfPostDetailsDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfPostDetailsDto>(<any> null);
    }

    /**
     * 根据博客id获取阅读量最多的10条文章
     * @param blogId (optional)
     * @return Success
     */
    getMostViewsListByBlogId(blogId: string | undefined): Promise<PostDetailsDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetMostViewsListByBlogId?";
        if (blogId === null) {
            throw new Error("The parameter 'blogId' cannot be null.");
        } else if (blogId !== undefined) {
            url_ += "blogId=" + encodeURIComponent("" + blogId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetMostViewsListByBlogId(_response);
        });
    }

    protected processGetMostViewsListByBlogId(response: AxiosResponse): Promise<PostDetailsDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(PostDetailsDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PostDetailsDto[]>(<any> null);
    }

    /**
     * 获取文章的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfPostListDto> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfPostListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfPostListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfPostListDto>(<any> null);
    }

    /**
     * 导出文章为excel文件
     * @return Success
     */
    getToExcelFile(): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Post/GetToExcelFile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetToExcelFile(_response);
        });
    }

    protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }
}

export class ProfileServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    changeLanguage(body: ChangeUserLanguageDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangeLanguage(_response);
        });
    }

    protected processChangeLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    changePassword(body: ChangePasswordInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除用户头像
     * @param profilePictureId (optional) 头像ID
     * @return Success
     */
    deleteProfilePictureById(profilePictureId: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/DeleteProfilePictureById?";
        if (profilePictureId === null) {
            throw new Error("The parameter 'profilePictureId' cannot be null.");
        } else if (profilePictureId !== undefined) {
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteProfilePictureById(_response);
        });
    }

    protected processDeleteProfilePictureById(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 获取当前的个人信息
     * @return Success
     */
    getCurrentUserProfileForEdit(): Promise<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCurrentUserProfileForEdit(_response);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: AxiosResponse): Promise<CurrentUserProfileEditDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = CurrentUserProfileEditDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurrentUserProfileEditDto>(<any> null);
    }

    /**
     * @param profilePictureId (optional)
     * @param userId (optional)
     * @param tenantId (optional)
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: string | undefined, userId: number | undefined, tenantId: number | undefined): Promise<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetFriendProfilePictureById?";
        if (profilePictureId === null) {
            throw new Error("The parameter 'profilePictureId' cannot be null.");
        } else if (profilePictureId !== undefined) {
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&";
        }
        if (userId === null) {
            throw new Error("The parameter 'userId' cannot be null.");
        } else if (userId !== undefined) {
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        }
        if (tenantId === null) {
            throw new Error("The parameter 'tenantId' cannot be null.");
        } else if (tenantId !== undefined) {
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetFriendProfilePictureById(_response);
        });
    }

    protected processGetFriendProfilePictureById(response: AxiosResponse): Promise<GetProfilePictureOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetProfilePictureOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetProfilePictureOutput>(<any> null);
    }

    /**
     * @param profilePictureId (optional)
     * @return Success
     */
    getProfilePictureById(profilePictureId: string | undefined): Promise<GetProfilePictureOutputDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId === null) {
            throw new Error("The parameter 'profilePictureId' cannot be null.");
        } else if (profilePictureId !== undefined) {
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetProfilePictureById(_response);
        });
    }

    protected processGetProfilePictureById(response: AxiosResponse): Promise<GetProfilePictureOutputDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetProfilePictureOutputDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetProfilePictureOutputDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updateCurrentUserProfile(body: CurrentUserProfileEditDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateCurrentUserProfile(_response);
        });
    }

    protected processUpdateCurrentUserProfile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updateProfilePicture(body: UpdateProfilePictureInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateProfilePicture(_response);
        });
    }

    protected processUpdateProfilePicture(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class PurchaseServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createPay(body: PurchasePayInput | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/Purchase/CreatePay";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreatePay(_response);
        });
    }

    protected processCreatePay(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }
}

export class RoleServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除角色
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateRoleInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 服务于前端RoleComboxComponent 组件信息，
     * @param permission (optional) 权限名称
     * @return Success
     */
    getAll(permission: string | undefined): Promise<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (permission === null) {
            throw new Error("The parameter 'permission' cannot be null.");
        } else if (permission !== undefined) {
            url_ += "permission=" + encodeURIComponent("" + permission) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ListResultDtoOfRoleListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfRoleListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfRoleListDto>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetRoleForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetRoleForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRoleForEditOutput>(<any> null);
    }

    /**
     * @param permissionNames (optional) 权限名称
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(permissionNames: string[] | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetPaged?";
        if (permissionNames === null) {
            throw new Error("The parameter 'permissionNames' cannot be null.");
        } else if (permissionNames !== undefined) {
            permissionNames && permissionNames.forEach(item => {
                url_ += "permissionNames=" + encodeURIComponent("" + item) + "&";
            });
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfRoleListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfRoleListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfRoleListDto>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getRoleForEdit(id: number | undefined): Promise<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetRoleForEdit(_response);
        });
    }

    protected processGetRoleForEdit(response: AxiosResponse): Promise<GetRoleForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetRoleForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRoleForEditOutput>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updatePermissions(body: UpdateRolePermissionsInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/UpdatePermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdatePermissions(_response);
        });
    }

    protected processUpdatePermissions(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class SessionServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Promise<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCurrentLoginInformations(_response);
        });
    }

    protected processGetCurrentLoginInformations(response: AxiosResponse): Promise<GetCurrentLoginInformationsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentLoginInformationsOutput>(<any> null);
    }

    /**
     * @return Success
     */
    getUserConfigurations(): Promise<AbpUserConfigurationDto> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetUserConfigurations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserConfigurations(_response);
        });
    }

    protected processGetUserConfigurations(response: AxiosResponse): Promise<AbpUserConfigurationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = AbpUserConfigurationDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AbpUserConfigurationDto>(<any> null);
    }

    /**
     * @return Success
     */
    updateUserSignInToken(): Promise<UpdateUserSignInTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/UpdateUserSignInToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateUserSignInToken(_response);
        });
    }

    protected processUpdateUserSignInToken(response: AxiosResponse): Promise<UpdateUserSignInTokenOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = UpdateUserSignInTokenOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateUserSignInTokenOutput>(<any> null);
    }
}

export class SettingsAppServiceBaseServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    sendTestEmail(body: SendTestEmailInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SettingsAppServiceBase/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendTestEmail(_response);
        });
    }

    protected processSendTestEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class SysFileServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除SysFile的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: string[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 复制文件
     * @param body (optional)
     * @return Success
     */
    copyFile(body: SysFileEditDto | undefined): Promise<SysFileListDto> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/CopyFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCopyFile(_response);
        });
    }

    protected processCopyFile(response: AxiosResponse): Promise<SysFileListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = SysFileListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFileListDto>(<any> null);
    }

    /**
     * 新增文件
     * @param parentId (optional)
     * @return Success
     */
    create(parentId: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/Create?";
        if (parentId === null) {
            throw new Error("The parameter 'parentId' cannot be null.");
        } else if (parentId !== undefined) {
            url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 创建文件夹
     * @param body (optional)
     * @return Success
     */
    createDirectory(body: SysFileEditDto | undefined): Promise<SysFileListDto> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/CreateDirectory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateDirectory(_response);
        });
    }

    protected processCreateDirectory(response: AxiosResponse): Promise<SysFileListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = SysFileListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFileListDto>(<any> null);
    }

    /**
     * 删除文件信息
     * @param id (optional)
     * @return Success
     */
    delete(id: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取SysFileListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: string | undefined): Promise<SysFileListDto> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<SysFileListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = SysFileListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFileListDto>(<any> null);
    }

    /**
     * 获取文件夹列表
     * @return Success
     */
    getDirectories(): Promise<SysFileListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/GetDirectories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetDirectories(_response);
        });
    }

    protected processGetDirectories(response: AxiosResponse): Promise<SysFileListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(SysFileListDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFileListDto[]>(<any> null);
    }

    /**
     * 获取编辑 文件
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: string | undefined): Promise<GetSysFileForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetSysFileForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetSysFileForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetSysFileForEditOutput>(<any> null);
    }

    /**
     * 获取文件的分页列表信息
     * @param parentId (optional) 父级Id
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(parentId: string | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfSysFileListDto> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/GetPaged?";
        if (parentId === null) {
            throw new Error("The parameter 'parentId' cannot be null.");
        } else if (parentId !== undefined) {
            url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfSysFileListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfSysFileListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfSysFileListDto>(<any> null);
    }

    /**
     * 移动文件夹和文件
     * @param body (optional)
     * @return Success
     */
    move(body: MoveSysFilesInput | undefined): Promise<SysFileListDto> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/Move";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMove(_response);
        });
    }

    protected processMove(response: AxiosResponse): Promise<SysFileListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = SysFileListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFileListDto>(<any> null);
    }

    /**
     * 重命名文件
     * @param body (optional)
     * @return Success
     */
    reFileName(body: SysFileEditDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/ReFileName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processReFileName(_response);
        });
    }

    protected processReFileName(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 编辑文件
     * @param body (optional)
     * @return Success
     */
    update(body: SysFileEditDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysFile/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class TagServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除Tag的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: string[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tag/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改标签的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateTagInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tag/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除标签信息
     * @param id (optional)
     * @return Success
     */
    delete(id: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tag/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取TagListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: string | undefined): Promise<TagListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<TagListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = TagListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TagListDto>(<any> null);
    }

    /**
     * 获取编辑 标签
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: string | undefined): Promise<GetTagForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetTagForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetTagForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetTagForEditOutput>(<any> null);
    }

    /**
     * 获取标签的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfTagListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfTagListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfTagListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTagListDto>(<any> null);
    }

    /**
     * 获取流行的标签
     * @param blogId (optional)
     * @param resultCount (optional)
     * @param minimumPostCount (optional)
     * @return Success
     */
    getPopularTags(blogId: string | undefined, resultCount: number | undefined, minimumPostCount: number | undefined): Promise<TagListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetPopularTags?";
        if (blogId === null) {
            throw new Error("The parameter 'blogId' cannot be null.");
        } else if (blogId !== undefined) {
            url_ += "blogId=" + encodeURIComponent("" + blogId) + "&";
        }
        if (resultCount === null) {
            throw new Error("The parameter 'resultCount' cannot be null.");
        } else if (resultCount !== undefined) {
            url_ += "resultCount=" + encodeURIComponent("" + resultCount) + "&";
        }
        if (minimumPostCount === null) {
            throw new Error("The parameter 'minimumPostCount' cannot be null.");
        } else if (minimumPostCount !== undefined) {
            url_ += "minimumPostCount=" + encodeURIComponent("" + minimumPostCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPopularTags(_response);
        });
    }

    protected processGetPopularTags(response: AxiosResponse): Promise<TagListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(TagListDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TagListDto[]>(<any> null);
    }

    /**
     * 导出标签为excel文件
     * @return Success
     */
    getToExcelFile(): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Tag/GetToExcelFile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetToExcelFile(_response);
        });
    }

    protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }
}

export class TenantServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: EntityDto[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    create(body: CreateTenantInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<TenantEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<TenantEditDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = TenantEditDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantEditDto>(<any> null);
    }

    /**
     * @param subscriptionStart (optional)
     * @param subscriptionEnd (optional)
     * @param creationDateStart (optional)
     * @param creationDateEnd (optional)
     * @param editionId (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(subscriptionStart: moment.Moment | undefined, subscriptionEnd: moment.Moment | undefined, creationDateStart: moment.Moment | undefined, creationDateEnd: moment.Moment | undefined, editionId: number | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetPaged?";
        if (subscriptionStart === null) {
            throw new Error("The parameter 'subscriptionStart' cannot be null.");
        } else if (subscriptionStart !== undefined) {
            url_ += "subscriptionStart=" + encodeURIComponent(subscriptionStart ? "" + subscriptionStart.toJSON() : "") + "&";
        }
        if (subscriptionEnd === null) {
            throw new Error("The parameter 'subscriptionEnd' cannot be null.");
        } else if (subscriptionEnd !== undefined) {
            url_ += "subscriptionEnd=" + encodeURIComponent(subscriptionEnd ? "" + subscriptionEnd.toJSON() : "") + "&";
        }
        if (creationDateStart === null) {
            throw new Error("The parameter 'creationDateStart' cannot be null.");
        } else if (creationDateStart !== undefined) {
            url_ += "creationDateStart=" + encodeURIComponent(creationDateStart ? "" + creationDateStart.toJSON() : "") + "&";
        }
        if (creationDateEnd === null) {
            throw new Error("The parameter 'creationDateEnd' cannot be null.");
        } else if (creationDateEnd !== undefined) {
            url_ += "creationDateEnd=" + encodeURIComponent(creationDateEnd ? "" + creationDateEnd.toJSON() : "") + "&";
        }
        if (editionId === null) {
            throw new Error("The parameter 'editionId' cannot be null.");
        } else if (editionId !== undefined) {
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&";
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfTenantListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfTenantListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTenantListDto>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getTenantFeaturesForEdit(id: number | undefined): Promise<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTenantFeaturesForEdit(_response);
        });
    }

    protected processGetTenantFeaturesForEdit(response: AxiosResponse): Promise<GetTenantFeaturesEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetTenantFeaturesEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetTenantFeaturesEditOutput>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    resetTenantSpecificFeatures(body: EntityDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResetTenantSpecificFeatures(_response);
        });
    }

    protected processResetTenantSpecificFeatures(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    unlockTenantAdmin(body: EntityDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUnlockTenantAdmin(_response);
        });
    }

    protected processUnlockTenantAdmin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    update(body: TenantEditDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updateTenantFeatures(body: UpdateTenantFeaturesInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateTenantFeatures(_response);
        });
    }

    protected processUpdateTenantFeatures(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class TenantRegistrationServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 注册租户信息
     * @param body (optional)
     * @return Success
     */
    registerTenant(body: CreateTenantDto | undefined): Promise<RegisterTenantResultDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegisterTenant(_response);
        });
    }

    protected processRegisterTenant(response: AxiosResponse): Promise<RegisterTenantResultDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = RegisterTenantResultDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegisterTenantResultDto>(<any> null);
    }
}

export class TenantSettingsServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    clearCustomCss(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearCustomCss";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processClearCustomCss(_response);
        });
    }

    protected processClearCustomCss(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @return Success
     */
    clearLogo(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processClearLogo(_response);
        });
    }

    protected processClearLogo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 获取所有设置
     * @return Success
     */
    getAllSettings(): Promise<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllSettings(_response);
        });
    }

    protected processGetAllSettings(response: AxiosResponse): Promise<TenantSettingsEditDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = TenantSettingsEditDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantSettingsEditDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    sendTestEmail(body: SendTestEmailInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendTestEmail(_response);
        });
    }

    protected processSendTestEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 更新所有设置
     * @param body (optional)
     * @return Success
     */
    updateAllSettings(body: TenantSettingsEditDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdateAllSettings(_response);
        });
    }

    protected processUpdateAllSettings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class TimingServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param selectedTimezoneId (optional)
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string | undefined): Promise<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId === null) {
            throw new Error("The parameter 'selectedTimezoneId' cannot be null.");
        } else if (selectedTimezoneId !== undefined) {
            url_ += "selectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTimezoneComboboxItems(_response);
        });
    }

    protected processGetTimezoneComboboxItems(response: AxiosResponse): Promise<ComboboxItemDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(ComboboxItemDto.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComboboxItemDto[]>(<any> null);
    }

    /**
     * @return Success
     */
    getTimezones(defaultTimezoneScope: SettingScopes): Promise<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope === undefined || defaultTimezoneScope === null) {
            throw new Error("The parameter 'defaultTimezoneScope' must be defined and cannot be null.");
        } else {
            url_ += "defaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetTimezones(_response);
        });
    }

    protected processGetTimezones(response: AxiosResponse): Promise<ListResultDtoOfNameValueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfNameValueDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfNameValueDto>(<any> null);
    }
}

export class UserServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除用户
     * @param body (optional) 用户Id列表
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateUserInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 修改用户信息
     * @param id (optional)
     * @return Success
     */
    getForEditTree(id: number | undefined): Promise<GetUserForEditTreeOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetForEditTree?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEditTree(_response);
        });
    }

    protected processGetForEditTree(response: AxiosResponse): Promise<GetUserForEditTreeOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetUserForEditTreeOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserForEditTreeOutput>(<any> null);
    }

    /**
     * 分页获取所有用户
     * @param permission (optional) 权限
     * @param role (optional) 检索角色Id列表
     * @param isEmailConfirmed (optional) 是否已验证邮箱
     * @param isActive (optional) 是否已激活
     * @param onlyLockedUsers (optional) 仅被锁定的用户
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(permission: string[] | undefined, role: number[] | undefined, isEmailConfirmed: boolean | undefined, isActive: boolean | undefined, onlyLockedUsers: boolean | undefined, filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetPaged?";
        if (permission === null) {
            throw new Error("The parameter 'permission' cannot be null.");
        } else if (permission !== undefined) {
            permission && permission.forEach(item => {
                url_ += "permission=" + encodeURIComponent("" + item) + "&";
            });
        }
        if (role === null) {
            throw new Error("The parameter 'role' cannot be null.");
        } else if (role !== undefined) {
            role && role.forEach(item => {
                url_ += "role=" + encodeURIComponent("" + item) + "&";
            });
        }
        if (isEmailConfirmed === null) {
            throw new Error("The parameter 'isEmailConfirmed' cannot be null.");
        } else if (isEmailConfirmed !== undefined) {
            url_ += "isEmailConfirmed=" + encodeURIComponent("" + isEmailConfirmed) + "&";
        }
        if (isActive === null) {
            throw new Error("The parameter 'isActive' cannot be null.");
        } else if (isActive !== undefined) {
            url_ += "isActive=" + encodeURIComponent("" + isActive) + "&";
        }
        if (onlyLockedUsers === null) {
            throw new Error("The parameter 'onlyLockedUsers' cannot be null.");
        } else if (onlyLockedUsers !== undefined) {
            url_ += "onlyLockedUsers=" + encodeURIComponent("" + onlyLockedUsers) + "&";
        }
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfUserListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfUserListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfUserListDto>(<any> null);
    }

    /**
     * 用户的权限编辑
     * @param id (optional)
     * @return Success
     */
    getPermissionsTreeForEdit(id: number | undefined): Promise<GetUserPermissionsTreeForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetPermissionsTreeForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPermissionsTreeForEdit(_response);
        });
    }

    protected processGetPermissionsTreeForEdit(response: AxiosResponse): Promise<GetUserPermissionsTreeForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetUserPermissionsTreeForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserPermissionsTreeForEditOutput>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getUserForEdit(id: number | undefined): Promise<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserForEdit(_response);
        });
    }

    protected processGetUserForEdit(response: AxiosResponse): Promise<GetUserForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetUserForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserForEditOutput>(<any> null);
    }

    /**
     * @param id (optional)
     * @return Success
     */
    getUserPermissionsForEdit(id: number | undefined): Promise<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUserPermissionsForEdit(_response);
        });
    }

    protected processGetUserPermissionsForEdit(response: AxiosResponse): Promise<GetUserPermissionsForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetUserPermissionsForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserPermissionsForEditOutput>(<any> null);
    }

    /**
     * 获取用户导出信息
     * @return Success
     */
    getUsersToExcel(): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetUsersToExcel(_response);
        });
    }

    protected processGetUsersToExcel(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    resetPassword(body: NullableIdDtoOfInt64 | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResetPassword(_response);
        });
    }

    protected processResetPassword(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    resetSpecificPermissions(body: EntityDtoOfInt64 | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResetSpecificPermissions(_response);
        });
    }

    protected processResetSpecificPermissions(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    unlock(body: EntityDtoOfInt64 | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Unlock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUnlock(_response);
        });
    }

    protected processUnlock(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updatePermissions(body: UpdateUserPermissionsInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdatePermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdatePermissions(_response);
        });
    }

    protected processUpdatePermissions(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class UserEmailerServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Send email activation link to user's email address.
     * @param link (optional) Email activation link
     * @param plainPassword (optional) Can be set to user's plain password to include it in the email.
     * @param body (optional) User
     * @return Success
     */
    sendEmailActivationLink(link: string | undefined, plainPassword: string | undefined, body: User | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/SendEmailActivationLink?";
        if (link === null) {
            throw new Error("The parameter 'link' cannot be null.");
        } else if (link !== undefined) {
            url_ += "link=" + encodeURIComponent("" + link) + "&";
        }
        if (plainPassword === null) {
            throw new Error("The parameter 'plainPassword' cannot be null.");
        } else if (plainPassword !== undefined) {
            url_ += "plainPassword=" + encodeURIComponent("" + plainPassword) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendEmailActivationLink(_response);
        });
    }

    protected processSendEmailActivationLink(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param emailAddress (optional)
     * @param code (optional)
     * @return Success
     */
    sendEmailAddressConfirmCode(emailAddress: string | undefined, code: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/SendEmailAddressConfirmCode?";
        if (emailAddress === null) {
            throw new Error("The parameter 'emailAddress' cannot be null.");
        } else if (emailAddress !== undefined) {
            url_ += "emailAddress=" + encodeURIComponent("" + emailAddress) + "&";
        }
        if (code === null) {
            throw new Error("The parameter 'code' cannot be null.");
        } else if (code !== undefined) {
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendEmailAddressConfirmCode(_response);
        });
    }

    protected processSendEmailAddressConfirmCode(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * Sends a password reset link to user's email.
     * @param link (optional) Reset link
     * @param body (optional) User
     * @return Success
     */
    sendPasswordResetLink(link: string | undefined, body: User | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/SendPasswordResetLink?";
        if (link === null) {
            throw new Error("The parameter 'link' cannot be null.");
        } else if (link !== undefined) {
            url_ += "link=" + encodeURIComponent("" + link) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSendPasswordResetLink(_response);
        });
    }

    protected processSendPasswordResetLink(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param utcNow (optional)
     * @param body (optional)
     * @return Success
     */
    tryToSendFailedSubscriptionTerminationsEmail(utcNow: moment.Moment | undefined, body: string[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/TryToSendFailedSubscriptionTerminationsEmail?";
        if (utcNow === null) {
            throw new Error("The parameter 'utcNow' cannot be null.");
        } else if (utcNow !== undefined) {
            url_ += "utcNow=" + encodeURIComponent(utcNow ? "" + utcNow.toJSON() : "") + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTryToSendFailedSubscriptionTerminationsEmail(_response);
        });
    }

    protected processTryToSendFailedSubscriptionTerminationsEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param tenantId (optional)
     * @param utcNow (optional)
     * @param expiringEditionId (optional)
     * @return Success
     */
    tryToSendSubscriptionAssignedToAnotherEmail(tenantId: number | undefined, utcNow: moment.Moment | undefined, expiringEditionId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/TryToSendSubscriptionAssignedToAnotherEmail?";
        if (tenantId === null) {
            throw new Error("The parameter 'tenantId' cannot be null.");
        } else if (tenantId !== undefined) {
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        }
        if (utcNow === null) {
            throw new Error("The parameter 'utcNow' cannot be null.");
        } else if (utcNow !== undefined) {
            url_ += "utcNow=" + encodeURIComponent(utcNow ? "" + utcNow.toJSON() : "") + "&";
        }
        if (expiringEditionId === null) {
            throw new Error("The parameter 'expiringEditionId' cannot be null.");
        } else if (expiringEditionId !== undefined) {
            url_ += "expiringEditionId=" + encodeURIComponent("" + expiringEditionId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTryToSendSubscriptionAssignedToAnotherEmail(_response);
        });
    }

    protected processTryToSendSubscriptionAssignedToAnotherEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param tenantId (optional)
     * @param utcNow (optional)
     * @return Success
     */
    tryToSendSubscriptionExpireEmail(tenantId: number | undefined, utcNow: moment.Moment | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/TryToSendSubscriptionExpireEmail?";
        if (tenantId === null) {
            throw new Error("The parameter 'tenantId' cannot be null.");
        } else if (tenantId !== undefined) {
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        }
        if (utcNow === null) {
            throw new Error("The parameter 'utcNow' cannot be null.");
        } else if (utcNow !== undefined) {
            url_ += "utcNow=" + encodeURIComponent(utcNow ? "" + utcNow.toJSON() : "") + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTryToSendSubscriptionExpireEmail(_response);
        });
    }

    protected processTryToSendSubscriptionExpireEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param tenantId (optional)
     * @param dateToCheckRemainingDayCount (optional)
     * @return Success
     */
    tryToSendSubscriptionExpiringSoonEmail(tenantId: number | undefined, dateToCheckRemainingDayCount: moment.Moment | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserEmailer/TryToSendSubscriptionExpiringSoonEmail?";
        if (tenantId === null) {
            throw new Error("The parameter 'tenantId' cannot be null.");
        } else if (tenantId !== undefined) {
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        }
        if (dateToCheckRemainingDayCount === null) {
            throw new Error("The parameter 'dateToCheckRemainingDayCount' cannot be null.");
        } else if (dateToCheckRemainingDayCount !== undefined) {
            url_ += "dateToCheckRemainingDayCount=" + encodeURIComponent(dateToCheckRemainingDayCount ? "" + dateToCheckRemainingDayCount.toJSON() : "") + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTryToSendSubscriptionExpiringSoonEmail(_response);
        });
    }

    protected processTryToSendSubscriptionExpiringSoonEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class UserLinkServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param sorting (optional)
     * @return Success
     */
    getLinkedUsers(maxResultCount: number | undefined, skipCount: number | undefined, sorting: string | undefined): Promise<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetLinkedUsers(_response);
        });
    }

    protected processGetLinkedUsers(response: AxiosResponse): Promise<PagedResultDtoOfLinkedUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfLinkedUserDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfLinkedUserDto>(<any> null);
    }

    /**
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Promise<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetRecentlyUsedLinkedUsers(_response);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: AxiosResponse): Promise<ListResultDtoOfLinkedUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfLinkedUserDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfLinkedUserDto>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    linkToUser(body: LinkToUserInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLinkToUser(_response);
        });
    }

    protected processLinkToUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    unlinkUser(body: UnlinkUserInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUnlinkUser(_response);
        });
    }

    protected processUnlinkUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class UserLoginServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRecentUserLoginAttempts(): Promise<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetRecentUserLoginAttempts(_response);
        });
    }

    protected processGetRecentUserLoginAttempts(response: AxiosResponse): Promise<ListResultDtoOfUserLoginAttemptDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfUserLoginAttemptDto>(<any> null);
    }
}

export class WebSiteLogServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 下载日志文件压缩包
     * @return Success
     */
    downloadWebLogs(): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDownloadWebLogs(_response);
        });
    }

    protected processDownloadWebLogs(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = FileDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any> null);
    }

    /**
     * 获取最新的网站日志信息
     * @return Success
     */
    getLatestWebLogs(): Promise<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetLatestWebLogs(_response);
        });
    }

    protected processGetLatestWebLogs(response: AxiosResponse): Promise<GetLatestWebLogsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetLatestWebLogsOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetLatestWebLogsOutput>(<any> null);
    }
}

export class WebSiteNoticeServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除WebSiteNotice的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteNotice/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改网站公告的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateWebSiteNoticeInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteNotice/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除网站公告信息
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteNotice/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取WebSiteNoticeListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: number | undefined): Promise<WebSiteNoticeListDto> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteNotice/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<WebSiteNoticeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = WebSiteNoticeListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WebSiteNoticeListDto>(<any> null);
    }

    /**
     * 获取编辑 网站公告
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<GetWebSiteNoticeForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteNotice/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetWebSiteNoticeForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetWebSiteNoticeForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetWebSiteNoticeForEditOutput>(<any> null);
    }

    /**
     * 获取网站公告的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfWebSiteNoticeListDto> {
        let url_ = this.baseUrl + "/api/services/app/WebSiteNotice/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfWebSiteNoticeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfWebSiteNoticeListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfWebSiteNoticeListDto>(<any> null);
    }
}

export class WechatAppConfigServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 批量删除WechatAppConfig的方法
     * @param body (optional)
     * @return Success
     */
    batchDelete(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBatchDelete(_response);
        });
    }

    protected processBatchDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 添加或者修改WechatAppConfig的公共方法
     * @param body (optional)
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateWechatAppConfigInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 删除WechatAppConfig信息的方法
     * @param id (optional)
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/Delete?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * 通过指定id获取WechatAppConfigListDto信息
     * @param id (optional)
     * @return Success
     */
    getById(id: number | undefined): Promise<WechatAppConfigListDto> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetById?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<WechatAppConfigListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = WechatAppConfigListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WechatAppConfigListDto>(<any> null);
    }

    /**
     * 获取编辑 WechatAppConfig
     * @param id (optional)
     * @return Success
     */
    getForEdit(id: number | undefined): Promise<GetWechatAppConfigForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetForEdit?";
        if (id === null) {
            throw new Error("The parameter 'id' cannot be null.");
        } else if (id !== undefined) {
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetForEdit(_response);
        });
    }

    protected processGetForEdit(response: AxiosResponse): Promise<GetWechatAppConfigForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetWechatAppConfigForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetWechatAppConfigForEditOutput>(<any> null);
    }

    /**
     * 获取WechatAppConfig的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    getPaged(filterText: string | undefined, sorting: string | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfWechatAppConfigListDto> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetPaged?";
        if (filterText === null) {
            throw new Error("The parameter 'filterText' cannot be null.");
        } else if (filterText !== undefined) {
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        }
        if (sorting === null) {
            throw new Error("The parameter 'sorting' cannot be null.");
        } else if (sorting !== undefined) {
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        }
        if (maxResultCount === null) {
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        } else if (maxResultCount !== undefined) {
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        }
        if (skipCount === null) {
            throw new Error("The parameter 'skipCount' cannot be null.");
        } else if (skipCount !== undefined) {
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetPaged(_response);
        });
    }

    protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfWechatAppConfigListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfWechatAppConfigListDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfWechatAppConfigListDto>(<any> null);
    }

    /**
     * 将wechat app注入到容器,如果已注入则刷新注入
     * @param appId (optional)
     * @return Success
     */
    registerWechatApp(appId: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatAppConfig/RegisterWechatApp?";
        if (appId === null) {
            throw new Error("The parameter 'appId' cannot be null.");
        } else if (appId !== undefined) {
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegisterWechatApp(_response);
        });
    }

    protected processRegisterWechatApp(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class WechatMediaServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    createOtherrMaterial(): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/WechatMedia/CreateOtherrMaterial";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOtherrMaterial(_response);
        });
    }

    protected processCreateOtherrMaterial(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any> null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any> null);
    }

    /**
     * @param appId (optional)
     * @param mediaId (optional)
     * @return Success
     */
    delete(appId: string | undefined, mediaId: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatMedia/Delete?";
        if (appId === null) {
            throw new Error("The parameter 'appId' cannot be null.");
        } else if (appId !== undefined) {
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        }
        if (mediaId === null) {
            throw new Error("The parameter 'mediaId' cannot be null.");
        } else if (mediaId !== undefined) {
            url_ += "mediaId=" + encodeURIComponent("" + mediaId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    getImageTextMaterialPaged(body: GetImageTextMaterialsInput | undefined): Promise<PagedResultDtoOfMediaList_News_Item> {
        let url_ = this.baseUrl + "/api/services/app/WechatMedia/GetImageTextMaterialPaged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetImageTextMaterialPaged(_response);
        });
    }

    protected processGetImageTextMaterialPaged(response: AxiosResponse): Promise<PagedResultDtoOfMediaList_News_Item> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfMediaList_News_Item.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfMediaList_News_Item>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    getOtherMaterialPaged(body: GetOtherMaterialsInput | undefined): Promise<PagedResultDtoOfMediaList_Others_Item> {
        let url_ = this.baseUrl + "/api/services/app/WechatMedia/GetOtherMaterialPaged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetOtherMaterialPaged(_response);
        });
    }

    protected processGetOtherMaterialPaged(response: AxiosResponse): Promise<PagedResultDtoOfMediaList_Others_Item> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = PagedResultDtoOfMediaList_Others_Item.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfMediaList_Others_Item>(<any> null);
    }
}

export class WechatMenuAppSeviceServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createOrWechatEditMenu(body: CreateOrEditWechatMenuInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/CreateOrWechatEditMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateOrWechatEditMenu(_response);
        });
    }

    protected processCreateOrWechatEditMenu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param appId (optional)
     * @param menuConditionalId (optional)
     * @return Success
     */
    deleteMenuConditional(appId: string | undefined, menuConditionalId: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/DeleteMenuConditional?";
        if (appId === null) {
            throw new Error("The parameter 'appId' cannot be null.");
        } else if (appId !== undefined) {
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        }
        if (menuConditionalId === null) {
            throw new Error("The parameter 'menuConditionalId' cannot be null.");
        } else if (menuConditionalId !== undefined) {
            url_ += "menuConditionalId=" + encodeURIComponent("" + menuConditionalId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "DELETE",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteMenuConditional(_response);
        });
    }

    protected processDeleteMenuConditional(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @param appId (optional)
     * @return Success
     */
    getMenuForEdit(appId: string | undefined): Promise<GetWechatMenuForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/GetMenuForEdit?";
        if (appId === null) {
            throw new Error("The parameter 'appId' cannot be null.");
        } else if (appId !== undefined) {
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetMenuForEdit(_response);
        });
    }

    protected processGetMenuForEdit(response: AxiosResponse): Promise<GetWechatMenuForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = GetWechatMenuForEditOutput.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetWechatMenuForEditOutput>(<any> null);
    }
}

export class TokenAuthServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional)
     * @return Success
     */
    activateAccount(body: ActivateAccountModel | undefined): Promise<ActivateAccountResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ActivateAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processActivateAccount(_response);
        });
    }

    protected processActivateAccount(response: AxiosResponse): Promise<ActivateAccountResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ActivateAccountResultModel.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ActivateAccountResultModel>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    authenticate(body: AuthenticateModel | undefined): Promise<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: AxiosResponse): Promise<AuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = AuthenticateResultModel.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthenticateResultModel>(<any> null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    externalAuthenticate(body: ExternalAuthenticateModel | undefined): Promise<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig> {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processExternalAuthenticate(_response);
        });
    }

    protected processExternalAuthenticate(response: AxiosResponse): Promise<ExternalAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ExternalAuthenticateResultModel.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExternalAuthenticateResultModel>(<any> null);
    }

    /**
     * @param name (optional)
     * @param tid (optional)
     * @return Success
     */
    generateVerification(name: string | undefined, tid: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/GenerateVerification?";
        if (name === null) {
            throw new Error("The parameter 'name' cannot be null.");
        } else if (name !== undefined) {
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        }
        if (tid === null) {
            throw new Error("The parameter 'tid' cannot be null.");
        } else if (tid !== undefined) {
            url_ += "tid=" + encodeURIComponent("" + tid) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGenerateVerification(_response);
        });
    }

    protected processGenerateVerification(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Promise<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetExternalAuthenticationProviders(_response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: AxiosResponse): Promise<ExternalLoginProviderInfoModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200) {
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExternalLoginProviderInfoModel[]>(<any> null);
    }

    /**
     * @param impersonationToken (optional)
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string | undefined): Promise<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken === null) {
            throw new Error("The parameter 'impersonationToken' cannot be null.");
        } else if (impersonationToken !== undefined) {
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processImpersonatedAuthenticate(_response);
        });
    }

    protected processImpersonatedAuthenticate(response: AxiosResponse): Promise<ImpersonatedAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = ImpersonatedAuthenticateResultModel.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ImpersonatedAuthenticateResultModel>(<any> null);
    }

    /**
     * @param switchAccountToken (optional)
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string | undefined): Promise<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken === null) {
            throw new Error("The parameter 'switchAccountToken' cannot be null.");
        } else if (switchAccountToken !== undefined) {
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLinkedAccountAuthenticate(_response);
        });
    }

    protected processLinkedAccountAuthenticate(response: AxiosResponse): Promise<SwitchedAccountAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = SwitchedAccountAuthenticateResultModel.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SwitchedAccountAuthenticateResultModel>(<any> null);
    }
}

export class VerificationServiceProxy {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    generateCaptcha(type: CaptchaType): Promise<void> {
        let url_ = this.baseUrl + "/api/Verification/GenerateCaptcha?";
        if (type === undefined || type === null) {
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        } else {
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGenerateCaptcha(_response);
        });
    }

    protected processGenerateCaptcha(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }

    /**
     * @return Success
     * @deprecated
     */
    imgNew(r: CaptchaType): Promise<void> {
        let url_ = this.baseUrl + "/api/Verification/ImgNew?";
        if (r === undefined || r === null) {
            throw new Error("The parameter 'r' must be defined and cannot be null.");
        } else {
            url_ += "r=" + encodeURIComponent("" + r) + "&";
        }
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig> {
            method: "GET",
            url: url_,
            headers: {}
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processImgNew(_response);
        });
    }

    protected processImgNew(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any> null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any> null);
    }
}

export class ActivateEmailInput implements IActivateEmailInput {
    userId: number;
    confirmationCode: string | undefined;
    /** Encrypted values for {TenantId}, {UserId} and {ConfirmationCode} */
    c: string | undefined;

    constructor(data?: IActivateEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.confirmationCode = _data["confirmationCode"];
            this.c = _data["c"];
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new ActivateEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        data["c"] = this.c;
        return data;
    }

    clone(): ActivateEmailInput {
        const json = this.toJSON();
        let result = new ActivateEmailInput();
        result.init(json);
        return result;
    }
}

export interface IActivateEmailInput {
    userId: number;
    confirmationCode: string | undefined;
    /** Encrypted values for {TenantId}, {UserId} and {ConfirmationCode} */
    c: string | undefined;
}

export class ImpersonateOutput implements IImpersonateOutput {
    impersonationToken: string | undefined;
    tenancyName: string | undefined;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.impersonationToken = _data["impersonationToken"];
            this.tenancyName = _data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data;
    }

    clone(): ImpersonateOutput {
        const json = this.toJSON();
        let result = new ImpersonateOutput();
        result.init(json);
        return result;
    }
}

export interface IImpersonateOutput {
    impersonationToken: string | undefined;
    tenancyName: string | undefined;
}

export class ImpersonateInput implements IImpersonateInput {
    tenantId: number | undefined;
    userId: number;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    }

    clone(): ImpersonateInput {
        const json = this.toJSON();
        let result = new ImpersonateInput();
        result.init(json);
        return result;
    }
}

export interface IImpersonateInput {
    tenantId: number | undefined;
    userId: number;
}

/** 验证租户名称是否可用 */
export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName: string | undefined;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data;
    }

    clone(): IsTenantAvailableInput {
        const json = this.toJSON();
        let result = new IsTenantAvailableInput();
        result.init(json);
        return result;
    }
}

/** 验证租户名称是否可用 */
export interface IIsTenantAvailableInput {
    tenancyName: string | undefined;
}

export enum TenantAvailabilityState {
    Available = <any> "Available",
    InActive = <any> "InActive",
    NotFound = <any> "NotFound",
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state: TenantAvailabilityState;
    tenantId: number | undefined;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.state = _data["state"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): IsTenantAvailableOutput {
        const json = this.toJSON();
        let result = new IsTenantAvailableOutput();
        result.init(json);
        return result;
    }
}

export interface IIsTenantAvailableOutput {
    state: TenantAvailabilityState;
    tenantId: number | undefined;
}

export class RegisterInput implements IRegisterInput {
    userName: string | undefined;
    emailAddress: string | undefined;
    password: string | undefined;
    /** 验证码 */
    verificationCode: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
            this.verificationCode = _data["verificationCode"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["verificationCode"] = this.verificationCode;
        return data;
    }

    clone(): RegisterInput {
        const json = this.toJSON();
        let result = new RegisterInput();
        result.init(json);
        return result;
    }
}

export interface IRegisterInput {
    userName: string | undefined;
    emailAddress: string | undefined;
    password: string | undefined;
    /** 验证码 */
    verificationCode: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canLogin = _data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data;
    }

    clone(): RegisterOutput {
        const json = this.toJSON();
        let result = new RegisterOutput();
        result.init(json);
        return result;
    }
}

export interface IRegisterOutput {
    canLogin: boolean;
}

/** 重置密码的Dto */
export class ResetPasswordInput implements IResetPasswordInput {
    returnUrl: string | undefined;
    singleSignIn: string | undefined;
    /** 新密码 */
    newPassword: string | undefined;
    /** 确认密码 */
    confirmPassword: string | undefined;
    /** 验证码 */
    code: string | undefined;
    /** 重置密码的code */
    resetCode: string | undefined;
    error: string | undefined;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.returnUrl = _data["returnUrl"];
            this.singleSignIn = _data["singleSignIn"];
            this.newPassword = _data["newPassword"];
            this.confirmPassword = _data["confirmPassword"];
            this.code = _data["code"];
            this.resetCode = _data["resetCode"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        data["newPassword"] = this.newPassword;
        data["confirmPassword"] = this.confirmPassword;
        data["code"] = this.code;
        data["resetCode"] = this.resetCode;
        data["error"] = this.error;
        return data;
    }

    clone(): ResetPasswordInput {
        const json = this.toJSON();
        let result = new ResetPasswordInput();
        result.init(json);
        return result;
    }
}

/** 重置密码的Dto */
export interface IResetPasswordInput {
    returnUrl: string | undefined;
    singleSignIn: string | undefined;
    /** 新密码 */
    newPassword: string | undefined;
    /** 确认密码 */
    confirmPassword: string | undefined;
    /** 验证码 */
    code: string | undefined;
    /** 重置密码的code */
    resetCode: string | undefined;
    error: string | undefined;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    canLogin: boolean;
    emailAddress: string | undefined;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canLogin = _data["canLogin"];
            this.emailAddress = _data["emailAddress"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["emailAddress"] = this.emailAddress;
        return data;
    }

    clone(): ResetPasswordOutput {
        const json = this.toJSON();
        let result = new ResetPasswordOutput();
        result.init(json);
        return result;
    }
}

export interface IResetPasswordOutput {
    canLogin: boolean;
    emailAddress: string | undefined;
}

export class ResolveTenantIdInput implements IResolveTenantIdInput {
    c: string | undefined;

    constructor(data?: IResolveTenantIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.c = _data["c"];
        }
    }

    static fromJS(data: any): ResolveTenantIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResolveTenantIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["c"] = this.c;
        return data;
    }

    clone(): ResolveTenantIdInput {
        const json = this.toJSON();
        let result = new ResolveTenantIdInput();
        result.init(json);
        return result;
    }
}

export interface IResolveTenantIdInput {
    c: string | undefined;
}

export class SendEmailActivationLinkInput implements ISendEmailActivationLinkInput {
    emailAddress: string | undefined;

    constructor(data?: ISendEmailActivationLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data;
    }

    clone(): SendEmailActivationLinkInput {
        const json = this.toJSON();
        let result = new SendEmailActivationLinkInput();
        result.init(json);
        return result;
    }
}

export interface ISendEmailActivationLinkInput {
    emailAddress: string | undefined;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    emailAddress: string | undefined;
    link: string | undefined;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.link = _data["link"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["link"] = this.link;
        return data;
    }

    clone(): SendPasswordResetCodeInput {
        const json = this.toJSON();
        let result = new SendPasswordResetCodeInput();
        result.init(json);
        return result;
    }
}

export interface ISendPasswordResetCodeInput {
    emailAddress: string | undefined;
    link: string | undefined;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    targetTenantId: number | undefined;
    targetUserId: number;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.targetTenantId = _data["targetTenantId"];
            this.targetUserId = _data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data;
    }

    clone(): SwitchToLinkedAccountInput {
        const json = this.toJSON();
        let result = new SwitchToLinkedAccountInput();
        result.init(json);
        return result;
    }
}

export interface ISwitchToLinkedAccountInput {
    targetTenantId: number | undefined;
    targetUserId: number;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    switchAccountToken: string | undefined;
    tenancyName: string | undefined;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.switchAccountToken = _data["switchAccountToken"];
            this.tenancyName = _data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data;
    }

    clone(): SwitchToLinkedAccountOutput {
        const json = this.toJSON();
        let result = new SwitchToLinkedAccountOutput();
        result.init(json);
        return result;
    }
}

export interface ISwitchToLinkedAccountOutput {
    switchAccountToken: string | undefined;
    tenancyName: string | undefined;
}

export class AddressProvincetDto implements IAddressProvincetDto {
    code: string | undefined;
    name: string | undefined;

    constructor(data?: IAddressProvincetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddressProvincetDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressProvincetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): AddressProvincetDto {
        const json = this.toJSON();
        let result = new AddressProvincetDto();
        result.init(json);
        return result;
    }
}

export interface IAddressProvincetDto {
    code: string | undefined;
    name: string | undefined;
}

export class AddressCityDto implements IAddressCityDto {
    provinceCode: string | undefined;
    code: string | undefined;
    name: string | undefined;

    constructor(data?: IAddressCityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provinceCode = _data["provinceCode"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddressCityDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressCityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provinceCode"] = this.provinceCode;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): AddressCityDto {
        const json = this.toJSON();
        let result = new AddressCityDto();
        result.init(json);
        return result;
    }
}

export interface IAddressCityDto {
    provinceCode: string | undefined;
    code: string | undefined;
    name: string | undefined;
}

export class AddressAreaDto implements IAddressAreaDto {
    cityCode: string | undefined;
    provinceCode: string | undefined;
    code: string | undefined;
    name: string | undefined;

    constructor(data?: IAddressAreaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cityCode = _data["cityCode"];
            this.provinceCode = _data["provinceCode"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddressAreaDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressAreaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityCode"] = this.cityCode;
        data["provinceCode"] = this.provinceCode;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): AddressAreaDto {
        const json = this.toJSON();
        let result = new AddressAreaDto();
        result.init(json);
        return result;
    }
}

export interface IAddressAreaDto {
    cityCode: string | undefined;
    provinceCode: string | undefined;
    code: string | undefined;
    name: string | undefined;
}

export class AddressStreetDto implements IAddressStreetDto {
    areaCode: string | undefined;
    cityCode: string | undefined;
    provinceCode: string | undefined;
    code: string | undefined;
    name: string | undefined;

    constructor(data?: IAddressStreetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaCode = _data["areaCode"];
            this.cityCode = _data["cityCode"];
            this.provinceCode = _data["provinceCode"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddressStreetDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressStreetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaCode"] = this.areaCode;
        data["cityCode"] = this.cityCode;
        data["provinceCode"] = this.provinceCode;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }

    clone(): AddressStreetDto {
        const json = this.toJSON();
        let result = new AddressStreetDto();
        result.init(json);
        return result;
    }
}

export interface IAddressStreetDto {
    areaCode: string | undefined;
    cityCode: string | undefined;
    provinceCode: string | undefined;
    code: string | undefined;
    name: string | undefined;
}

/** 所有联动数据 */
export class AllAddressLinkage implements IAllAddressLinkage {
    /** 省 */
    provinces: AddressProvincetDto[] | undefined;
    /** 市 */
    citys: AddressCityDto[] | undefined;
    /** 县 */
    areas: AddressAreaDto[] | undefined;
    /** 镇 */
    streets: AddressStreetDto[] | undefined;

    constructor(data?: IAllAddressLinkage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["provinces"])) {
                this.provinces = [] as any;
                for (let item of _data["provinces"]) {
                    this.provinces.push(AddressProvincetDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["citys"])) {
                this.citys = [] as any;
                for (let item of _data["citys"]) {
                    this.citys.push(AddressCityDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["areas"])) {
                this.areas = [] as any;
                for (let item of _data["areas"]) {
                    this.areas.push(AddressAreaDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["streets"])) {
                this.streets = [] as any;
                for (let item of _data["streets"]) {
                    this.streets.push(AddressStreetDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): AllAddressLinkage {
        data = typeof data === 'object' ? data : {};
        let result = new AllAddressLinkage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.provinces)) {
            data["provinces"] = [];
            for (let item of this.provinces) {
                data["provinces"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.citys)) {
            data["citys"] = [];
            for (let item of this.citys) {
                data["citys"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.areas)) {
            data["areas"] = [];
            for (let item of this.areas) {
                data["areas"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.streets)) {
            data["streets"] = [];
            for (let item of this.streets) {
                data["streets"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): AllAddressLinkage {
        const json = this.toJSON();
        let result = new AllAddressLinkage();
        result.init(json);
        return result;
    }
}

/** 所有联动数据 */
export interface IAllAddressLinkage {
    /** 省 */
    provinces: AddressProvincetDto[] | undefined;
    /** 市 */
    citys: AddressCityDto[] | undefined;
    /** 县 */
    areas: AddressAreaDto[] | undefined;
    /** 镇 */
    streets: AddressStreetDto[] | undefined;
}

export class GetByCodeOutput implements IGetByCodeOutput {
    provinceName: string | undefined;
    cityName: string | undefined;
    areaName: string | undefined;
    streetName: string | undefined;

    constructor(data?: IGetByCodeOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provinceName = _data["provinceName"];
            this.cityName = _data["cityName"];
            this.areaName = _data["areaName"];
            this.streetName = _data["streetName"];
        }
    }

    static fromJS(data: any): GetByCodeOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetByCodeOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provinceName"] = this.provinceName;
        data["cityName"] = this.cityName;
        data["areaName"] = this.areaName;
        data["streetName"] = this.streetName;
        return data;
    }

    clone(): GetByCodeOutput {
        const json = this.toJSON();
        let result = new GetByCodeOutput();
        result.init(json);
        return result;
    }
}

export interface IGetByCodeOutput {
    provinceName: string | undefined;
    cityName: string | undefined;
    areaName: string | undefined;
    streetName: string | undefined;
}

export enum AddressEnum {
    Provinces = <any> "Provinces",
    Cities = <any> "Cities",
    Areas = <any> "Areas",
    Streets = <any> "Streets",
}

export class FileDto implements IFileDto {
    fileName: string | undefined;
    fileType: string | undefined;
    fileToken: string | undefined;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileType = _data["fileType"];
            this.fileToken = _data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data;
    }

    clone(): FileDto {
        const json = this.toJSON();
        let result = new FileDto();
        result.init(json);
        return result;
    }
}

export interface IFileDto {
    fileName: string | undefined;
    fileType: string | undefined;
    fileToken: string | undefined;
}

export enum EntityChangeType {
    Created = <any> "Created",
    Updated = <any> "Updated",
    Deleted = <any> "Deleted",
}

export class EntityChangeListDto implements IEntityChangeListDto {
    userId: number | undefined;
    userName: string | undefined;
    changeTime: moment.Moment;
    entityTypeFullName: string | undefined;
    changeType: EntityChangeType;
    readonly changeTypeName: string | undefined;
    entityChangeSetId: number;
    id: number;

    constructor(data?: IEntityChangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.changeTime = _data["changeTime"] ? moment(_data["changeTime"].toString()) : <any> undefined;
            this.entityTypeFullName = _data["entityTypeFullName"];
            this.changeType = _data["changeType"];
            (<any> this).changeTypeName = _data["changeTypeName"];
            this.entityChangeSetId = _data["entityChangeSetId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityChangeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityChangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : <any> undefined;
        data["entityTypeFullName"] = this.entityTypeFullName;
        data["changeType"] = this.changeType;
        data["changeTypeName"] = this.changeTypeName;
        data["entityChangeSetId"] = this.entityChangeSetId;
        data["id"] = this.id;
        return data;
    }

    clone(): EntityChangeListDto {
        const json = this.toJSON();
        let result = new EntityChangeListDto();
        result.init(json);
        return result;
    }
}

export interface IEntityChangeListDto {
    userId: number | undefined;
    userName: string | undefined;
    changeTime: moment.Moment;
    entityTypeFullName: string | undefined;
    changeType: EntityChangeType;
    changeTypeName: string | undefined;
    entityChangeSetId: number;
    id: number;
}

export class PagedResultDtoOfEntityChangeListDto implements IPagedResultDtoOfEntityChangeListDto {
    totalCount: number;
    items: EntityChangeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfEntityChangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(EntityChangeListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfEntityChangeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfEntityChangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfEntityChangeListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfEntityChangeListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfEntityChangeListDto {
    totalCount: number;
    items: EntityChangeListDto[] | undefined;
}

export class NameValueDto implements INameValueDto {
    name: string | undefined;
    value: string | undefined;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }

    clone(): NameValueDto {
        const json = this.toJSON();
        let result = new NameValueDto();
        result.init(json);
        return result;
    }
}

export interface INameValueDto {
    name: string | undefined;
    value: string | undefined;
}

export class AuditLogListDto implements IAuditLogListDto {
    /** 用户Id */
    userId: number | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 模拟租户Id */
    impersonatorTenantId: number | undefined;
    /** 模拟用户Id */
    impersonatorUserId: number | undefined;
    /** 服务名称 */
    serviceName: string | undefined;
    /** 方法名称 */
    methodName: string | undefined;
    /** 参数 */
    parameters: string | undefined;
    /** 执行时间 */
    executionTime: moment.Moment;
    /** 持续时间 */
    executionDuration: number;
    /** 客户端ip地址 */
    clientIpAddress: string | undefined;
    /** 客户端 */
    clientName: string | undefined;
    /** 浏览器信息 */
    browserInfo: string | undefined;
    /** 异常 */
    exception: string | undefined;
    customData: string | undefined;
    id: number;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.impersonatorTenantId = _data["impersonatorTenantId"];
            this.impersonatorUserId = _data["impersonatorUserId"];
            this.serviceName = _data["serviceName"];
            this.methodName = _data["methodName"];
            this.parameters = _data["parameters"];
            this.executionTime = _data["executionTime"] ? moment(_data["executionTime"].toString()) : <any> undefined;
            this.executionDuration = _data["executionDuration"];
            this.clientIpAddress = _data["clientIpAddress"];
            this.clientName = _data["clientName"];
            this.browserInfo = _data["browserInfo"];
            this.exception = _data["exception"];
            this.customData = _data["customData"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any> undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data;
    }

    clone(): AuditLogListDto {
        const json = this.toJSON();
        let result = new AuditLogListDto();
        result.init(json);
        return result;
    }
}

export interface IAuditLogListDto {
    /** 用户Id */
    userId: number | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 模拟租户Id */
    impersonatorTenantId: number | undefined;
    /** 模拟用户Id */
    impersonatorUserId: number | undefined;
    /** 服务名称 */
    serviceName: string | undefined;
    /** 方法名称 */
    methodName: string | undefined;
    /** 参数 */
    parameters: string | undefined;
    /** 执行时间 */
    executionTime: moment.Moment;
    /** 持续时间 */
    executionDuration: number;
    /** 客户端ip地址 */
    clientIpAddress: string | undefined;
    /** 客户端 */
    clientName: string | undefined;
    /** 浏览器信息 */
    browserInfo: string | undefined;
    /** 异常 */
    exception: string | undefined;
    customData: string | undefined;
    id: number;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(AuditLogListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfAuditLogListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[] | undefined;
}

/** 轮播图广告的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.BannerAds.BannerAd */
export class BannerAdEditDto implements IBannerAdEditDto {
    /** Id */
    id: number | undefined;
    /** 标题 */
    title: string | undefined;
    /** 图片地址 */
    imageUrl: string | undefined;
    /** 缩略图地址 */
    thumbImgUrl: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** Url */
    url: string | undefined;
    /** 权重 */
    weight: number;
    /** Price */
    price: number;
    /** Types */
    types: string | undefined;
    /** ViewCount */
    viewCount: number;

    constructor(data?: IBannerAdEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.imageUrl = _data["imageUrl"];
            this.thumbImgUrl = _data["thumbImgUrl"];
            this.description = _data["description"];
            this.url = _data["url"];
            this.weight = _data["weight"];
            this.price = _data["price"];
            this.types = _data["types"];
            this.viewCount = _data["viewCount"];
        }
    }

    static fromJS(data: any): BannerAdEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new BannerAdEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["imageUrl"] = this.imageUrl;
        data["thumbImgUrl"] = this.thumbImgUrl;
        data["description"] = this.description;
        data["url"] = this.url;
        data["weight"] = this.weight;
        data["price"] = this.price;
        data["types"] = this.types;
        data["viewCount"] = this.viewCount;
        return data;
    }

    clone(): BannerAdEditDto {
        const json = this.toJSON();
        let result = new BannerAdEditDto();
        result.init(json);
        return result;
    }
}

/** 轮播图广告的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.BannerAds.BannerAd */
export interface IBannerAdEditDto {
    /** Id */
    id: number | undefined;
    /** 标题 */
    title: string | undefined;
    /** 图片地址 */
    imageUrl: string | undefined;
    /** 缩略图地址 */
    thumbImgUrl: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** Url */
    url: string | undefined;
    /** 权重 */
    weight: number;
    /** Price */
    price: number;
    /** Types */
    types: string | undefined;
    /** ViewCount */
    viewCount: number;
}

export class CreateOrUpdateBannerAdInput implements ICreateOrUpdateBannerAdInput {
    bannerAd: BannerAdEditDto;

    constructor(data?: ICreateOrUpdateBannerAdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.bannerAd = new BannerAdEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bannerAd = _data["bannerAd"] ? BannerAdEditDto.fromJS(_data["bannerAd"]) : new BannerAdEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateBannerAdInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateBannerAdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bannerAd"] = this.bannerAd ? this.bannerAd.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateBannerAdInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateBannerAdInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateBannerAdInput {
    bannerAd: BannerAdEditDto;
}

/** 轮播图广告的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.BannerAds.BannerAd */
export class BannerAdListDto implements IBannerAdListDto {
    /** 标题 */
    title: string | undefined;
    /** 图片地址 */
    imageUrl: string | undefined;
    /** 缩略图地址 */
    thumbImgUrl: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** Url */
    url: string | undefined;
    /** 权重 */
    weight: number;
    /** Price */
    price: number;
    /** Types */
    types: string | undefined;
    /** ViewCount */
    viewCount: number;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IBannerAdListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.imageUrl = _data["imageUrl"];
            this.thumbImgUrl = _data["thumbImgUrl"];
            this.description = _data["description"];
            this.url = _data["url"];
            this.weight = _data["weight"];
            this.price = _data["price"];
            this.types = _data["types"];
            this.viewCount = _data["viewCount"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BannerAdListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BannerAdListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["imageUrl"] = this.imageUrl;
        data["thumbImgUrl"] = this.thumbImgUrl;
        data["description"] = this.description;
        data["url"] = this.url;
        data["weight"] = this.weight;
        data["price"] = this.price;
        data["types"] = this.types;
        data["viewCount"] = this.viewCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): BannerAdListDto {
        const json = this.toJSON();
        let result = new BannerAdListDto();
        result.init(json);
        return result;
    }
}

/** 轮播图广告的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.BannerAds.BannerAd */
export interface IBannerAdListDto {
    /** 标题 */
    title: string | undefined;
    /** 图片地址 */
    imageUrl: string | undefined;
    /** 缩略图地址 */
    thumbImgUrl: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** Url */
    url: string | undefined;
    /** 权重 */
    weight: number;
    /** Price */
    price: number;
    /** Types */
    types: string | undefined;
    /** ViewCount */
    viewCount: number;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 读取可编辑轮播图广告的Dto */
export class GetBannerAdForEditOutput implements IGetBannerAdForEditOutput {
    bannerAd: BannerAdEditDto;

    constructor(data?: IGetBannerAdForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bannerAd = _data["bannerAd"] ? BannerAdEditDto.fromJS(_data["bannerAd"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetBannerAdForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBannerAdForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bannerAd"] = this.bannerAd ? this.bannerAd.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetBannerAdForEditOutput {
        const json = this.toJSON();
        let result = new GetBannerAdForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑轮播图广告的Dto */
export interface IGetBannerAdForEditOutput {
    bannerAd: BannerAdEditDto;
}

export class PagedResultDtoOfBannerAdListDto implements IPagedResultDtoOfBannerAdListDto {
    totalCount: number;
    items: BannerAdListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfBannerAdListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(BannerAdListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBannerAdListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBannerAdListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfBannerAdListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfBannerAdListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfBannerAdListDto {
    totalCount: number;
    items: BannerAdListDto[] | undefined;
}

/** 博客的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.Blogging.Blogs.Blog */
export class BlogEditDto implements IBlogEditDto {
    /** Id */
    id: string | undefined;
    /** 博客名称 */
    name: string | undefined;
    /** 博客短名称 */
    shortName: string | undefined;
    /** 博客描述 */
    description: string | undefined;

    constructor(data?: IBlogEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): BlogEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["description"] = this.description;
        return data;
    }

    clone(): BlogEditDto {
        const json = this.toJSON();
        let result = new BlogEditDto();
        result.init(json);
        return result;
    }
}

/** 博客的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.Blogging.Blogs.Blog */
export interface IBlogEditDto {
    /** Id */
    id: string | undefined;
    /** 博客名称 */
    name: string | undefined;
    /** 博客短名称 */
    shortName: string | undefined;
    /** 博客描述 */
    description: string | undefined;
}

export class CreateOrUpdateBlogInput implements ICreateOrUpdateBlogInput {
    blog: BlogEditDto;

    constructor(data?: ICreateOrUpdateBlogInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.blog = new BlogEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blog = _data["blog"] ? BlogEditDto.fromJS(_data["blog"]) : new BlogEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateBlogInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateBlogInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blog"] = this.blog ? this.blog.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateBlogInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateBlogInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateBlogInput {
    blog: BlogEditDto;
}

/** 博客的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.Blogging.Blogs.Blog */
export class BlogListDto implements IBlogListDto {
    /** 博客名称 */
    name: string | undefined;
    /** 博客短名称 */
    shortName: string | undefined;
    /** 博客描述 */
    description: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;

    constructor(data?: IBlogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.description = _data["description"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BlogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["description"] = this.description;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): BlogListDto {
        const json = this.toJSON();
        let result = new BlogListDto();
        result.init(json);
        return result;
    }
}

/** 博客的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.Blogging.Blogs.Blog */
export interface IBlogListDto {
    /** 博客名称 */
    name: string | undefined;
    /** 博客短名称 */
    shortName: string | undefined;
    /** 博客描述 */
    description: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;
}

/** 读取可编辑博客的Dto */
export class GetBlogForEditOutput implements IGetBlogForEditOutput {
    blog: BlogEditDto;

    constructor(data?: IGetBlogForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blog = _data["blog"] ? BlogEditDto.fromJS(_data["blog"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetBlogForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBlogForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blog"] = this.blog ? this.blog.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetBlogForEditOutput {
        const json = this.toJSON();
        let result = new GetBlogForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑博客的Dto */
export interface IGetBlogForEditOutput {
    blog: BlogEditDto;
}

export class PagedResultDtoOfBlogListDto implements IPagedResultDtoOfBlogListDto {
    totalCount: number;
    items: BlogListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfBlogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(BlogListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBlogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBlogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfBlogListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfBlogListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfBlogListDto {
    totalCount: number;
    items: BlogListDto[] | undefined;
}

/** 标签的编辑DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Tagging.Tag */
export class TagListDto implements ITagListDto {
    /** 博客Id */
    blogId: string;
    /** 博客名称 */
    blogName: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 标签描述 */
    description: string | undefined;
    /** 使用计数器 */
    usageCount: number;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;

    constructor(data?: ITagListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogId = _data["blogId"];
            this.blogName = _data["blogName"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.usageCount = _data["usageCount"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TagListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogId"] = this.blogId;
        data["blogName"] = this.blogName;
        data["name"] = this.name;
        data["description"] = this.description;
        data["usageCount"] = this.usageCount;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): TagListDto {
        const json = this.toJSON();
        let result = new TagListDto();
        result.init(json);
        return result;
    }
}

/** 标签的编辑DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Tagging.Tag */
export interface ITagListDto {
    /** 博客Id */
    blogId: string;
    /** 博客名称 */
    blogName: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 标签描述 */
    description: string | undefined;
    /** 使用计数器 */
    usageCount: number;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;
}

/** 友情链接的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.Blogroll */
export class BlogrollEditDto implements IBlogrollEditDto {
    /** Id */
    id: number | undefined;
    /** 友情链接分类id */
    blogrollTypeId: number;
    /** 名称 */
    name: string | undefined;
    /** Url */
    url: string | undefined;
    /** 白名单 */
    except: boolean;
    /** 推荐 */
    recommend: boolean;
    /** 权重 */
    weight: number;
    /** Logo */
    logo: string | undefined;
    /** 图标 */
    iconName: string | undefined;

    constructor(data?: IBlogrollEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.blogrollTypeId = _data["blogrollTypeId"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.except = _data["except"];
            this.recommend = _data["recommend"];
            this.weight = _data["weight"];
            this.logo = _data["logo"];
            this.iconName = _data["iconName"];
        }
    }

    static fromJS(data: any): BlogrollEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogrollEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["blogrollTypeId"] = this.blogrollTypeId;
        data["name"] = this.name;
        data["url"] = this.url;
        data["except"] = this.except;
        data["recommend"] = this.recommend;
        data["weight"] = this.weight;
        data["logo"] = this.logo;
        data["iconName"] = this.iconName;
        return data;
    }

    clone(): BlogrollEditDto {
        const json = this.toJSON();
        let result = new BlogrollEditDto();
        result.init(json);
        return result;
    }
}

/** 友情链接的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.Blogroll */
export interface IBlogrollEditDto {
    /** Id */
    id: number | undefined;
    /** 友情链接分类id */
    blogrollTypeId: number;
    /** 名称 */
    name: string | undefined;
    /** Url */
    url: string | undefined;
    /** 白名单 */
    except: boolean;
    /** 推荐 */
    recommend: boolean;
    /** 权重 */
    weight: number;
    /** Logo */
    logo: string | undefined;
    /** 图标 */
    iconName: string | undefined;
}

export class CreateOrUpdateBlogrollInput implements ICreateOrUpdateBlogrollInput {
    blogroll: BlogrollEditDto;

    constructor(data?: ICreateOrUpdateBlogrollInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.blogroll = new BlogrollEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogroll = _data["blogroll"] ? BlogrollEditDto.fromJS(_data["blogroll"]) : new BlogrollEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateBlogrollInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateBlogrollInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogroll"] = this.blogroll ? this.blogroll.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateBlogrollInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateBlogrollInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateBlogrollInput {
    blogroll: BlogrollEditDto;
}

/** 友情链接的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.Blogroll */
export class BlogrollListDto implements IBlogrollListDto {
    /** 友情链接分类id */
    blogrollTypeId: number;
    /** 名称 */
    name: string | undefined;
    /** Url */
    url: string | undefined;
    /** 白名单 */
    except: boolean;
    /** 推荐 */
    recommend: boolean;
    /** 权重 */
    weight: number;
    /** Logo */
    logo: string | undefined;
    /** 图标 */
    iconName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IBlogrollListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogrollTypeId = _data["blogrollTypeId"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.except = _data["except"];
            this.recommend = _data["recommend"];
            this.weight = _data["weight"];
            this.logo = _data["logo"];
            this.iconName = _data["iconName"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BlogrollListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogrollListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogrollTypeId"] = this.blogrollTypeId;
        data["name"] = this.name;
        data["url"] = this.url;
        data["except"] = this.except;
        data["recommend"] = this.recommend;
        data["weight"] = this.weight;
        data["logo"] = this.logo;
        data["iconName"] = this.iconName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): BlogrollListDto {
        const json = this.toJSON();
        let result = new BlogrollListDto();
        result.init(json);
        return result;
    }
}

/** 友情链接的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.Blogroll */
export interface IBlogrollListDto {
    /** 友情链接分类id */
    blogrollTypeId: number;
    /** 名称 */
    name: string | undefined;
    /** Url */
    url: string | undefined;
    /** 白名单 */
    except: boolean;
    /** 推荐 */
    recommend: boolean;
    /** 权重 */
    weight: number;
    /** Logo */
    logo: string | undefined;
    /** 图标 */
    iconName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 读取可编辑友情链接的Dto */
export class GetBlogrollForEditOutput implements IGetBlogrollForEditOutput {
    blogroll: BlogrollEditDto;

    constructor(data?: IGetBlogrollForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogroll = _data["blogroll"] ? BlogrollEditDto.fromJS(_data["blogroll"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetBlogrollForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBlogrollForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogroll"] = this.blogroll ? this.blogroll.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetBlogrollForEditOutput {
        const json = this.toJSON();
        let result = new GetBlogrollForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑友情链接的Dto */
export interface IGetBlogrollForEditOutput {
    blogroll: BlogrollEditDto;
}

export class PagedResultDtoOfBlogrollListDto implements IPagedResultDtoOfBlogrollListDto {
    totalCount: number;
    items: BlogrollListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfBlogrollListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(BlogrollListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBlogrollListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBlogrollListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfBlogrollListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfBlogrollListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfBlogrollListDto {
    totalCount: number;
    items: BlogrollListDto[] | undefined;
}

/** 友情链接分类的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.BlogrollType */
export class BlogrollTypeEditDto implements IBlogrollTypeEditDto {
    /** Id */
    id: number | undefined;
    /** 分类名称 */
    name: string | undefined;

    constructor(data?: IBlogrollTypeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BlogrollTypeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogrollTypeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): BlogrollTypeEditDto {
        const json = this.toJSON();
        let result = new BlogrollTypeEditDto();
        result.init(json);
        return result;
    }
}

/** 友情链接分类的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.BlogrollType */
export interface IBlogrollTypeEditDto {
    /** Id */
    id: number | undefined;
    /** 分类名称 */
    name: string | undefined;
}

export class CreateOrUpdateBlogrollTypeInput implements ICreateOrUpdateBlogrollTypeInput {
    blogrollType: BlogrollTypeEditDto;

    constructor(data?: ICreateOrUpdateBlogrollTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.blogrollType = new BlogrollTypeEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogrollType = _data["blogrollType"] ? BlogrollTypeEditDto.fromJS(_data["blogrollType"]) : new BlogrollTypeEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateBlogrollTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateBlogrollTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogrollType"] = this.blogrollType ? this.blogrollType.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateBlogrollTypeInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateBlogrollTypeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateBlogrollTypeInput {
    blogrollType: BlogrollTypeEditDto;
}

/** 友情链接分类的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.BlogrollType */
export class BlogrollTypeListDto implements IBlogrollTypeListDto {
    /** 分类名称 */
    name: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IBlogrollTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BlogrollTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogrollTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): BlogrollTypeListDto {
        const json = this.toJSON();
        let result = new BlogrollTypeListDto();
        result.init(json);
        return result;
    }
}

/** 友情链接分类的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Blogrolls.BlogrollType */
export interface IBlogrollTypeListDto {
    /** 分类名称 */
    name: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 读取可编辑友情链接分类的Dto */
export class GetBlogrollTypeForEditOutput implements IGetBlogrollTypeForEditOutput {
    blogrollType: BlogrollTypeEditDto;

    constructor(data?: IGetBlogrollTypeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogrollType = _data["blogrollType"] ? BlogrollTypeEditDto.fromJS(_data["blogrollType"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetBlogrollTypeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBlogrollTypeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogrollType"] = this.blogrollType ? this.blogrollType.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetBlogrollTypeForEditOutput {
        const json = this.toJSON();
        let result = new GetBlogrollTypeForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑友情链接分类的Dto */
export interface IGetBlogrollTypeForEditOutput {
    blogrollType: BlogrollTypeEditDto;
}

export class PagedResultDtoOfBlogrollTypeListDto implements IPagedResultDtoOfBlogrollTypeListDto {
    totalCount: number;
    items: BlogrollTypeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfBlogrollTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(BlogrollTypeListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBlogrollTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBlogrollTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfBlogrollTypeListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfBlogrollTypeListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfBlogrollTypeListDto {
    totalCount: number;
    items: BlogrollTypeListDto[] | undefined;
}

export enum FriendshipState {
    Accepted = <any> "Accepted",
    Blocked = <any> "Blocked",
}

export class FriendDto implements IFriendDto {
    friendUserId: number;
    friendTenantId: number | undefined;
    friendUserName: string | undefined;
    friendTenancyName: string | undefined;
    friendProfilePictureId: string | undefined;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendshipState;

    constructor(data?: IFriendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.friendUserId = _data["friendUserId"];
            this.friendTenantId = _data["friendTenantId"];
            this.friendUserName = _data["friendUserName"];
            this.friendTenancyName = _data["friendTenancyName"];
            this.friendProfilePictureId = _data["friendProfilePictureId"];
            this.unreadMessageCount = _data["unreadMessageCount"];
            this.isOnline = _data["isOnline"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): FriendDto {
        data = typeof data === 'object' ? data : {};
        let result = new FriendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendUserId"] = this.friendUserId;
        data["friendTenantId"] = this.friendTenantId;
        data["friendUserName"] = this.friendUserName;
        data["friendTenancyName"] = this.friendTenancyName;
        data["friendProfilePictureId"] = this.friendProfilePictureId;
        data["unreadMessageCount"] = this.unreadMessageCount;
        data["isOnline"] = this.isOnline;
        data["state"] = this.state;
        return data;
    }

    clone(): FriendDto {
        const json = this.toJSON();
        let result = new FriendDto();
        result.init(json);
        return result;
    }
}

export interface IFriendDto {
    friendUserId: number;
    friendTenantId: number | undefined;
    friendUserName: string | undefined;
    friendTenancyName: string | undefined;
    friendProfilePictureId: string | undefined;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendshipState;
}

export class EnumOutputDto implements IEnumOutputDto {
    name: string | undefined;
    value: string | undefined;
    description: string | undefined;

    constructor(data?: IEnumOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): EnumOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnumOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        return data;
    }

    clone(): EnumOutputDto {
        const json = this.toJSON();
        let result = new EnumOutputDto();
        result.init(json);
        return result;
    }
}

export interface IEnumOutputDto {
    name: string | undefined;
    value: string | undefined;
    description: string | undefined;
}

export class GetUserChatFriendsWithSettingsOutput implements IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[] | undefined;
    friendState: EnumOutputDto;

    constructor(data?: IGetUserChatFriendsWithSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverTime = _data["serverTime"] ? moment(_data["serverTime"].toString()) : <any> undefined;
            if (Array.isArray(_data["friends"])) {
                this.friends = [] as any;
                for (let item of _data["friends"]) {
                    this.friends.push(FriendDto.fromJS(item));
                }
            }
            this.friendState = _data["friendState"] ? EnumOutputDto.fromJS(_data["friendState"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserChatFriendsWithSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : <any> undefined;
        if (Array.isArray(this.friends)) {
            data["friends"] = [];
            for (let item of this.friends) {
                data["friends"].push(item.toJSON());
            }
        }
        data["friendState"] = this.friendState ? this.friendState.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetUserChatFriendsWithSettingsOutput {
        const json = this.toJSON();
        let result = new GetUserChatFriendsWithSettingsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[] | undefined;
    friendState: EnumOutputDto;
}

export enum ChatMessageReadState {
    Unread = <any> "Unread",
    Read = <any> "Read",
}

export class ChatMessageDto implements IChatMessageDto {
    userId: number;
    tenantId: number | undefined;
    targetUserId: number;
    targetTenantId: number | undefined;
    side: number;
    readState: ChatMessageReadState;
    receiverReadState: ChatMessageReadState;
    message: string | undefined;
    creationTime: moment.Moment;
    sharedMessageId: string | undefined;
    id: number;

    constructor(data?: IChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
            this.targetUserId = _data["targetUserId"];
            this.targetTenantId = _data["targetTenantId"];
            this.side = _data["side"];
            this.readState = _data["readState"];
            this.receiverReadState = _data["receiverReadState"];
            this.message = _data["message"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.sharedMessageId = _data["sharedMessageId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ChatMessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["targetUserId"] = this.targetUserId;
        data["targetTenantId"] = this.targetTenantId;
        data["side"] = this.side;
        data["readState"] = this.readState;
        data["receiverReadState"] = this.receiverReadState;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["sharedMessageId"] = this.sharedMessageId;
        data["id"] = this.id;
        return data;
    }

    clone(): ChatMessageDto {
        const json = this.toJSON();
        let result = new ChatMessageDto();
        result.init(json);
        return result;
    }
}

export interface IChatMessageDto {
    userId: number;
    tenantId: number | undefined;
    targetUserId: number;
    targetTenantId: number | undefined;
    side: number;
    readState: ChatMessageReadState;
    receiverReadState: ChatMessageReadState;
    message: string | undefined;
    creationTime: moment.Moment;
    sharedMessageId: string | undefined;
    id: number;
}

export class ListResultDtoOfChatMessageDto implements IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[] | undefined;

    constructor(data?: IListResultDtoOfChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(ChatMessageDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfChatMessageDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfChatMessageDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[] | undefined;
}

export class MarkAllUnreadMessagesOfUserAsReadInput implements IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number | undefined;
    userId: number;

    constructor(data?: IMarkAllUnreadMessagesOfUserAsReadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        data = typeof data === 'object' ? data : {};
        let result = new MarkAllUnreadMessagesOfUserAsReadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    }

    clone(): MarkAllUnreadMessagesOfUserAsReadInput {
        const json = this.toJSON();
        let result = new MarkAllUnreadMessagesOfUserAsReadInput();
        result.init(json);
        return result;
    }
}

export interface IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number | undefined;
    userId: number;
}

/** 评论的列表DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Comments.Comment */
export class CommentEditDto implements ICommentEditDto {
    /** Id */
    id: string | undefined;
    /** 回复评论Id */
    repliedCommentId: string | undefined;
    /** 评论内容 */
    text: string | undefined;

    constructor(data?: ICommentEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.repliedCommentId = _data["repliedCommentId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommentEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["repliedCommentId"] = this.repliedCommentId;
        data["text"] = this.text;
        return data;
    }

    clone(): CommentEditDto {
        const json = this.toJSON();
        let result = new CommentEditDto();
        result.init(json);
        return result;
    }
}

/** 评论的列表DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Comments.Comment */
export interface ICommentEditDto {
    /** Id */
    id: string | undefined;
    /** 回复评论Id */
    repliedCommentId: string | undefined;
    /** 评论内容 */
    text: string | undefined;
}

export class CreateOrUpdateCommentInput implements ICreateOrUpdateCommentInput {
    comment: CommentEditDto;

    constructor(data?: ICreateOrUpdateCommentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.comment = new CommentEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"] ? CommentEditDto.fromJS(_data["comment"]) : new CommentEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateCommentInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateCommentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment ? this.comment.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateCommentInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateCommentInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateCommentInput {
    comment: CommentEditDto;
}

/** 评论的编辑DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Comments.Comment */
export class CommentListDto implements ICommentListDto {
    /** 文章Id */
    postId: string;
    /** 回复评论Id */
    repliedCommentId: string | undefined;
    /** 评论内容 */
    text: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;

    constructor(data?: ICommentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.postId = _data["postId"];
            this.repliedCommentId = _data["repliedCommentId"];
            this.text = _data["text"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CommentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["postId"] = this.postId;
        data["repliedCommentId"] = this.repliedCommentId;
        data["text"] = this.text;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): CommentListDto {
        const json = this.toJSON();
        let result = new CommentListDto();
        result.init(json);
        return result;
    }
}

/** 评论的编辑DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Comments.Comment */
export interface ICommentListDto {
    /** 文章Id */
    postId: string;
    /** 回复评论Id */
    repliedCommentId: string | undefined;
    /** 评论内容 */
    text: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;
}

/** 读取可编辑评论的Dto */
export class GetCommentForEditOutput implements IGetCommentForEditOutput {
    comment: CommentEditDto;

    constructor(data?: IGetCommentForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"] ? CommentEditDto.fromJS(_data["comment"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetCommentForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCommentForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment ? this.comment.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetCommentForEditOutput {
        const json = this.toJSON();
        let result = new GetCommentForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑评论的Dto */
export interface IGetCommentForEditOutput {
    comment: CommentEditDto;
}

export class PagedResultDtoOfCommentListDto implements IPagedResultDtoOfCommentListDto {
    totalCount: number;
    items: CommentListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCommentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(CommentListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCommentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCommentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfCommentListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfCommentListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfCommentListDto {
    totalCount: number;
    items: CommentListDto[] | undefined;
}

export class CommonLookupFindUsersInput implements ICommonLookupFindUsersInput {
    tenantId: number | undefined;
    maxResultCount: number;
    skipCount: number;
    filterText: string | undefined;

    constructor(data?: ICommonLookupFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.filterText = _data["filterText"];
        }
    }

    static fromJS(data: any): CommonLookupFindUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new CommonLookupFindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filterText"] = this.filterText;
        return data;
    }

    clone(): CommonLookupFindUsersInput {
        const json = this.toJSON();
        let result = new CommonLookupFindUsersInput();
        result.init(json);
        return result;
    }
}

export interface ICommonLookupFindUsersInput {
    tenantId: number | undefined;
    maxResultCount: number;
    skipCount: number;
    filterText: string | undefined;
}

export class PagedResultDtoOfNameValueDto implements IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[] | undefined;

    constructor(data?: IPagedResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(NameValueDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfNameValueDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfNameValueDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[] | undefined;
}

export class GetDefaultEditionNameOutput implements IGetDefaultEditionNameOutput {
    name: string | undefined;

    constructor(data?: IGetDefaultEditionNameOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }

    clone(): GetDefaultEditionNameOutput {
        const json = this.toJSON();
        let result = new GetDefaultEditionNameOutput();
        result.init(json);
        return result;
    }
}

export interface IGetDefaultEditionNameOutput {
    name: string | undefined;
}

export class SubscribableEditionComboboxItemDto implements ISubscribableEditionComboboxItemDto {
    isFree: boolean | undefined;
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean;

    constructor(data?: ISubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isFree = _data["isFree"];
            this.value = _data["value"];
            this.displayText = _data["displayText"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): SubscribableEditionComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    }

    clone(): SubscribableEditionComboboxItemDto {
        const json = this.toJSON();
        let result = new SubscribableEditionComboboxItemDto();
        result.init(json);
        return result;
    }
}

export interface ISubscribableEditionComboboxItemDto {
    isFree: boolean | undefined;
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean;
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto implements IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[] | undefined;

    constructor(data?: IListResultDtoOfSubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(SubscribableEditionComboboxItemDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSubscribableEditionComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfSubscribableEditionComboboxItemDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[] | undefined;
}

export class ComboboxItemDtoTOfInt32 implements IComboboxItemDtoTOfInt32 {
    value: number;
    displayText: string | undefined;
    isSelected: boolean;

    constructor(data?: IComboboxItemDtoTOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.displayText = _data["displayText"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDtoTOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ComboboxItemDtoTOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    }

    clone(): ComboboxItemDtoTOfInt32 {
        const json = this.toJSON();
        let result = new ComboboxItemDtoTOfInt32();
        result.init(json);
        return result;
    }
}

export interface IComboboxItemDtoTOfInt32 {
    value: number;
    displayText: string | undefined;
    isSelected: boolean;
}

export class ListResultDtoOfComboboxItemDtoTOfInt32 implements IListResultDtoOfComboboxItemDtoTOfInt32 {
    items: ComboboxItemDtoTOfInt32[] | undefined;

    constructor(data?: IListResultDtoOfComboboxItemDtoTOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(ComboboxItemDtoTOfInt32.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfComboboxItemDtoTOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfComboboxItemDtoTOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfComboboxItemDtoTOfInt32 {
        const json = this.toJSON();
        let result = new ListResultDtoOfComboboxItemDtoTOfInt32();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfComboboxItemDtoTOfInt32 {
    items: ComboboxItemDtoTOfInt32[] | undefined;
}

export class EditionEditDto implements IEditionEditDto {
    id: number | undefined;
    displayName: string | undefined;
    monthlyPrice: number | undefined;
    annualPrice: number | undefined;
    trialDayCount: number | undefined;
    waitingDayAfterExpire: number | undefined;
    expiringEditionId: number | undefined;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.monthlyPrice = _data["monthlyPrice"];
            this.annualPrice = _data["annualPrice"];
            this.trialDayCount = _data["trialDayCount"];
            this.waitingDayAfterExpire = _data["waitingDayAfterExpire"];
            this.expiringEditionId = _data["expiringEditionId"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data;
    }

    clone(): EditionEditDto {
        const json = this.toJSON();
        let result = new EditionEditDto();
        result.init(json);
        return result;
    }
}

export interface IEditionEditDto {
    id: number | undefined;
    displayName: string | undefined;
    monthlyPrice: number | undefined;
    annualPrice: number | undefined;
    trialDayCount: number | undefined;
    waitingDayAfterExpire: number | undefined;
    expiringEditionId: number | undefined;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[] | undefined;

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.edition = new EditionEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.edition = _data["edition"] ? EditionEditDto.fromJS(_data["edition"]) : new EditionEditDto();
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"]) {
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any> undefined;
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues) {
                data["featureValues"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): CreateOrUpdateEditionDto {
        const json = this.toJSON();
        let result = new CreateOrUpdateEditionDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[] | undefined;
}

export class IValueValidator implements IIValueValidator {
    readonly name: string | undefined;
    readonly attributes: { [key: string]: any; } | undefined;

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any> this).name = _data["name"];
            if (_data["attributes"]) {
                (<any> this).attributes = {} as any;
                for (let key in _data["attributes"]) {
                    if (_data["attributes"].hasOwnProperty(key)) {
                        (<any> this).attributes[key] = _data["attributes"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        data = typeof data === 'object' ? data : {};
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key)) {
                    data["attributes"][key] = this.attributes[key];
                }
            }
        }
        return data;
    }

    clone(): IValueValidator {
        const json = this.toJSON();
        let result = new IValueValidator();
        result.init(json);
        return result;
    }
}

export interface IIValueValidator {
    name: string | undefined;
    attributes: { [key: string]: any; } | undefined;
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.displayText = _data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data;
    }

    clone(): LocalizableComboboxItemDto {
        const json = this.toJSON();
        let result = new LocalizableComboboxItemDto();
        result.init(json);
        return result;
    }
}

export interface ILocalizableComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[] | undefined;

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): LocalizableComboboxItemSourceDto {
        const json = this.toJSON();
        let result = new LocalizableComboboxItemSourceDto();
        result.init(json);
        return result;
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[] | undefined;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name: string | undefined;
    attributes: { [key: string]: any; } | undefined;
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (_data["attributes"]) {
                this.attributes = {} as any;
                for (let key in _data["attributes"]) {
                    if (_data["attributes"].hasOwnProperty(key)) {
                        this.attributes[key] = _data["attributes"][key];
                    }
                }
            }
            this.validator = _data["validator"] ? IValueValidator.fromJS(_data["validator"]) : <any> undefined;
            this.itemSource = _data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(_data["itemSource"]) : <any> undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key)) {
                    data["attributes"][key] = this.attributes[key];
                }
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any> undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any> undefined;
        return data;
    }

    clone(): FeatureInputTypeDto {
        const json = this.toJSON();
        let result = new FeatureInputTypeDto();
        result.init(json);
        return result;
    }
}

export interface IFeatureInputTypeDto {
    name: string | undefined;
    attributes: { [key: string]: any; } | undefined;
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    defaultValue: string | undefined;
    inputType: FeatureInputTypeDto;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentName = _data["parentName"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.defaultValue = _data["defaultValue"];
            this.inputType = _data["inputType"] ? FeatureInputTypeDto.fromJS(_data["inputType"]) : <any> undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any> undefined;
        return data;
    }

    clone(): FlatFeatureDto {
        const json = this.toJSON();
        let result = new FlatFeatureDto();
        result.init(json);
        return result;
    }
}

export interface IFlatFeatureDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    defaultValue: string | undefined;
    inputType: FeatureInputTypeDto;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.edition = _data["edition"] ? EditionEditDto.fromJS(_data["edition"]) : <any> undefined;
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"]) {
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"]) {
                    this.features.push(FlatFeatureDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any> undefined;
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues) {
                data["featureValues"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features) {
                data["features"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetEditionEditOutput {
        const json = this.toJSON();
        let result = new GetEditionEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;
}

export class EditionListDto implements IEditionListDto {
    name: string | undefined;
    displayName: string | undefined;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): EditionListDto {
        const json = this.toJSON();
        let result = new EditionListDto();
        result.init(json);
        return result;
    }
}

export interface IEditionListDto {
    name: string | undefined;
    displayName: string | undefined;
    creationTime: moment.Moment;
    id: number;
}

export class ListResultDtoOfEditionListDto implements IListResultDtoOfEditionListDto {
    items: EditionListDto[] | undefined;

    constructor(data?: IListResultDtoOfEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(EditionListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfEditionListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfEditionListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfEditionListDto {
    items: EditionListDto[] | undefined;
}

export class MoveTenantsToAnotherEditionDto implements IMoveTenantsToAnotherEditionDto {
    sourceEditionId: number;
    targetEditionId: number;

    constructor(data?: IMoveTenantsToAnotherEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sourceEditionId = _data["sourceEditionId"];
            this.targetEditionId = _data["targetEditionId"];
        }
    }

    static fromJS(data: any): MoveTenantsToAnotherEditionDto {
        data = typeof data === 'object' ? data : {};
        let result = new MoveTenantsToAnotherEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceEditionId"] = this.sourceEditionId;
        data["targetEditionId"] = this.targetEditionId;
        return data;
    }

    clone(): MoveTenantsToAnotherEditionDto {
        const json = this.toJSON();
        let result = new MoveTenantsToAnotherEditionDto();
        result.init(json);
        return result;
    }
}

export interface IMoveTenantsToAnotherEditionDto {
    sourceEditionId: number;
    targetEditionId: number;
}

export class AcceptFriendshipRequestInput implements IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number | undefined;

    constructor(data?: IAcceptFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        data = typeof data === 'object' ? data : {};
        let result = new AcceptFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): AcceptFriendshipRequestInput {
        const json = this.toJSON();
        let result = new AcceptFriendshipRequestInput();
        result.init(json);
        return result;
    }
}

export interface IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number | undefined;
}

export class BlockUserInput implements IBlockUserInput {
    userId: number;
    tenantId: number | undefined;

    constructor(data?: IBlockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): BlockUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new BlockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): BlockUserInput {
        const json = this.toJSON();
        let result = new BlockUserInput();
        result.init(json);
        return result;
    }
}

export interface IBlockUserInput {
    userId: number;
    tenantId: number | undefined;
}

export class CreateFriendshipRequestInput implements ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number | undefined;

    constructor(data?: ICreateFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): CreateFriendshipRequestInput {
        const json = this.toJSON();
        let result = new CreateFriendshipRequestInput();
        result.init(json);
        return result;
    }
}

export interface ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number | undefined;
}

export class CreateFriendshipRequestByUserNameInput implements ICreateFriendshipRequestByUserNameInput {
    tenancyName: string | undefined;
    userName: string | undefined;

    constructor(data?: ICreateFriendshipRequestByUserNameInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFriendshipRequestByUserNameInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userName"] = this.userName;
        return data;
    }

    clone(): CreateFriendshipRequestByUserNameInput {
        const json = this.toJSON();
        let result = new CreateFriendshipRequestByUserNameInput();
        result.init(json);
        return result;
    }
}

export interface ICreateFriendshipRequestByUserNameInput {
    tenancyName: string | undefined;
    userName: string | undefined;
}

export class UnblockUserInput implements IUnblockUserInput {
    userId: number;
    tenantId: number | undefined;

    constructor(data?: IUnblockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): UnblockUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new UnblockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data;
    }

    clone(): UnblockUserInput {
        const json = this.toJSON();
        let result = new UnblockUserInput();
        result.init(json);
        return result;
    }
}

export interface IUnblockUserInput {
    userId: number;
    tenantId: number | undefined;
}

export class IssuesClient implements IIssuesClient {

    constructor(data?: IIssuesClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IssuesClient {
        data = typeof data === 'object' ? data : {};
        let result = new IssuesClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): IssuesClient {
        const json = this.toJSON();
        let result = new IssuesClient();
        result.init(json);
        return result;
    }
}

export interface IIssuesClient {
}

export class UploadsClient implements IUploadsClient {

    constructor(data?: IUploadsClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UploadsClient {
        data = typeof data === 'object' ? data : {};
        let result = new UploadsClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): UploadsClient {
        const json = this.toJSON();
        let result = new UploadsClient();
        result.init(json);
        return result;
    }
}

export interface IUploadsClient {
}

export class MergeRequestsClient implements IMergeRequestsClient {

    constructor(data?: IMergeRequestsClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): MergeRequestsClient {
        data = typeof data === 'object' ? data : {};
        let result = new MergeRequestsClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): MergeRequestsClient {
        const json = this.toJSON();
        let result = new MergeRequestsClient();
        result.init(json);
        return result;
    }
}

export interface IMergeRequestsClient {
}

export class ProjectsClient implements IProjectsClient {

    constructor(data?: IProjectsClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ProjectsClient {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectsClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): ProjectsClient {
        const json = this.toJSON();
        let result = new ProjectsClient();
        result.init(json);
        return result;
    }
}

export interface IProjectsClient {
}

export class UsersClient implements IUsersClient {

    constructor(data?: IUsersClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UsersClient {
        data = typeof data === 'object' ? data : {};
        let result = new UsersClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): UsersClient {
        const json = this.toJSON();
        let result = new UsersClient();
        result.init(json);
        return result;
    }
}

export interface IUsersClient {
}

export class GroupsClient implements IGroupsClient {

    constructor(data?: IGroupsClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GroupsClient {
        data = typeof data === 'object' ? data : {};
        let result = new GroupsClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): GroupsClient {
        const json = this.toJSON();
        let result = new GroupsClient();
        result.init(json);
        return result;
    }
}

export interface IGroupsClient {
}

export class BranchClient implements IBranchClient {

    constructor(data?: IBranchClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BranchClient {
        data = typeof data === 'object' ? data : {};
        let result = new BranchClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): BranchClient {
        const json = this.toJSON();
        let result = new BranchClient();
        result.init(json);
        return result;
    }
}

export interface IBranchClient {
}

export class ReleaseClient implements IReleaseClient {

    constructor(data?: IReleaseClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ReleaseClient {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): ReleaseClient {
        const json = this.toJSON();
        let result = new ReleaseClient();
        result.init(json);
        return result;
    }
}

export interface IReleaseClient {
}

export class TagClient implements ITagClient {

    constructor(data?: ITagClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): TagClient {
        data = typeof data === 'object' ? data : {};
        let result = new TagClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): TagClient {
        const json = this.toJSON();
        let result = new TagClient();
        result.init(json);
        return result;
    }
}

export interface ITagClient {
}

export class WebhookClient implements IWebhookClient {

    constructor(data?: IWebhookClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): WebhookClient {
        data = typeof data === 'object' ? data : {};
        let result = new WebhookClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): WebhookClient {
        const json = this.toJSON();
        let result = new WebhookClient();
        result.init(json);
        return result;
    }
}

export interface IWebhookClient {
}

export class CommitsClient implements ICommitsClient {

    constructor(data?: ICommitsClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CommitsClient {
        data = typeof data === 'object' ? data : {};
        let result = new CommitsClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): CommitsClient {
        const json = this.toJSON();
        let result = new CommitsClient();
        result.init(json);
        return result;
    }
}

export interface ICommitsClient {
}

export class TreesClient implements ITreesClient {

    constructor(data?: ITreesClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): TreesClient {
        data = typeof data === 'object' ? data : {};
        let result = new TreesClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): TreesClient {
        const json = this.toJSON();
        let result = new TreesClient();
        result.init(json);
        return result;
    }
}

export interface ITreesClient {
}

export class FilesClient implements IFilesClient {

    constructor(data?: IFilesClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): FilesClient {
        data = typeof data === 'object' ? data : {};
        let result = new FilesClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): FilesClient {
        const json = this.toJSON();
        let result = new FilesClient();
        result.init(json);
        return result;
    }
}

export interface IFilesClient {
}

export class MarkdownClient implements IMarkdownClient {

    constructor(data?: IMarkdownClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): MarkdownClient {
        data = typeof data === 'object' ? data : {};
        let result = new MarkdownClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): MarkdownClient {
        const json = this.toJSON();
        let result = new MarkdownClient();
        result.init(json);
        return result;
    }
}

export interface IMarkdownClient {
}

export class PipelineClient implements IPipelineClient {

    constructor(data?: IPipelineClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): PipelineClient {
        data = typeof data === 'object' ? data : {};
        let result = new PipelineClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): PipelineClient {
        const json = this.toJSON();
        let result = new PipelineClient();
        result.init(json);
        return result;
    }
}

export interface IPipelineClient {
}

export class RunnersClient implements IRunnersClient {

    constructor(data?: IRunnersClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): RunnersClient {
        data = typeof data === 'object' ? data : {};
        let result = new RunnersClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): RunnersClient {
        const json = this.toJSON();
        let result = new RunnersClient();
        result.init(json);
        return result;
    }
}

export interface IRunnersClient {
}

export class ToDoListClient implements IToDoListClient {

    constructor(data?: IToDoListClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ToDoListClient {
        data = typeof data === 'object' ? data : {};
        let result = new ToDoListClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): ToDoListClient {
        const json = this.toJSON();
        let result = new ToDoListClient();
        result.init(json);
        return result;
    }
}

export interface IToDoListClient {
}

export class GitLabClient implements IGitLabClient {
    issues: IssuesClient;
    uploads: UploadsClient;
    mergeRequests: MergeRequestsClient;
    projects: ProjectsClient;
    users: UsersClient;
    groups: GroupsClient;
    branches: BranchClient;
    releases: ReleaseClient;
    tags: TagClient;
    webhooks: WebhookClient;
    commits: CommitsClient;
    trees: TreesClient;
    files: FilesClient;
    markdown: MarkdownClient;
    pipelines: PipelineClient;
    runners: RunnersClient;
    toDoList: ToDoListClient;
    readonly hostUrl: string | undefined;

    constructor(data?: IGitLabClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.issues = _data["issues"] ? IssuesClient.fromJS(_data["issues"]) : <any> undefined;
            this.uploads = _data["uploads"] ? UploadsClient.fromJS(_data["uploads"]) : <any> undefined;
            this.mergeRequests = _data["mergeRequests"] ? MergeRequestsClient.fromJS(_data["mergeRequests"]) : <any> undefined;
            this.projects = _data["projects"] ? ProjectsClient.fromJS(_data["projects"]) : <any> undefined;
            this.users = _data["users"] ? UsersClient.fromJS(_data["users"]) : <any> undefined;
            this.groups = _data["groups"] ? GroupsClient.fromJS(_data["groups"]) : <any> undefined;
            this.branches = _data["branches"] ? BranchClient.fromJS(_data["branches"]) : <any> undefined;
            this.releases = _data["releases"] ? ReleaseClient.fromJS(_data["releases"]) : <any> undefined;
            this.tags = _data["tags"] ? TagClient.fromJS(_data["tags"]) : <any> undefined;
            this.webhooks = _data["webhooks"] ? WebhookClient.fromJS(_data["webhooks"]) : <any> undefined;
            this.commits = _data["commits"] ? CommitsClient.fromJS(_data["commits"]) : <any> undefined;
            this.trees = _data["trees"] ? TreesClient.fromJS(_data["trees"]) : <any> undefined;
            this.files = _data["files"] ? FilesClient.fromJS(_data["files"]) : <any> undefined;
            this.markdown = _data["markdown"] ? MarkdownClient.fromJS(_data["markdown"]) : <any> undefined;
            this.pipelines = _data["pipelines"] ? PipelineClient.fromJS(_data["pipelines"]) : <any> undefined;
            this.runners = _data["runners"] ? RunnersClient.fromJS(_data["runners"]) : <any> undefined;
            this.toDoList = _data["toDoList"] ? ToDoListClient.fromJS(_data["toDoList"]) : <any> undefined;
            (<any> this).hostUrl = _data["hostUrl"];
        }
    }

    static fromJS(data: any): GitLabClient {
        data = typeof data === 'object' ? data : {};
        let result = new GitLabClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["issues"] = this.issues ? this.issues.toJSON() : <any> undefined;
        data["uploads"] = this.uploads ? this.uploads.toJSON() : <any> undefined;
        data["mergeRequests"] = this.mergeRequests ? this.mergeRequests.toJSON() : <any> undefined;
        data["projects"] = this.projects ? this.projects.toJSON() : <any> undefined;
        data["users"] = this.users ? this.users.toJSON() : <any> undefined;
        data["groups"] = this.groups ? this.groups.toJSON() : <any> undefined;
        data["branches"] = this.branches ? this.branches.toJSON() : <any> undefined;
        data["releases"] = this.releases ? this.releases.toJSON() : <any> undefined;
        data["tags"] = this.tags ? this.tags.toJSON() : <any> undefined;
        data["webhooks"] = this.webhooks ? this.webhooks.toJSON() : <any> undefined;
        data["commits"] = this.commits ? this.commits.toJSON() : <any> undefined;
        data["trees"] = this.trees ? this.trees.toJSON() : <any> undefined;
        data["files"] = this.files ? this.files.toJSON() : <any> undefined;
        data["markdown"] = this.markdown ? this.markdown.toJSON() : <any> undefined;
        data["pipelines"] = this.pipelines ? this.pipelines.toJSON() : <any> undefined;
        data["runners"] = this.runners ? this.runners.toJSON() : <any> undefined;
        data["toDoList"] = this.toDoList ? this.toDoList.toJSON() : <any> undefined;
        data["hostUrl"] = this.hostUrl;
        return data;
    }

    clone(): GitLabClient {
        const json = this.toJSON();
        let result = new GitLabClient();
        result.init(json);
        return result;
    }
}

export interface IGitLabClient {
    issues: IssuesClient;
    uploads: UploadsClient;
    mergeRequests: MergeRequestsClient;
    projects: ProjectsClient;
    users: UsersClient;
    groups: GroupsClient;
    branches: BranchClient;
    releases: ReleaseClient;
    tags: TagClient;
    webhooks: WebhookClient;
    commits: CommitsClient;
    trees: TreesClient;
    files: FilesClient;
    markdown: MarkdownClient;
    pipelines: PipelineClient;
    runners: RunnersClient;
    toDoList: ToDoListClient;
    hostUrl: string | undefined;
}

export class File implements IFile {
    file_name: string | undefined;
    file_path: string | undefined;
    size: number;
    encoding: string | undefined;
    content_sha256: string | undefined;
    ref: string | undefined;
    blob_id: string | undefined;
    commit_id: string | undefined;
    last_commit_id: string | undefined;
    content: string | undefined;
    readonly contentDecoded: string | undefined;

    constructor(data?: IFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file_name = _data["file_name"];
            this.file_path = _data["file_path"];
            this.size = _data["size"];
            this.encoding = _data["encoding"];
            this.content_sha256 = _data["content_sha256"];
            this.ref = _data["ref"];
            this.blob_id = _data["blob_id"];
            this.commit_id = _data["commit_id"];
            this.last_commit_id = _data["last_commit_id"];
            this.content = _data["content"];
            (<any> this).contentDecoded = _data["contentDecoded"];
        }
    }

    static fromJS(data: any): File {
        data = typeof data === 'object' ? data : {};
        let result = new File();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file_name"] = this.file_name;
        data["file_path"] = this.file_path;
        data["size"] = this.size;
        data["encoding"] = this.encoding;
        data["content_sha256"] = this.content_sha256;
        data["ref"] = this.ref;
        data["blob_id"] = this.blob_id;
        data["commit_id"] = this.commit_id;
        data["last_commit_id"] = this.last_commit_id;
        data["content"] = this.content;
        data["contentDecoded"] = this.contentDecoded;
        return data;
    }

    clone(): File {
        const json = this.toJSON();
        let result = new File();
        result.init(json);
        return result;
    }
}

export interface IFile {
    file_name: string | undefined;
    file_path: string | undefined;
    size: number;
    encoding: string | undefined;
    content_sha256: string | undefined;
    ref: string | undefined;
    blob_id: string | undefined;
    commit_id: string | undefined;
    last_commit_id: string | undefined;
    content: string | undefined;
    contentDecoded: string | undefined;
}

export class Links implements ILinks {
    members: string | undefined;
    issues: string | undefined;
    events: string | undefined;
    labels: string | undefined;
    repo_branches: string | undefined;
    merge_requests: string | undefined;
    self: string | undefined;

    constructor(data?: ILinks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.members = _data["members"];
            this.issues = _data["issues"];
            this.events = _data["events"];
            this.labels = _data["labels"];
            this.repo_branches = _data["repo_branches"];
            this.merge_requests = _data["merge_requests"];
            this.self = _data["self"];
        }
    }

    static fromJS(data: any): Links {
        data = typeof data === 'object' ? data : {};
        let result = new Links();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["members"] = this.members;
        data["issues"] = this.issues;
        data["events"] = this.events;
        data["labels"] = this.labels;
        data["repo_branches"] = this.repo_branches;
        data["merge_requests"] = this.merge_requests;
        data["self"] = this.self;
        return data;
    }

    clone(): Links {
        const json = this.toJSON();
        let result = new Links();
        result.init(json);
        return result;
    }
}

export interface ILinks {
    members: string | undefined;
    issues: string | undefined;
    events: string | undefined;
    labels: string | undefined;
    repo_branches: string | undefined;
    merge_requests: string | undefined;
    self: string | undefined;
}

export class Owner implements IOwner {
    id: number;
    created_at: moment.Moment;
    name: string | undefined;

    constructor(data?: IOwner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.created_at = _data["created_at"] ? moment(_data["created_at"].toString()) : <any> undefined;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Owner {
        data = typeof data === 'object' ? data : {};
        let result = new Owner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any> undefined;
        data["name"] = this.name;
        return data;
    }

    clone(): Owner {
        const json = this.toJSON();
        let result = new Owner();
        result.init(json);
        return result;
    }
}

export interface IOwner {
    id: number;
    created_at: moment.Moment;
    name: string | undefined;
}

export class Namespace implements INamespace {
    id: number;
    name: string | undefined;
    full_path: string | undefined;
    kind: string | undefined;
    path: string | undefined;

    constructor(data?: INamespace) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.full_path = _data["full_path"];
            this.kind = _data["kind"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): Namespace {
        data = typeof data === 'object' ? data : {};
        let result = new Namespace();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["full_path"] = this.full_path;
        data["kind"] = this.kind;
        data["path"] = this.path;
        return data;
    }

    clone(): Namespace {
        const json = this.toJSON();
        let result = new Namespace();
        result.init(json);
        return result;
    }
}

export interface INamespace {
    id: number;
    name: string | undefined;
    full_path: string | undefined;
    kind: string | undefined;
    path: string | undefined;
}

export class Access implements IAccess {
    access_level: number;
    notification_level: number;

    constructor(data?: IAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.access_level = _data["access_level"];
            this.notification_level = _data["notification_level"];
        }
    }

    static fromJS(data: any): Access {
        data = typeof data === 'object' ? data : {};
        let result = new Access();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access_level"] = this.access_level;
        data["notification_level"] = this.notification_level;
        return data;
    }

    clone(): Access {
        const json = this.toJSON();
        let result = new Access();
        result.init(json);
        return result;
    }
}

export interface IAccess {
    access_level: number;
    notification_level: number;
}

export class Permissions implements IPermissions {
    group_access: Access;
    project_access: Access;

    constructor(data?: IPermissions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.group_access = _data["group_access"] ? Access.fromJS(_data["group_access"]) : <any> undefined;
            this.project_access = _data["project_access"] ? Access.fromJS(_data["project_access"]) : <any> undefined;
        }
    }

    static fromJS(data: any): Permissions {
        data = typeof data === 'object' ? data : {};
        let result = new Permissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["group_access"] = this.group_access ? this.group_access.toJSON() : <any> undefined;
        data["project_access"] = this.project_access ? this.project_access.toJSON() : <any> undefined;
        return data;
    }

    clone(): Permissions {
        const json = this.toJSON();
        let result = new Permissions();
        result.init(json);
        return result;
    }
}

export interface IPermissions {
    group_access: Access;
    project_access: Access;
}

export class Statistics implements IStatistics {
    job_artifacts_size: number;
    repository_size: number;
    commit_count: number;
    lfs_objects_size: number;
    storage_size: number;

    constructor(data?: IStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.job_artifacts_size = _data["job_artifacts_size"];
            this.repository_size = _data["repository_size"];
            this.commit_count = _data["commit_count"];
            this.lfs_objects_size = _data["lfs_objects_size"];
            this.storage_size = _data["storage_size"];
        }
    }

    static fromJS(data: any): Statistics {
        data = typeof data === 'object' ? data : {};
        let result = new Statistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["job_artifacts_size"] = this.job_artifacts_size;
        data["repository_size"] = this.repository_size;
        data["commit_count"] = this.commit_count;
        data["lfs_objects_size"] = this.lfs_objects_size;
        data["storage_size"] = this.storage_size;
        return data;
    }

    clone(): Statistics {
        const json = this.toJSON();
        let result = new Statistics();
        result.init(json);
        return result;
    }
}

export interface IStatistics {
    job_artifacts_size: number;
    repository_size: number;
    commit_count: number;
    lfs_objects_size: number;
    storage_size: number;
}

export enum ProjectVisibilityLevel {
    Private = <any> "private",
    Internal = <any> "internal",
    Public = <any> "public",
}

export class Project implements IProject {
    last_activity_at: string | undefined;
    description: string | undefined;
    container_registry_enabled: boolean;
    archived: boolean;
    _links: Links;
    avatar_url: string | undefined;
    creator_id: number;
    created_at: string | undefined;
    default_branch: string | undefined;
    import_error: string | undefined;
    http_url_to_repo: string | undefined;
    forks_count: number;
    id: number;
    issues_enabled: boolean;
    import_status: string | undefined;
    jobs_enabled: boolean;
    owner: Owner;
    namespace: Namespace;
    name: string | undefined;
    merge_requests_enabled: boolean;
    name_with_namespace: string | undefined;
    only_allow_merge_if_pipeline_succeeds: boolean | undefined;
    only_allow_merge_if_all_discussions_are_resolved: boolean | undefined;
    open_issues_count: number;
    public_jobs: boolean;
    path_with_namespace: string | undefined;
    path: string | undefined;
    permissions: Permissions;
    runners_token: string | undefined;
    request_access_enabled: boolean;
    shared_runners_enabled: boolean;
    statistics: Statistics;
    ssh_url_to_repo: string | undefined;
    snippets_enabled: boolean;
    star_count: number;
    visibility: ProjectVisibilityLevel;
    readonly tag_list: string[] | undefined;
    web_url: string | undefined;
    wiki_enabled: boolean;

    constructor(data?: IProject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.last_activity_at = _data["last_activity_at"];
            this.description = _data["description"];
            this.container_registry_enabled = _data["container_registry_enabled"];
            this.archived = _data["archived"];
            this._links = _data["_links"] ? Links.fromJS(_data["_links"]) : <any> undefined;
            this.avatar_url = _data["avatar_url"];
            this.creator_id = _data["creator_id"];
            this.created_at = _data["created_at"];
            this.default_branch = _data["default_branch"];
            this.import_error = _data["import_error"];
            this.http_url_to_repo = _data["http_url_to_repo"];
            this.forks_count = _data["forks_count"];
            this.id = _data["id"];
            this.issues_enabled = _data["issues_enabled"];
            this.import_status = _data["import_status"];
            this.jobs_enabled = _data["jobs_enabled"];
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any> undefined;
            this.namespace = _data["namespace"] ? Namespace.fromJS(_data["namespace"]) : <any> undefined;
            this.name = _data["name"];
            this.merge_requests_enabled = _data["merge_requests_enabled"];
            this.name_with_namespace = _data["name_with_namespace"];
            this.only_allow_merge_if_pipeline_succeeds = _data["only_allow_merge_if_pipeline_succeeds"];
            this.only_allow_merge_if_all_discussions_are_resolved = _data["only_allow_merge_if_all_discussions_are_resolved"];
            this.open_issues_count = _data["open_issues_count"];
            this.public_jobs = _data["public_jobs"];
            this.path_with_namespace = _data["path_with_namespace"];
            this.path = _data["path"];
            this.permissions = _data["permissions"] ? Permissions.fromJS(_data["permissions"]) : <any> undefined;
            this.runners_token = _data["runners_token"];
            this.request_access_enabled = _data["request_access_enabled"];
            this.shared_runners_enabled = _data["shared_runners_enabled"];
            this.statistics = _data["statistics"] ? Statistics.fromJS(_data["statistics"]) : <any> undefined;
            this.ssh_url_to_repo = _data["ssh_url_to_repo"];
            this.snippets_enabled = _data["snippets_enabled"];
            this.star_count = _data["star_count"];
            this.visibility = _data["visibility"];
            if (Array.isArray(_data["tag_list"])) {
                (<any> this).tag_list = [] as any;
                for (let item of _data["tag_list"]) {
                    (<any> this).tag_list.push(item);
                }
            }
            this.web_url = _data["web_url"];
            this.wiki_enabled = _data["wiki_enabled"];
        }
    }

    static fromJS(data: any): Project {
        data = typeof data === 'object' ? data : {};
        let result = new Project();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["last_activity_at"] = this.last_activity_at;
        data["description"] = this.description;
        data["container_registry_enabled"] = this.container_registry_enabled;
        data["archived"] = this.archived;
        data["_links"] = this._links ? this._links.toJSON() : <any> undefined;
        data["avatar_url"] = this.avatar_url;
        data["creator_id"] = this.creator_id;
        data["created_at"] = this.created_at;
        data["default_branch"] = this.default_branch;
        data["import_error"] = this.import_error;
        data["http_url_to_repo"] = this.http_url_to_repo;
        data["forks_count"] = this.forks_count;
        data["id"] = this.id;
        data["issues_enabled"] = this.issues_enabled;
        data["import_status"] = this.import_status;
        data["jobs_enabled"] = this.jobs_enabled;
        data["owner"] = this.owner ? this.owner.toJSON() : <any> undefined;
        data["namespace"] = this.namespace ? this.namespace.toJSON() : <any> undefined;
        data["name"] = this.name;
        data["merge_requests_enabled"] = this.merge_requests_enabled;
        data["name_with_namespace"] = this.name_with_namespace;
        data["only_allow_merge_if_pipeline_succeeds"] = this.only_allow_merge_if_pipeline_succeeds;
        data["only_allow_merge_if_all_discussions_are_resolved"] = this.only_allow_merge_if_all_discussions_are_resolved;
        data["open_issues_count"] = this.open_issues_count;
        data["public_jobs"] = this.public_jobs;
        data["path_with_namespace"] = this.path_with_namespace;
        data["path"] = this.path;
        data["permissions"] = this.permissions ? this.permissions.toJSON() : <any> undefined;
        data["runners_token"] = this.runners_token;
        data["request_access_enabled"] = this.request_access_enabled;
        data["shared_runners_enabled"] = this.shared_runners_enabled;
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any> undefined;
        data["ssh_url_to_repo"] = this.ssh_url_to_repo;
        data["snippets_enabled"] = this.snippets_enabled;
        data["star_count"] = this.star_count;
        data["visibility"] = this.visibility;
        if (Array.isArray(this.tag_list)) {
            data["tag_list"] = [];
            for (let item of this.tag_list) {
                data["tag_list"].push(item);
            }
        }
        data["web_url"] = this.web_url;
        data["wiki_enabled"] = this.wiki_enabled;
        return data;
    }

    clone(): Project {
        const json = this.toJSON();
        let result = new Project();
        result.init(json);
        return result;
    }
}

export interface IProject {
    last_activity_at: string | undefined;
    description: string | undefined;
    container_registry_enabled: boolean;
    archived: boolean;
    _links: Links;
    avatar_url: string | undefined;
    creator_id: number;
    created_at: string | undefined;
    default_branch: string | undefined;
    import_error: string | undefined;
    http_url_to_repo: string | undefined;
    forks_count: number;
    id: number;
    issues_enabled: boolean;
    import_status: string | undefined;
    jobs_enabled: boolean;
    owner: Owner;
    namespace: Namespace;
    name: string | undefined;
    merge_requests_enabled: boolean;
    name_with_namespace: string | undefined;
    only_allow_merge_if_pipeline_succeeds: boolean | undefined;
    only_allow_merge_if_all_discussions_are_resolved: boolean | undefined;
    open_issues_count: number;
    public_jobs: boolean;
    path_with_namespace: string | undefined;
    path: string | undefined;
    permissions: Permissions;
    runners_token: string | undefined;
    request_access_enabled: boolean;
    shared_runners_enabled: boolean;
    statistics: Statistics;
    ssh_url_to_repo: string | undefined;
    snippets_enabled: boolean;
    star_count: number;
    visibility: ProjectVisibilityLevel;
    tag_list: string[] | undefined;
    web_url: string | undefined;
    wiki_enabled: boolean;
}

export class UploadPictureToBed implements IUploadPictureToBed {
    pathWithNamespace: string | undefined;
    file: File;
    directoryPath: string | undefined;

    constructor(data?: IUploadPictureToBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pathWithNamespace = _data["pathWithNamespace"];
            this.file = _data["file"] ? File.fromJS(_data["file"]) : <any> undefined;
            this.directoryPath = _data["directoryPath"];
        }
    }

    static fromJS(data: any): UploadPictureToBed {
        data = typeof data === 'object' ? data : {};
        let result = new UploadPictureToBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pathWithNamespace"] = this.pathWithNamespace;
        data["file"] = this.file ? this.file.toJSON() : <any> undefined;
        data["directoryPath"] = this.directoryPath;
        return data;
    }

    clone(): UploadPictureToBed {
        const json = this.toJSON();
        let result = new UploadPictureToBed();
        result.init(json);
        return result;
    }
}

export interface IUploadPictureToBed {
    pathWithNamespace: string | undefined;
    file: File;
    directoryPath: string | undefined;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string | undefined;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): EntityDtoOfString {
        const json = this.toJSON();
        let result = new EntityDtoOfString();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfString {
    id: string | undefined;
}

export class HostCacheDto implements IHostCacheDto {
    name: string | undefined;

    constructor(data?: IHostCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HostCacheDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }

    clone(): HostCacheDto {
        const json = this.toJSON();
        let result = new HostCacheDto();
        result.init(json);
        return result;
    }
}

export interface IHostCacheDto {
    name: string | undefined;
}

export class ListResultDtoOfHostCacheDto implements IListResultDtoOfHostCacheDto {
    items: HostCacheDto[] | undefined;

    constructor(data?: IListResultDtoOfHostCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(HostCacheDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfHostCacheDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfHostCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfHostCacheDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfHostCacheDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfHostCacheDto {
    items: HostCacheDto[] | undefined;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    /** 时区 */
    timezone: string | undefined;
    /** 这个字段只用于比较用户的时区与默认时区 */
    timezoneForComparison: string | undefined;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timezone = _data["timezone"];
            this.timezoneForComparison = _data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data;
    }

    clone(): GeneralSettingsEditDto {
        const json = this.toJSON();
        let result = new GeneralSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IGeneralSettingsEditDto {
    /** 时区 */
    timezone: string | undefined;
    /** 这个字段只用于比较用户的时区与默认时区 */
    timezoneForComparison: string | undefined;
}

export enum ValidateCodeType {
    Number = <any> "Number",
    English = <any> "English",
    NumberAndLetter = <any> "NumberAndLetter",
    Hanzi = <any> "Hanzi",
}

/** 网站全局管理设置 */
export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    /** 是否必须验证邮箱才能登陆 */
    isEmailConfirmationRequiredForLogin: boolean;
    /** 是否启用短信验证 */
    smsVerificationEnabled: boolean;
    /** 是否启用Cookie内容 */
    isCookieConsentEnabled: boolean;
    /** 宿主用户登陆使用验证码 */
    useCaptchaOnUserLogin: boolean;
    captchaOnUserLoginType: ValidateCodeType;
    /** 宿主用户登陆验证码长度 */
    captchaOnUserLoginLength: number;
    isQuickThemeSelectEnabled: boolean;
    externalLoginProviders: string[] | undefined;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEmailConfirmationRequiredForLogin = _data["isEmailConfirmationRequiredForLogin"];
            this.smsVerificationEnabled = _data["smsVerificationEnabled"];
            this.isCookieConsentEnabled = _data["isCookieConsentEnabled"];
            this.useCaptchaOnUserLogin = _data["useCaptchaOnUserLogin"];
            this.captchaOnUserLoginType = _data["captchaOnUserLoginType"];
            this.captchaOnUserLoginLength = _data["captchaOnUserLoginLength"];
            this.isQuickThemeSelectEnabled = _data["isQuickThemeSelectEnabled"];
            if (Array.isArray(_data["externalLoginProviders"])) {
                this.externalLoginProviders = [] as any;
                for (let item of _data["externalLoginProviders"]) {
                    this.externalLoginProviders.push(item);
                }
            }
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["smsVerificationEnabled"] = this.smsVerificationEnabled;
        data["isCookieConsentEnabled"] = this.isCookieConsentEnabled;
        data["useCaptchaOnUserLogin"] = this.useCaptchaOnUserLogin;
        data["captchaOnUserLoginType"] = this.captchaOnUserLoginType;
        data["captchaOnUserLoginLength"] = this.captchaOnUserLoginLength;
        data["isQuickThemeSelectEnabled"] = this.isQuickThemeSelectEnabled;
        if (Array.isArray(this.externalLoginProviders)) {
            data["externalLoginProviders"] = [];
            for (let item of this.externalLoginProviders) {
                data["externalLoginProviders"].push(item);
            }
        }
        return data;
    }

    clone(): HostUserManagementSettingsEditDto {
        const json = this.toJSON();
        let result = new HostUserManagementSettingsEditDto();
        result.init(json);
        return result;
    }
}

/** 网站全局管理设置 */
export interface IHostUserManagementSettingsEditDto {
    /** 是否必须验证邮箱才能登陆 */
    isEmailConfirmationRequiredForLogin: boolean;
    /** 是否启用短信验证 */
    smsVerificationEnabled: boolean;
    /** 是否启用Cookie内容 */
    isCookieConsentEnabled: boolean;
    /** 宿主用户登陆使用验证码 */
    useCaptchaOnUserLogin: boolean;
    captchaOnUserLoginType: ValidateCodeType;
    /** 宿主用户登陆验证码长度 */
    captchaOnUserLoginLength: number;
    isQuickThemeSelectEnabled: boolean;
    externalLoginProviders: string[] | undefined;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    /** 默认发件人邮箱地址 */
    defaultFromAddress: string | undefined;
    /** 邮箱显示名称 */
    defaultFromDisplayName: string | undefined;
    /** 发件人邮箱SMTP服务器Host */
    smtpHost: string | undefined;
    /** 发件人邮箱SMTP服务器端口 */
    smtpPort: number;
    /** 发件人校验名称 */
    smtpUserName: string | undefined;
    /** 发件人校验密码 */
    smtpPassword: string | undefined;
    /** 发件人 */
    smtpDomain: string | undefined;
    /** 使用ssl */
    smtpEnableSsl: boolean;
    /** 使用默认凭据 */
    smtpUseDefaultCredentials: boolean;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultFromAddress = _data["defaultFromAddress"];
            this.defaultFromDisplayName = _data["defaultFromDisplayName"];
            this.smtpHost = _data["smtpHost"];
            this.smtpPort = _data["smtpPort"];
            this.smtpUserName = _data["smtpUserName"];
            this.smtpPassword = _data["smtpPassword"];
            this.smtpDomain = _data["smtpDomain"];
            this.smtpEnableSsl = _data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = _data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data;
    }

    clone(): EmailSettingsEditDto {
        const json = this.toJSON();
        let result = new EmailSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IEmailSettingsEditDto {
    /** 默认发件人邮箱地址 */
    defaultFromAddress: string | undefined;
    /** 邮箱显示名称 */
    defaultFromDisplayName: string | undefined;
    /** 发件人邮箱SMTP服务器Host */
    smtpHost: string | undefined;
    /** 发件人邮箱SMTP服务器端口 */
    smtpPort: number;
    /** 发件人校验名称 */
    smtpUserName: string | undefined;
    /** 发件人校验密码 */
    smtpPassword: string | undefined;
    /** 发件人 */
    smtpDomain: string | undefined;
    /** 使用ssl */
    smtpEnableSsl: boolean;
    /** 使用默认凭据 */
    smtpUseDefaultCredentials: boolean;
}

export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    /** 允许注册 */
    allowSelfRegistration: boolean;
    /** 注册租户默认激活 */
    isNewRegisteredTenantActiveByDefault: boolean;
    /** 宿主租户注册使用验证码 */
    useCaptchaOnTenantRegistration: boolean;
    captchaOnTenantRegistrationType: ValidateCodeType;
    /** 宿主租户注册验证码长度 */
    captchaOnTenantRegistrationLength: number;
    /** 默认版本id */
    defaultEditionId: number | undefined;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.allowSelfRegistration = _data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = _data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnTenantRegistration = _data["useCaptchaOnTenantRegistration"];
            this.captchaOnTenantRegistrationType = _data["captchaOnTenantRegistrationType"];
            this.captchaOnTenantRegistrationLength = _data["captchaOnTenantRegistrationLength"];
            this.defaultEditionId = _data["defaultEditionId"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnTenantRegistration"] = this.useCaptchaOnTenantRegistration;
        data["captchaOnTenantRegistrationType"] = this.captchaOnTenantRegistrationType;
        data["captchaOnTenantRegistrationLength"] = this.captchaOnTenantRegistrationLength;
        data["defaultEditionId"] = this.defaultEditionId;
        return data;
    }

    clone(): TenantManagementSettingsEditDto {
        const json = this.toJSON();
        let result = new TenantManagementSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantManagementSettingsEditDto {
    /** 允许注册 */
    allowSelfRegistration: boolean;
    /** 注册租户默认激活 */
    isNewRegisteredTenantActiveByDefault: boolean;
    /** 宿主租户注册使用验证码 */
    useCaptchaOnTenantRegistration: boolean;
    captchaOnTenantRegistrationType: ValidateCodeType;
    /** 宿主租户注册验证码长度 */
    captchaOnTenantRegistrationLength: number;
    /** 默认版本id */
    defaultEditionId: number | undefined;
}

export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requireDigit = _data["requireDigit"];
            this.requireLowercase = _data["requireLowercase"];
            this.requireNonAlphanumeric = _data["requireNonAlphanumeric"];
            this.requireUppercase = _data["requireUppercase"];
            this.requiredLength = _data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data;
    }

    clone(): PasswordComplexitySetting {
        const json = this.toJSON();
        let result = new PasswordComplexitySetting();
        result.init(json);
        return result;
    }
}

export interface IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;
}

export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    /** 是否启用 */
    isEnabled: boolean;
    /** 登陆校验错误锁定账户最大次数 */
    maxFailedAccessAttemptsBeforeLockout: number;
    /** 默认锁定时间 */
    defaultAccountLockoutSeconds: number;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnabled = _data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = _data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = _data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data;
    }

    clone(): UserLockOutSettingsEditDto {
        const json = this.toJSON();
        let result = new UserLockOutSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IUserLockOutSettingsEditDto {
    /** 是否启用 */
    isEnabled: boolean;
    /** 登陆校验错误锁定账户最大次数 */
    maxFailedAccessAttemptsBeforeLockout: number;
    /** 默认锁定时间 */
    defaultAccountLockoutSeconds: number;
}

export class TwoFactorLoginSettingsEditDto implements ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    /** 是否启用 */
    isEnabled: boolean;
    /** 邮箱启用 */
    isEmailProviderEnabled: boolean;
    /** 短信启用 */
    isSmsProviderEnabled: boolean;
    /** 浏览器‘记住我’启用 */
    isRememberBrowserEnabled: boolean;
    /** google校验启用 */
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ITwoFactorLoginSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnabledForApplication = _data["isEnabledForApplication"];
            this.isEnabled = _data["isEnabled"];
            this.isEmailProviderEnabled = _data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = _data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = _data["isRememberBrowserEnabled"];
            this.isGoogleAuthenticatorEnabled = _data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data;
    }

    clone(): TwoFactorLoginSettingsEditDto {
        const json = this.toJSON();
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    /** 是否启用 */
    isEnabled: boolean;
    /** 邮箱启用 */
    isEmailProviderEnabled: boolean;
    /** 短信启用 */
    isSmsProviderEnabled: boolean;
    /** 浏览器‘记住我’启用 */
    isRememberBrowserEnabled: boolean;
    /** google校验启用 */
    isGoogleAuthenticatorEnabled: boolean;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    /** 使用默认密码校验设置 */
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.useDefaultPasswordComplexitySettings = _data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = _data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(_data["passwordComplexity"]) : <any> undefined;
            this.defaultPasswordComplexity = _data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(_data["defaultPasswordComplexity"]) : <any> undefined;
            this.userLockOut = _data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(_data["userLockOut"]) : <any> undefined;
            this.twoFactorLogin = _data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(_data["twoFactorLogin"]) : <any> undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any> undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any> undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any> undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any> undefined;
        return data;
    }

    clone(): SecuritySettingsEditDto {
        const json = this.toJSON();
        let result = new SecuritySettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ISecuritySettingsEditDto {
    /** 使用默认密码校验设置 */
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
}

export class HostBillingSettingsEditDto implements IHostBillingSettingsEditDto {
    legalName: string | undefined;
    address: string | undefined;

    constructor(data?: IHostBillingSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.legalName = _data["legalName"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): HostBillingSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostBillingSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        return data;
    }

    clone(): HostBillingSettingsEditDto {
        const json = this.toJSON();
        let result = new HostBillingSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IHostBillingSettingsEditDto {
    legalName: string | undefined;
    address: string | undefined;
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: HostBillingSettingsEditDto;

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.general = new GeneralSettingsEditDto();
            this.userManagement = new HostUserManagementSettingsEditDto();
            this.email = new EmailSettingsEditDto();
            this.tenantManagement = new TenantManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.general = _data["general"] ? GeneralSettingsEditDto.fromJS(_data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = _data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(_data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = _data["email"] ? EmailSettingsEditDto.fromJS(_data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = _data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(_data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = _data["security"] ? SecuritySettingsEditDto.fromJS(_data["security"]) : new SecuritySettingsEditDto();
            this.billing = _data["billing"] ? HostBillingSettingsEditDto.fromJS(_data["billing"]) : <any> undefined;
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any> undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any> undefined;
        data["email"] = this.email ? this.email.toJSON() : <any> undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any> undefined;
        data["security"] = this.security ? this.security.toJSON() : <any> undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : <any> undefined;
        return data;
    }

    clone(): HostSettingsEditDto {
        const json = this.toJSON();
        let result = new HostSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: HostBillingSettingsEditDto;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    /** 邮箱地址 */
    emailAddress: string | undefined;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data;
    }

    clone(): SendTestEmailInput {
        const json = this.toJSON();
        let result = new SendTestEmailInput();
        result.init(json);
        return result;
    }
}

export interface ISendTestEmailInput {
    /** 邮箱地址 */
    emailAddress: string | undefined;
}

export class ImportUserDto implements IImportUserDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    password: string | undefined;
    /** comma separated list */
    assignedRoleNames: string[] | undefined;
    /** Can be set when reading data from excel or when importing user */
    exception: string | undefined;

    constructor(data?: IImportUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.password = _data["password"];
            if (Array.isArray(_data["assignedRoleNames"])) {
                this.assignedRoleNames = [] as any;
                for (let item of _data["assignedRoleNames"]) {
                    this.assignedRoleNames.push(item);
                }
            }
            this.exception = _data["exception"];
        }
    }

    static fromJS(data: any): ImportUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImportUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        if (Array.isArray(this.assignedRoleNames)) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames) {
                data["assignedRoleNames"].push(item);
            }
        }
        data["exception"] = this.exception;
        return data;
    }

    clone(): ImportUserDto {
        const json = this.toJSON();
        let result = new ImportUserDto();
        result.init(json);
        return result;
    }
}

export interface IImportUserDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    password: string | undefined;
    /** comma separated list */
    assignedRoleNames: string[] | undefined;
    /** Can be set when reading data from excel or when importing user */
    exception: string | undefined;
}

export class LanguageEditDto implements ILanguageEditDto {
    id: number | undefined;
    name: string | undefined;
    icon: string | undefined;
    isEnabled: boolean;

    constructor(data?: ILanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): LanguageEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data;
    }

    clone(): LanguageEditDto {
        const json = this.toJSON();
        let result = new LanguageEditDto();
        result.init(json);
        return result;
    }
}

export interface ILanguageEditDto {
    id: number | undefined;
    name: string | undefined;
    icon: string | undefined;
    isEnabled: boolean;
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language: LanguageEditDto;

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.language = new LanguageEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"] ? LanguageEditDto.fromJS(_data["language"]) : new LanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateLanguageInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateLanguageInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: LanguageEditDto;
}

export class ComboboxItemDto implements IComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.displayText = _data["displayText"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    }

    clone(): ComboboxItemDto {
        const json = this.toJSON();
        let result = new ComboboxItemDto();
        result.init(json);
        return result;
    }
}

export interface IComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language: LanguageEditDto;
    /** 所有的语言名称 */
    languageNames: ComboboxItemDto[] | undefined;
    /** 所有的国旗 */
    flags: ComboboxItemDto[] | undefined;

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"] ? LanguageEditDto.fromJS(_data["language"]) : <any> undefined;
            if (Array.isArray(_data["languageNames"])) {
                this.languageNames = [] as any;
                for (let item of _data["languageNames"]) {
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["flags"])) {
                this.flags = [] as any;
                for (let item of _data["flags"]) {
                    this.flags.push(ComboboxItemDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any> undefined;
        if (Array.isArray(this.languageNames)) {
            data["languageNames"] = [];
            for (let item of this.languageNames) {
                data["languageNames"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.flags)) {
            data["flags"] = [];
            for (let item of this.flags) {
                data["flags"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetLanguageForEditOutput {
        const json = this.toJSON();
        let result = new GetLanguageForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetLanguageForEditOutput {
    language: LanguageEditDto;
    /** 所有的语言名称 */
    languageNames: ComboboxItemDto[] | undefined;
    /** 所有的国旗 */
    flags: ComboboxItemDto[] | undefined;
}

export class LanguageListDto implements ILanguageListDto {
    tenantId: number | undefined;
    /** 名称 */
    name: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 图标 */
    icon: string | undefined;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: ILanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.isDisabled = _data["isDisabled"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LanguageListDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): LanguageListDto {
        const json = this.toJSON();
        let result = new LanguageListDto();
        result.init(json);
        return result;
    }
}

export interface ILanguageListDto {
    tenantId: number | undefined;
    /** 名称 */
    name: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 图标 */
    icon: string | undefined;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class GetLanguagesOutput implements IGetLanguagesOutput {
    /** 默认语言名称 */
    defaultLanguageName: string | undefined;
    items: LanguageListDto[] | undefined;

    constructor(data?: IGetLanguagesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultLanguageName = _data["defaultLanguageName"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(LanguageListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguagesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetLanguagesOutput {
        const json = this.toJSON();
        let result = new GetLanguagesOutput();
        result.init(json);
        return result;
    }
}

export interface IGetLanguagesOutput {
    /** 默认语言名称 */
    defaultLanguageName: string | undefined;
    items: LanguageListDto[] | undefined;
}

export class LanguageTextListDto implements ILanguageTextListDto {
    /** 键 */
    key: string | undefined;
    /** 原始值 */
    baseValue: string | undefined;
    /** 目标值 */
    targetValue: string | undefined;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.baseValue = _data["baseValue"];
            this.targetValue = _data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data;
    }

    clone(): LanguageTextListDto {
        const json = this.toJSON();
        let result = new LanguageTextListDto();
        result.init(json);
        return result;
    }
}

export interface ILanguageTextListDto {
    /** 键 */
    key: string | undefined;
    /** 原始值 */
    baseValue: string | undefined;
    /** 目标值 */
    targetValue: string | undefined;
}

export class PagedResultDtoOfLanguageTextListDto implements IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(LanguageTextListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfLanguageTextListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[] | undefined;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name: string | undefined;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        data = typeof data === 'object' ? data : {};
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }

    clone(): SetDefaultLanguageInput {
        const json = this.toJSON();
        let result = new SetDefaultLanguageInput();
        result.init(json);
        return result;
    }
}

export interface ISetDefaultLanguageInput {
    name: string | undefined;
}

/** 更新语言输入信息 */
export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    languageName: string | undefined;
    sourceName: string | undefined;
    /** 键 */
    key: string | undefined;
    /** 值 */
    value: string | undefined;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageName = _data["languageName"];
            this.sourceName = _data["sourceName"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }

    clone(): UpdateLanguageTextInput {
        const json = this.toJSON();
        let result = new UpdateLanguageTextInput();
        result.init(json);
        return result;
    }
}

/** 更新语言输入信息 */
export interface IUpdateLanguageTextInput {
    languageName: string | undefined;
    sourceName: string | undefined;
    /** 键 */
    key: string | undefined;
    /** 值 */
    value: string | undefined;
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    displayName: string | undefined;
    description: string | undefined;
    name: string | undefined;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.isSubscribed = _data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data;
    }

    clone(): NotificationSubscriptionWithDisplayNameDto {
        const json = this.toJSON();
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(json);
        return result;
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    displayName: string | undefined;
    description: string | undefined;
    name: string | undefined;
    isSubscribed: boolean;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[] | undefined;

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.receiveNotifications = _data["receiveNotifications"];
            if (Array.isArray(_data["notifications"])) {
                this.notifications = [] as any;
                for (let item of _data["notifications"]) {
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (Array.isArray(this.notifications)) {
            data["notifications"] = [];
            for (let item of this.notifications) {
                data["notifications"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetNotificationSettingsOutput {
        const json = this.toJSON();
        let result = new GetNotificationSettingsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[] | undefined;
}

export enum UserNotificationState {
    Unread = <any> "Unread",
    Read = <any> "Read",
}

export class NotificationData implements INotificationData {
    readonly type: string | undefined;
    properties: { [key: string]: any; } | undefined;

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any> this).type = _data["type"];
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key)) {
                        this.properties[key] = _data["properties"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    data["properties"][key] = this.properties[key];
                }
            }
        }
        return data;
    }

    clone(): NotificationData {
        const json = this.toJSON();
        let result = new NotificationData();
        result.init(json);
        return result;
    }
}

export interface INotificationData {
    type: string | undefined;
    properties: { [key: string]: any; } | undefined;
}

export enum NotificationSeverity {
    Info = <any> "Info",
    Success = <any> "Success",
    Warn = <any> "Warn",
    Error = <any> "Error",
    Fatal = <any> "Fatal",
}

export class TenantNotification implements ITenantNotification {
    tenantId: number | undefined;
    notificationName: string | undefined;
    data: NotificationData;
    entityType: string | undefined;
    entityTypeName: string | undefined;
    entityId: any | undefined;
    severity: NotificationSeverity;
    creationTime: moment.Moment;
    id: string;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.notificationName = _data["notificationName"];
            this.data = _data["data"] ? NotificationData.fromJS(_data["data"]) : <any> undefined;
            this.entityType = _data["entityType"];
            this.entityTypeName = _data["entityTypeName"];
            this.entityId = _data["entityId"];
            this.severity = _data["severity"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        data = typeof data === 'object' ? data : {};
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any> undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        data["entityId"] = this.entityId;
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): TenantNotification {
        const json = this.toJSON();
        let result = new TenantNotification();
        result.init(json);
        return result;
    }
}

export interface ITenantNotification {
    tenantId: number | undefined;
    notificationName: string | undefined;
    data: NotificationData;
    entityType: string | undefined;
    entityTypeName: string | undefined;
    entityId: any | undefined;
    severity: NotificationSeverity;
    creationTime: moment.Moment;
    id: string;
}

export class UserNotification implements IUserNotification {
    tenantId: number | undefined;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.state = _data["state"];
            this.notification = _data["notification"] ? TenantNotification.fromJS(_data["notification"]) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        data = typeof data === 'object' ? data : {};
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): UserNotification {
        const json = this.toJSON();
        let result = new UserNotification();
        result.init(json);
        return result;
    }
}

export interface IUserNotification {
    tenantId: number | undefined;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    /** 未阅读消息数量 */
    unreadCount: number;
    totalCount: number;
    items: UserNotification[] | undefined;

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unreadCount = _data["unreadCount"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(UserNotification.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetNotificationsOutput {
        const json = this.toJSON();
        let result = new GetNotificationsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetNotificationsOutput {
    /** 未阅读消息数量 */
    unreadCount: number;
    totalCount: number;
    items: UserNotification[] | undefined;
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): EntityDtoOfGuid {
        const json = this.toJSON();
        let result = new EntityDtoOfGuid();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    name: string | undefined;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isSubscribed = _data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data;
    }

    clone(): NotificationSubscriptionDto {
        const json = this.toJSON();
        let result = new NotificationSubscriptionDto();
        result.init(json);
        return result;
    }
}

export interface INotificationSubscriptionDto {
    name: string | undefined;
    isSubscribed: boolean;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[] | undefined;

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.receiveNotifications = _data["receiveNotifications"];
            if (Array.isArray(_data["notifications"])) {
                this.notifications = [] as any;
                for (let item of _data["notifications"]) {
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (Array.isArray(this.notifications)) {
            data["notifications"] = [];
            for (let item of this.notifications) {
                data["notifications"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): UpdateNotificationSettingsInput {
        const json = this.toJSON();
        let result = new UpdateNotificationSettingsInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[] | undefined;
}

export class RolesToOrganizationUnitInput implements IRolesToOrganizationUnitInput {
    roleIds: number[] | undefined;
    organizationUnitId: number;

    constructor(data?: IRolesToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roleIds"])) {
                this.roleIds = [] as any;
                for (let item of _data["roleIds"]) {
                    this.roleIds.push(item);
                }
            }
            this.organizationUnitId = _data["organizationUnitId"];
        }
    }

    static fromJS(data: any): RolesToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new RolesToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roleIds)) {
            data["roleIds"] = [];
            for (let item of this.roleIds) {
                data["roleIds"].push(item);
            }
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    }

    clone(): RolesToOrganizationUnitInput {
        const json = this.toJSON();
        let result = new RolesToOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IRolesToOrganizationUnitInput {
    roleIds: number[] | undefined;
    organizationUnitId: number;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds: number[] | undefined;
    organizationUnitId: number;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"]) {
                    this.userIds.push(item);
                }
            }
            this.organizationUnitId = _data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds) {
                data["userIds"].push(item);
            }
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    }

    clone(): UsersToOrganizationUnitInput {
        const json = this.toJSON();
        let result = new UsersToOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[] | undefined;
    organizationUnitId: number;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    parentId: number | undefined;
    displayName: string | undefined;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): CreateOrganizationUnitInput {
        const json = this.toJSON();
        let result = new CreateOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrganizationUnitInput {
    parentId: number | undefined;
    displayName: string | undefined;
}

/** 组织机构列表Dto */
export class OrganizationUnitListDto implements IOrganizationUnitListDto {
    parentId: number | undefined;
    code: string | undefined;
    displayName: string | undefined;
    memberCount: number;
    roleCount: number;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IOrganizationUnitListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.code = _data["code"];
            this.displayName = _data["displayName"];
            this.memberCount = _data["memberCount"];
            this.roleCount = _data["roleCount"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["roleCount"] = this.roleCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): OrganizationUnitListDto {
        const json = this.toJSON();
        let result = new OrganizationUnitListDto();
        result.init(json);
        return result;
    }
}

/** 组织机构列表Dto */
export interface IOrganizationUnitListDto {
    parentId: number | undefined;
    code: string | undefined;
    displayName: string | undefined;
    memberCount: number;
    roleCount: number;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class FindUsersInput implements IFindUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filterText: string | undefined;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"];
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
            this.filterText = _data["filterText"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filterText"] = this.filterText;
        return data;
    }

    clone(): FindUsersInput {
        const json = this.toJSON();
        let result = new FindUsersInput();
        result.init(json);
        return result;
    }
}

export interface IFindUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filterText: string | undefined;
}

export class ListResultDtoOfOrganizationUnitListDto implements IListResultDtoOfOrganizationUnitListDto {
    items: OrganizationUnitListDto[] | undefined;

    constructor(data?: IListResultDtoOfOrganizationUnitListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(OrganizationUnitListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfOrganizationUnitListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfOrganizationUnitListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfOrganizationUnitListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfOrganizationUnitListDto {
    items: OrganizationUnitListDto[] | undefined;
}

export class OrganizationUnitRoleListDto implements IOrganizationUnitRoleListDto {
    displayName: string | undefined;
    name: string | undefined;
    addedTime: moment.Moment;
    id: number;

    constructor(data?: IOrganizationUnitRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.name = _data["name"];
            this.addedTime = _data["addedTime"] ? moment(_data["addedTime"].toString()) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["name"] = this.name;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): OrganizationUnitRoleListDto {
        const json = this.toJSON();
        let result = new OrganizationUnitRoleListDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitRoleListDto {
    displayName: string | undefined;
    name: string | undefined;
    addedTime: moment.Moment;
    id: number;
}

export class PagedResultDtoOfOrganizationUnitRoleListDto implements IPagedResultDtoOfOrganizationUnitRoleListDto {
    totalCount: number;
    items: OrganizationUnitRoleListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOrganizationUnitRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(OrganizationUnitRoleListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOrganizationUnitRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfOrganizationUnitRoleListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfOrganizationUnitRoleListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfOrganizationUnitRoleListDto {
    totalCount: number;
    items: OrganizationUnitRoleListDto[] | undefined;
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    userName: string | undefined;
    addedTime: moment.Moment;
    id: number;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.addedTime = _data["addedTime"] ? moment(_data["addedTime"].toString()) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): OrganizationUnitUserListDto {
        const json = this.toJSON();
        let result = new OrganizationUnitUserListDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitUserListDto {
    userName: string | undefined;
    addedTime: moment.Moment;
    id: number;
}

export class PagedResultDtoOfOrganizationUnitUserListDto implements IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfOrganizationUnitUserListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[] | undefined;
}

export class UserToOrganizationUnitInput implements IUserToOrganizationUnitInput {
    userId: number;
    organizationUnitId: number;

    constructor(data?: IUserToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.organizationUnitId = _data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UserToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UserToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    }

    clone(): UserToOrganizationUnitInput {
        const json = this.toJSON();
        let result = new UserToOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IUserToOrganizationUnitInput {
    userId: number;
    organizationUnitId: number;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    id: number;
    newParentId: number | undefined;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.newParentId = _data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data;
    }

    clone(): MoveOrganizationUnitInput {
        const json = this.toJSON();
        let result = new MoveOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IMoveOrganizationUnitInput {
    id: number;
    newParentId: number | undefined;
}

export class RoleToOrganizationUnitInput implements IRoleToOrganizationUnitInput {
    roleId: number;
    organizationUnitId: number;

    constructor(data?: IRoleToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.organizationUnitId = _data["organizationUnitId"];
        }
    }

    static fromJS(data: any): RoleToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new RoleToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    }

    clone(): RoleToOrganizationUnitInput {
        const json = this.toJSON();
        let result = new RoleToOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IRoleToOrganizationUnitInput {
    roleId: number;
    organizationUnitId: number;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    id: number;
    displayName: string | undefined;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): UpdateOrganizationUnitInput {
        const json = this.toJSON();
        let result = new UpdateOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateOrganizationUnitInput {
    id: number;
    displayName: string | undefined;
}

export class FlatPermissionWithLevelDto implements IFlatPermissionWithLevelDto {
    level: number;
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
            this.parentName = _data["parentName"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.isGrantedByDefault = _data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data;
    }

    clone(): FlatPermissionWithLevelDto {
        const json = this.toJSON();
        let result = new FlatPermissionWithLevelDto();
        result.init(json);
        return result;
    }
}

export interface IFlatPermissionWithLevelDto {
    level: number;
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    isGrantedByDefault: boolean;
}

export class ListResultDtoOfFlatPermissionWithLevelDto implements IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[] | undefined;

    constructor(data?: IListResultDtoOfFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfFlatPermissionWithLevelDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[] | undefined;
}

export class TreePermissionDto implements ITreePermissionDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    children: TreePermissionDto[] | undefined;
    checked: boolean;

    constructor(data?: ITreePermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentName = _data["parentName"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"]) {
                    this.children.push(TreePermissionDto.fromJS(item));
                }
            }
            this.checked = _data["checked"];
        }
    }

    static fromJS(data: any): TreePermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TreePermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children) {
                data["children"].push(item.toJSON());
            }
        }
        data["checked"] = this.checked;
        return data;
    }

    clone(): TreePermissionDto {
        const json = this.toJSON();
        let result = new TreePermissionDto();
        result.init(json);
        return result;
    }
}

export interface ITreePermissionDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    children: TreePermissionDto[] | undefined;
    checked: boolean;
}

export class ListResultDtoOfTreePermissionDto implements IListResultDtoOfTreePermissionDto {
    items: TreePermissionDto[] | undefined;

    constructor(data?: IListResultDtoOfTreePermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(TreePermissionDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTreePermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfTreePermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfTreePermissionDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfTreePermissionDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfTreePermissionDto {
    items: TreePermissionDto[] | undefined;
}

export class GitlabPostsNavInput implements IGitlabPostsNavInput {
    pathWithNamespace: string | undefined;
    filePath: string | undefined;
    fileName: string | undefined;
    readonly fullPath: string | undefined;
    sercertCode: string | undefined;

    constructor(data?: IGitlabPostsNavInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pathWithNamespace = _data["pathWithNamespace"];
            this.filePath = _data["filePath"];
            this.fileName = _data["fileName"];
            (<any> this).fullPath = _data["fullPath"];
            this.sercertCode = _data["sercertCode"];
        }
    }

    static fromJS(data: any): GitlabPostsNavInput {
        data = typeof data === 'object' ? data : {};
        let result = new GitlabPostsNavInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pathWithNamespace"] = this.pathWithNamespace;
        data["filePath"] = this.filePath;
        data["fileName"] = this.fileName;
        data["fullPath"] = this.fullPath;
        data["sercertCode"] = this.sercertCode;
        return data;
    }

    clone(): GitlabPostsNavInput {
        const json = this.toJSON();
        let result = new GitlabPostsNavInput();
        result.init(json);
        return result;
    }
}

export interface IGitlabPostsNavInput {
    pathWithNamespace: string | undefined;
    filePath: string | undefined;
    fileName: string | undefined;
    fullPath: string | undefined;
    sercertCode: string | undefined;
}

export class IHtmlContent implements IIHtmlContent {

    constructor(data?: IIHtmlContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IHtmlContent {
        data = typeof data === 'object' ? data : {};
        let result = new IHtmlContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): IHtmlContent {
        const json = this.toJSON();
        let result = new IHtmlContent();
        result.init(json);
        return result;
    }
}

export interface IIHtmlContent {
}

export enum PostType {
    Original = <any> "Original",
    Transshipment = <any> "Transshipment",
    Translate = <any> "Translate",
}

/** 文章的列表DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
export class PostEditDto implements IPostEditDto {
    /** Id */
    id: string | undefined;
    /** 博客Id */
    blogId: string;
    /** 历史内容 */
    historyContent: string | undefined;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    postType: PostType;
    /** 文章标签 */
    tagIds: string[] | undefined;

    constructor(data?: IPostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.blogId = _data["blogId"];
            this.historyContent = _data["historyContent"];
            this.url = _data["url"];
            this.coverImage = _data["coverImage"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.postType = _data["postType"];
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"]) {
                    this.tagIds.push(item);
                }
            }
        }
    }

    static fromJS(data: any): PostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["blogId"] = this.blogId;
        data["historyContent"] = this.historyContent;
        data["url"] = this.url;
        data["coverImage"] = this.coverImage;
        data["title"] = this.title;
        data["content"] = this.content;
        data["postType"] = this.postType;
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds) {
                data["tagIds"].push(item);
            }
        }
        return data;
    }

    clone(): PostEditDto {
        const json = this.toJSON();
        let result = new PostEditDto();
        result.init(json);
        return result;
    }
}

/** 文章的列表DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
export interface IPostEditDto {
    /** Id */
    id: string | undefined;
    /** 博客Id */
    blogId: string;
    /** 历史内容 */
    historyContent: string | undefined;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    postType: PostType;
    /** 文章标签 */
    tagIds: string[] | undefined;
}

export class CreateOrUpdatePostInput implements ICreateOrUpdatePostInput {
    post: PostEditDto;

    constructor(data?: ICreateOrUpdatePostInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.post = new PostEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.post = _data["post"] ? PostEditDto.fromJS(_data["post"]) : new PostEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdatePostInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdatePostInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["post"] = this.post ? this.post.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdatePostInput {
        const json = this.toJSON();
        let result = new CreateOrUpdatePostInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdatePostInput {
    post: PostEditDto;
}

export class CreatePostDto implements ICreatePostDto {
    /** 文章的列表DTO
     LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
    id: string | undefined;
    /** 博客Id */
    blogId: string;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 历史内容 */
    historyContent: string | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    postType: PostType;
    /** 文章标签 */
    newTags: string[] | undefined;

    constructor(data?: ICreatePostDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.blogId = _data["blogId"];
            this.url = _data["url"];
            this.coverImage = _data["coverImage"];
            this.historyContent = _data["historyContent"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.postType = _data["postType"];
            if (Array.isArray(_data["newTags"])) {
                this.newTags = [] as any;
                for (let item of _data["newTags"]) {
                    this.newTags.push(item);
                }
            }
        }
    }

    static fromJS(data: any): CreatePostDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["blogId"] = this.blogId;
        data["url"] = this.url;
        data["coverImage"] = this.coverImage;
        data["historyContent"] = this.historyContent;
        data["title"] = this.title;
        data["content"] = this.content;
        data["postType"] = this.postType;
        if (Array.isArray(this.newTags)) {
            data["newTags"] = [];
            for (let item of this.newTags) {
                data["newTags"].push(item);
            }
        }
        return data;
    }

    clone(): CreatePostDto {
        const json = this.toJSON();
        let result = new CreatePostDto();
        result.init(json);
        return result;
    }
}

export interface ICreatePostDto {
    /** 文章的列表DTO
     LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
    id: string | undefined;
    /** 博客Id */
    blogId: string;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 历史内容 */
    historyContent: string | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    postType: PostType;
    /** 文章标签 */
    newTags: string[] | undefined;
}

/** 文章的编辑DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
export class PostListDto implements IPostListDto {
    /** 博客Id */
    blogId: string;
    /** 标题 */
    title: string | undefined;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** 阅读数 */
    readCount: number;
    postType: PostType;
    /** 文章类型描述 */
    readonly postTypeDescirption: string | undefined;
    /** 文章标签 */
    tags: string | undefined;
    /** 博客名称 */
    blogName: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;

    constructor(data?: IPostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogId = _data["blogId"];
            this.title = _data["title"];
            this.url = _data["url"];
            this.coverImage = _data["coverImage"];
            this.content = _data["content"];
            this.readCount = _data["readCount"];
            this.postType = _data["postType"];
            (<any> this).postTypeDescirption = _data["postTypeDescirption"];
            this.tags = _data["tags"];
            this.blogName = _data["blogName"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogId"] = this.blogId;
        data["title"] = this.title;
        data["url"] = this.url;
        data["coverImage"] = this.coverImage;
        data["content"] = this.content;
        data["readCount"] = this.readCount;
        data["postType"] = this.postType;
        data["postTypeDescirption"] = this.postTypeDescirption;
        data["tags"] = this.tags;
        data["blogName"] = this.blogName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): PostListDto {
        const json = this.toJSON();
        let result = new PostListDto();
        result.init(json);
        return result;
    }
}

/** 文章的编辑DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
export interface IPostListDto {
    /** 博客Id */
    blogId: string;
    /** 标题 */
    title: string | undefined;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** 阅读数 */
    readCount: number;
    postType: PostType;
    /** 文章类型描述 */
    postTypeDescirption: string | undefined;
    /** 文章标签 */
    tags: string | undefined;
    /** 博客名称 */
    blogName: string | undefined;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;
}

export class KeyValuePairOfStringString implements IKeyValuePairOfStringString {
    readonly key: string | undefined;
    readonly value: string | undefined;

    constructor(data?: IKeyValuePairOfStringString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any> this).key = _data["key"];
            (<any> this).value = _data["value"];
        }
    }

    static fromJS(data: any): KeyValuePairOfStringString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfStringString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }

    clone(): KeyValuePairOfStringString {
        const json = this.toJSON();
        let result = new KeyValuePairOfStringString();
        result.init(json);
        return result;
    }
}

export interface IKeyValuePairOfStringString {
    key: string | undefined;
    value: string | undefined;
}

/** 读取可编辑文章的Dto */
export class GetPostForEditOutput implements IGetPostForEditOutput {
    post: PostEditDto;
    postTypeTypeEnum: KeyValuePairOfStringString[] | undefined;

    constructor(data?: IGetPostForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.post = _data["post"] ? PostEditDto.fromJS(_data["post"]) : <any> undefined;
            if (Array.isArray(_data["postTypeTypeEnum"])) {
                this.postTypeTypeEnum = [] as any;
                for (let item of _data["postTypeTypeEnum"]) {
                    this.postTypeTypeEnum.push(KeyValuePairOfStringString.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetPostForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPostForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["post"] = this.post ? this.post.toJSON() : <any> undefined;
        if (Array.isArray(this.postTypeTypeEnum)) {
            data["postTypeTypeEnum"] = [];
            for (let item of this.postTypeTypeEnum) {
                data["postTypeTypeEnum"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetPostForEditOutput {
        const json = this.toJSON();
        let result = new GetPostForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑文章的Dto */
export interface IGetPostForEditOutput {
    post: PostEditDto;
    postTypeTypeEnum: KeyValuePairOfStringString[] | undefined;
}

export class UserListRoleDto implements IUserListRoleDto {
    roleId: number;
    roleName: string | undefined;

    constructor(data?: IUserListRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): UserListRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data;
    }

    clone(): UserListRoleDto {
        const json = this.toJSON();
        let result = new UserListRoleDto();
        result.init(json);
        return result;
    }
}

export interface IUserListRoleDto {
    roleId: number;
    roleName: string | undefined;
}

/** 用户信息列表Dto LTMCompanyName.YoyoCmsTemplate.UserManagerment.Users.User */
export class UserListDto implements IUserListDto {
    userName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    /** 头像Id */
    profilePictureId: string | undefined;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[] | undefined;
    lastLoginTime: moment.Moment | undefined;
    creationTime: moment.Moment;
    isActive: boolean;
    id: number;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.profilePictureId = _data["profilePictureId"];
            this.isEmailConfirmed = _data["isEmailConfirmed"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"]) {
                    this.roles.push(UserListRoleDto.fromJS(item));
                }
            }
            this.lastLoginTime = _data["lastLoginTime"] ? moment(_data["lastLoginTime"].toString()) : <any> undefined;
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.isActive = _data["isActive"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureId"] = this.profilePictureId;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles) {
                data["roles"].push(item.toJSON());
            }
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any> undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data;
    }

    clone(): UserListDto {
        const json = this.toJSON();
        let result = new UserListDto();
        result.init(json);
        return result;
    }
}

/** 用户信息列表Dto LTMCompanyName.YoyoCmsTemplate.UserManagerment.Users.User */
export interface IUserListDto {
    userName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    /** 头像Id */
    profilePictureId: string | undefined;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[] | undefined;
    lastLoginTime: moment.Moment | undefined;
    creationTime: moment.Moment;
    isActive: boolean;
    id: number;
}

/** 文章详情的DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
export class PostDetailsDto implements IPostDetailsDto {
    /** 博客Id */
    blogId: string;
    /** 标题 */
    title: string | undefined;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** 阅读数 */
    readCount: number;
    postType: PostType;
    /** 评论总数 */
    commentCount: number;
    /** 文章标签 */
    tags: TagListDto[] | undefined;
    writer: UserListDto;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;

    constructor(data?: IPostDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogId = _data["blogId"];
            this.title = _data["title"];
            this.url = _data["url"];
            this.coverImage = _data["coverImage"];
            this.content = _data["content"];
            this.readCount = _data["readCount"];
            this.postType = _data["postType"];
            this.commentCount = _data["commentCount"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"]) {
                    this.tags.push(TagListDto.fromJS(item));
                }
            }
            this.writer = _data["writer"] ? UserListDto.fromJS(_data["writer"]) : <any> undefined;
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PostDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogId"] = this.blogId;
        data["title"] = this.title;
        data["url"] = this.url;
        data["coverImage"] = this.coverImage;
        data["content"] = this.content;
        data["readCount"] = this.readCount;
        data["postType"] = this.postType;
        data["commentCount"] = this.commentCount;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags) {
                data["tags"].push(item.toJSON());
            }
        }
        data["writer"] = this.writer ? this.writer.toJSON() : <any> undefined;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): PostDetailsDto {
        const json = this.toJSON();
        let result = new PostDetailsDto();
        result.init(json);
        return result;
    }
}

/** 文章详情的DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Posts.Post */
export interface IPostDetailsDto {
    /** 博客Id */
    blogId: string;
    /** 标题 */
    title: string | undefined;
    /** 地址 */
    url: string | undefined;
    /** 封面 */
    coverImage: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** 阅读数 */
    readCount: number;
    postType: PostType;
    /** 评论总数 */
    commentCount: number;
    /** 文章标签 */
    tags: TagListDto[] | undefined;
    writer: UserListDto;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;
}

export class ListResultDtoOfPostDetailsDto implements IListResultDtoOfPostDetailsDto {
    items: PostDetailsDto[] | undefined;

    constructor(data?: IListResultDtoOfPostDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(PostDetailsDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPostDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfPostDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfPostDetailsDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfPostDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfPostDetailsDto {
    items: PostDetailsDto[] | undefined;
}

export class PagedResultDtoOfPostListDto implements IPagedResultDtoOfPostListDto {
    totalCount: number;
    items: PostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(PostListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfPostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPostListDto {
    totalCount: number;
    items: PostListDto[] | undefined;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    languageName: string | undefined;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageName = _data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data;
    }

    clone(): ChangeUserLanguageDto {
        const json = this.toJSON();
        let result = new ChangeUserLanguageDto();
        result.init(json);
        return result;
    }
}

export interface IChangeUserLanguageDto {
    languageName: string | undefined;
}

export class ChangePasswordInput implements IChangePasswordInput {
    currentPassword: string | undefined;
    newPassword: string | undefined;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }

    clone(): ChangePasswordInput {
        const json = this.toJSON();
        let result = new ChangePasswordInput();
        result.init(json);
        return result;
    }
}

export interface IChangePasswordInput {
    currentPassword: string | undefined;
    newPassword: string | undefined;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    userName: string | undefined;
    fullName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean;
    /** 时区 */
    timezone: string | undefined;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.fullName = _data["fullName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.isPhoneNumberConfirmed = _data["isPhoneNumberConfirmed"];
            this.timezone = _data["timezone"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["timezone"] = this.timezone;
        return data;
    }

    clone(): CurrentUserProfileEditDto {
        const json = this.toJSON();
        let result = new CurrentUserProfileEditDto();
        result.init(json);
        return result;
    }
}

export interface ICurrentUserProfileEditDto {
    userName: string | undefined;
    fullName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean;
    /** 时区 */
    timezone: string | undefined;
}

export class GetProfilePictureOutput implements IGetProfilePictureOutput {
    profilePicture: string | undefined;

    constructor(data?: IGetProfilePictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.profilePicture = _data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetProfilePictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data;
    }

    clone(): GetProfilePictureOutput {
        const json = this.toJSON();
        let result = new GetProfilePictureOutput();
        result.init(json);
        return result;
    }
}

export interface IGetProfilePictureOutput {
    profilePicture: string | undefined;
}

/** 用户头像输出 */
export class GetProfilePictureOutputDto implements IGetProfilePictureOutputDto {
    profilePicture: string | undefined;

    constructor(data?: IGetProfilePictureOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.profilePicture = _data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetProfilePictureOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data;
    }

    clone(): GetProfilePictureOutputDto {
        const json = this.toJSON();
        let result = new GetProfilePictureOutputDto();
        result.init(json);
        return result;
    }
}

/** 用户头像输出 */
export interface IGetProfilePictureOutputDto {
    profilePicture: string | undefined;
}

export class UpdateProfilePictureInput implements IUpdateProfilePictureInput {
    fileToken: string | undefined;
    x: number;
    y: number;
    width: number;
    height: number;

    constructor(data?: IUpdateProfilePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileToken = _data["fileToken"];
            this.x = _data["x"];
            this.y = _data["y"];
            this.width = _data["width"];
            this.height = _data["height"];
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileToken"] = this.fileToken;
        data["x"] = this.x;
        data["y"] = this.y;
        data["width"] = this.width;
        data["height"] = this.height;
        return data;
    }

    clone(): UpdateProfilePictureInput {
        const json = this.toJSON();
        let result = new UpdateProfilePictureInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateProfilePictureInput {
    fileToken: string | undefined;
    x: number;
    y: number;
    width: number;
    height: number;
}

export class PurchasePayInput implements IPurchasePayInput {
    /** 订单编码 */
    orderCode: string | undefined;

    constructor(data?: IPurchasePayInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderCode = _data["orderCode"];
        }
    }

    static fromJS(data: any): PurchasePayInput {
        data = typeof data === 'object' ? data : {};
        let result = new PurchasePayInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderCode"] = this.orderCode;
        return data;
    }

    clone(): PurchasePayInput {
        const json = this.toJSON();
        let result = new PurchasePayInput();
        result.init(json);
        return result;
    }
}

export interface IPurchasePayInput {
    /** 订单编码 */
    orderCode: string | undefined;
}

export class RoleEditDto implements IRoleEditDto {
    id: number | undefined;
    displayName: string | undefined;
    isDefault: boolean;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.isDefault = _data["isDefault"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data;
    }

    clone(): RoleEditDto {
        const json = this.toJSON();
        let result = new RoleEditDto();
        result.init(json);
        return result;
    }
}

export interface IRoleEditDto {
    id: number | undefined;
    displayName: string | undefined;
    isDefault: boolean;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.role = new RoleEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"] ? RoleEditDto.fromJS(_data["role"]) : new RoleEditDto();
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"]) {
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any> undefined;
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames) {
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    }

    clone(): CreateOrUpdateRoleInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateRoleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[] | undefined;
}

export class RoleListDto implements IRoleListDto {
    name: string | undefined;
    displayName: string | undefined;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.isStatic = _data["isStatic"];
            this.isDefault = _data["isDefault"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): RoleListDto {
        const json = this.toJSON();
        let result = new RoleListDto();
        result.init(json);
        return result;
    }
}

export interface IRoleListDto {
    name: string | undefined;
    displayName: string | undefined;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;
}

export class ListResultDtoOfRoleListDto implements IListResultDtoOfRoleListDto {
    items: RoleListDto[] | undefined;

    constructor(data?: IListResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(RoleListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfRoleListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfRoleListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfRoleListDto {
    items: RoleListDto[] | undefined;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentName = _data["parentName"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.isGrantedByDefault = _data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data;
    }

    clone(): FlatPermissionDto {
        const json = this.toJSON();
        let result = new FlatPermissionDto();
        result.init(json);
        return result;
    }
}

export interface IFlatPermissionDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    isGrantedByDefault: boolean;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"] ? RoleEditDto.fromJS(_data["role"]) : <any> undefined;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"]) {
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"]) {
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any> undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions) {
                data["permissions"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames) {
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    }

    clone(): GetRoleForEditOutput {
        const json = this.toJSON();
        let result = new GetRoleForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;
}

export class PagedResultDtoOfRoleListDto implements IPagedResultDtoOfRoleListDto {
    totalCount: number;
    items: RoleListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(RoleListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfRoleListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfRoleListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfRoleListDto {
    totalCount: number;
    items: RoleListDto[] | undefined;
}

export class UpdateRolePermissionsInput implements IUpdateRolePermissionsInput {
    roleId: number;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IUpdateRolePermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"]) {
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    }

    static fromJS(data: any): UpdateRolePermissionsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRolePermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames) {
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    }

    clone(): UpdateRolePermissionsInput {
        const json = this.toJSON();
        let result = new UpdateRolePermissionsInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateRolePermissionsInput {
    roleId: number;
    grantedPermissionNames: string[] | undefined;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    id: number;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["id"] = this.id;
        return data;
    }

    clone(): UserLoginInfoDto {
        const json = this.toJSON();
        let result = new UserLoginInfoDto();
        result.init(json);
        return result;
    }
}

export interface IUserLoginInfoDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    id: number;
}

export class EditionInfoDto implements IEditionInfoDto {
    displayName: string | undefined;
    trialDayCount: number | undefined;
    monthlyPrice: number | undefined;
    annualPrice: number | undefined;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;

    constructor(data?: IEditionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.trialDayCount = _data["trialDayCount"];
            this.monthlyPrice = _data["monthlyPrice"];
            this.annualPrice = _data["annualPrice"];
            this.isHighestEdition = _data["isHighestEdition"];
            this.isFree = _data["isFree"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditionInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data;
    }

    clone(): EditionInfoDto {
        const json = this.toJSON();
        let result = new EditionInfoDto();
        result.init(json);
        return result;
    }
}

export interface IEditionInfoDto {
    displayName: string | undefined;
    trialDayCount: number | undefined;
    monthlyPrice: number | undefined;
    annualPrice: number | undefined;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName: string | undefined;
    name: string | undefined;
    logoId: string | undefined;
    logoFileType: string | undefined;
    customCssId: string | undefined;
    subscriptionEndDateUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    subscriptionDateString: string | undefined;
    creationTimeString: string | undefined;
    id: number;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.logoId = _data["logoId"];
            this.logoFileType = _data["logoFileType"];
            this.customCssId = _data["customCssId"];
            this.subscriptionEndDateUtc = _data["subscriptionEndDateUtc"] ? moment(_data["subscriptionEndDateUtc"].toString()) : <any> undefined;
            this.isInTrialPeriod = _data["isInTrialPeriod"];
            this.edition = _data["edition"] ? EditionInfoDto.fromJS(_data["edition"]) : <any> undefined;
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.subscriptionDateString = _data["subscriptionDateString"];
            this.creationTimeString = _data["creationTimeString"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["logoFileType"] = this.logoFileType;
        data["customCssId"] = this.customCssId;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any> undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["edition"] = this.edition ? this.edition.toJSON() : <any> undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["subscriptionDateString"] = this.subscriptionDateString;
        data["creationTimeString"] = this.creationTimeString;
        data["id"] = this.id;
        return data;
    }

    clone(): TenantLoginInfoDto {
        const json = this.toJSON();
        let result = new TenantLoginInfoDto();
        result.init(json);
        return result;
    }
}

export interface ITenantLoginInfoDto {
    tenancyName: string | undefined;
    name: string | undefined;
    logoId: string | undefined;
    logoFileType: string | undefined;
    customCssId: string | undefined;
    subscriptionEndDateUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    subscriptionDateString: string | undefined;
    creationTimeString: string | undefined;
    id: number;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment;
    features: { [key: string]: boolean; } | undefined;

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.releaseDate = _data["releaseDate"] ? moment(_data["releaseDate"].toString()) : <any> undefined;
            if (_data["features"]) {
                this.features = {} as any;
                for (let key in _data["features"]) {
                    if (_data["features"].hasOwnProperty(key)) {
                        this.features[key] = _data["features"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any> undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key)) {
                    data["features"][key] = this.features[key];
                }
            }
        }
        return data;
    }

    clone(): ApplicationInfoDto {
        const json = this.toJSON();
        let result = new ApplicationInfoDto();
        result.init(json);
        return result;
    }
}

export interface IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment;
    features: { [key: string]: boolean; } | undefined;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? UserLoginInfoDto.fromJS(_data["user"]) : <any> undefined;
            this.tenant = _data["tenant"] ? TenantLoginInfoDto.fromJS(_data["tenant"]) : <any> undefined;
            this.application = _data["application"] ? ApplicationInfoDto.fromJS(_data["application"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any> undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any> undefined;
        data["application"] = this.application ? this.application.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetCurrentLoginInformationsOutput {
        const json = this.toJSON();
        let result = new GetCurrentLoginInformationsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;
}

export enum MultiTenancySides {
    Tenant = <any> "Tenant",
    Host = <any> "Host",
}

export class AbpMultiTenancySidesConfigDto implements IAbpMultiTenancySidesConfigDto {
    host: MultiTenancySides;
    tenant: MultiTenancySides;

    constructor(data?: IAbpMultiTenancySidesConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.host = _data["host"];
            this.tenant = _data["tenant"];
        }
    }

    static fromJS(data: any): AbpMultiTenancySidesConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpMultiTenancySidesConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["host"] = this.host;
        data["tenant"] = this.tenant;
        return data;
    }

    clone(): AbpMultiTenancySidesConfigDto {
        const json = this.toJSON();
        let result = new AbpMultiTenancySidesConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpMultiTenancySidesConfigDto {
    host: MultiTenancySides;
    tenant: MultiTenancySides;
}

export class AbpMultiTenancyConfigDto implements IAbpMultiTenancyConfigDto {
    isEnabled: boolean;
    ignoreFeatureCheckForHostUsers: boolean;
    sides: AbpMultiTenancySidesConfigDto;

    constructor(data?: IAbpMultiTenancyConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnabled = _data["isEnabled"];
            this.ignoreFeatureCheckForHostUsers = _data["ignoreFeatureCheckForHostUsers"];
            this.sides = _data["sides"] ? AbpMultiTenancySidesConfigDto.fromJS(_data["sides"]) : <any> undefined;
        }
    }

    static fromJS(data: any): AbpMultiTenancyConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpMultiTenancyConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["ignoreFeatureCheckForHostUsers"] = this.ignoreFeatureCheckForHostUsers;
        data["sides"] = this.sides ? this.sides.toJSON() : <any> undefined;
        return data;
    }

    clone(): AbpMultiTenancyConfigDto {
        const json = this.toJSON();
        let result = new AbpMultiTenancyConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpMultiTenancyConfigDto {
    isEnabled: boolean;
    ignoreFeatureCheckForHostUsers: boolean;
    sides: AbpMultiTenancySidesConfigDto;
}

export class AbpUserSessionConfigDto implements IAbpUserSessionConfigDto {
    userId: number | undefined;
    tenantId: number | undefined;
    impersonatorUserId: number | undefined;
    impersonatorTenantId: number | undefined;
    multiTenancySide: MultiTenancySides;

    constructor(data?: IAbpUserSessionConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
            this.impersonatorUserId = _data["impersonatorUserId"];
            this.impersonatorTenantId = _data["impersonatorTenantId"];
            this.multiTenancySide = _data["multiTenancySide"];
        }
    }

    static fromJS(data: any): AbpUserSessionConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserSessionConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["multiTenancySide"] = this.multiTenancySide;
        return data;
    }

    clone(): AbpUserSessionConfigDto {
        const json = this.toJSON();
        let result = new AbpUserSessionConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserSessionConfigDto {
    userId: number | undefined;
    tenantId: number | undefined;
    impersonatorUserId: number | undefined;
    impersonatorTenantId: number | undefined;
    multiTenancySide: MultiTenancySides;
}

export class AbpUserCurrentCultureConfigDto implements IAbpUserCurrentCultureConfigDto {
    name: string | undefined;
    displayName: string | undefined;

    constructor(data?: IAbpUserCurrentCultureConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): AbpUserCurrentCultureConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserCurrentCultureConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    }

    clone(): AbpUserCurrentCultureConfigDto {
        const json = this.toJSON();
        let result = new AbpUserCurrentCultureConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserCurrentCultureConfigDto {
    name: string | undefined;
    displayName: string | undefined;
}

export class LanguageInfo implements ILanguageInfo {
    name: string | undefined;
    displayName: string | undefined;
    icon: string | undefined;
    isDefault: boolean;
    isDisabled: boolean;
    readonly isRightToLeft: boolean;

    constructor(data?: ILanguageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.isDefault = _data["isDefault"];
            this.isDisabled = _data["isDisabled"];
            (<any> this).isRightToLeft = _data["isRightToLeft"];
        }
    }

    static fromJS(data: any): LanguageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDefault"] = this.isDefault;
        data["isDisabled"] = this.isDisabled;
        data["isRightToLeft"] = this.isRightToLeft;
        return data;
    }

    clone(): LanguageInfo {
        const json = this.toJSON();
        let result = new LanguageInfo();
        result.init(json);
        return result;
    }
}

export interface ILanguageInfo {
    name: string | undefined;
    displayName: string | undefined;
    icon: string | undefined;
    isDefault: boolean;
    isDisabled: boolean;
    isRightToLeft: boolean;
}

export class AbpLocalizationSourceDto implements IAbpLocalizationSourceDto {
    name: string | undefined;
    type: string | undefined;

    constructor(data?: IAbpLocalizationSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): AbpLocalizationSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpLocalizationSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }

    clone(): AbpLocalizationSourceDto {
        const json = this.toJSON();
        let result = new AbpLocalizationSourceDto();
        result.init(json);
        return result;
    }
}

export interface IAbpLocalizationSourceDto {
    name: string | undefined;
    type: string | undefined;
}

export class AbpUserLocalizationConfigDto implements IAbpUserLocalizationConfigDto {
    currentCulture: AbpUserCurrentCultureConfigDto;
    languages: LanguageInfo[] | undefined;
    currentLanguage: LanguageInfo;
    sources: AbpLocalizationSourceDto[] | undefined;
    values: { [key: string]: { [key: string]: string; }; } | undefined;

    constructor(data?: IAbpUserLocalizationConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentCulture = _data["currentCulture"] ? AbpUserCurrentCultureConfigDto.fromJS(_data["currentCulture"]) : <any> undefined;
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"]) {
                    this.languages.push(LanguageInfo.fromJS(item));
                }
            }
            this.currentLanguage = _data["currentLanguage"] ? LanguageInfo.fromJS(_data["currentLanguage"]) : <any> undefined;
            if (Array.isArray(_data["sources"])) {
                this.sources = [] as any;
                for (let item of _data["sources"]) {
                    this.sources.push(AbpLocalizationSourceDto.fromJS(item));
                }
            }
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key)) {
                        this.values[key] = _data["values"][key] !== undefined ? _data["values"][key] : {};
                    }
                }
            }
        }
    }

    static fromJS(data: any): AbpUserLocalizationConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserLocalizationConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentCulture"] = this.currentCulture ? this.currentCulture.toJSON() : <any> undefined;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages) {
                data["languages"].push(item.toJSON());
            }
        }
        data["currentLanguage"] = this.currentLanguage ? this.currentLanguage.toJSON() : <any> undefined;
        if (Array.isArray(this.sources)) {
            data["sources"] = [];
            for (let item of this.sources) {
                data["sources"].push(item.toJSON());
            }
        }
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key)) {
                    data["values"][key] = this.values[key];
                }
            }
        }
        return data;
    }

    clone(): AbpUserLocalizationConfigDto {
        const json = this.toJSON();
        let result = new AbpUserLocalizationConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserLocalizationConfigDto {
    currentCulture: AbpUserCurrentCultureConfigDto;
    languages: LanguageInfo[] | undefined;
    currentLanguage: LanguageInfo;
    sources: AbpLocalizationSourceDto[] | undefined;
    values: { [key: string]: { [key: string]: string; }; } | undefined;
}

export class AbpStringValueDto implements IAbpStringValueDto {
    value: string | undefined;

    constructor(data?: IAbpStringValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): AbpStringValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpStringValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }

    clone(): AbpStringValueDto {
        const json = this.toJSON();
        let result = new AbpStringValueDto();
        result.init(json);
        return result;
    }
}

export interface IAbpStringValueDto {
    value: string | undefined;
}

export class AbpUserFeatureConfigDto implements IAbpUserFeatureConfigDto {
    allFeatures: { [key: string]: AbpStringValueDto; } | undefined;

    constructor(data?: IAbpUserFeatureConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["allFeatures"]) {
                this.allFeatures = {} as any;
                for (let key in _data["allFeatures"]) {
                    if (_data["allFeatures"].hasOwnProperty(key)) {
                        this.allFeatures[key] = _data["allFeatures"][key] ? AbpStringValueDto.fromJS(_data["allFeatures"][key]) : new AbpStringValueDto();
                    }
                }
            }
        }
    }

    static fromJS(data: any): AbpUserFeatureConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserFeatureConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures) {
            data["allFeatures"] = {};
            for (let key in this.allFeatures) {
                if (this.allFeatures.hasOwnProperty(key)) {
                    data["allFeatures"][key] = this.allFeatures[key] ? this.allFeatures[key].toJSON() : <any> undefined;
                }
            }
        }
        return data;
    }

    clone(): AbpUserFeatureConfigDto {
        const json = this.toJSON();
        let result = new AbpUserFeatureConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserFeatureConfigDto {
    allFeatures: { [key: string]: AbpStringValueDto; } | undefined;
}

export class AbpUserAuthConfigDto implements IAbpUserAuthConfigDto {
    allPermissions: { [key: string]: string; } | undefined;
    grantedPermissions: { [key: string]: string; } | undefined;

    constructor(data?: IAbpUserAuthConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["allPermissions"]) {
                this.allPermissions = {} as any;
                for (let key in _data["allPermissions"]) {
                    if (_data["allPermissions"].hasOwnProperty(key)) {
                        this.allPermissions[key] = _data["allPermissions"][key];
                    }
                }
            }
            if (_data["grantedPermissions"]) {
                this.grantedPermissions = {} as any;
                for (let key in _data["grantedPermissions"]) {
                    if (_data["grantedPermissions"].hasOwnProperty(key)) {
                        this.grantedPermissions[key] = _data["grantedPermissions"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): AbpUserAuthConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserAuthConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allPermissions) {
            data["allPermissions"] = {};
            for (let key in this.allPermissions) {
                if (this.allPermissions.hasOwnProperty(key)) {
                    data["allPermissions"][key] = this.allPermissions[key];
                }
            }
        }
        if (this.grantedPermissions) {
            data["grantedPermissions"] = {};
            for (let key in this.grantedPermissions) {
                if (this.grantedPermissions.hasOwnProperty(key)) {
                    data["grantedPermissions"][key] = this.grantedPermissions[key];
                }
            }
        }
        return data;
    }

    clone(): AbpUserAuthConfigDto {
        const json = this.toJSON();
        let result = new AbpUserAuthConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserAuthConfigDto {
    allPermissions: { [key: string]: string; } | undefined;
    grantedPermissions: { [key: string]: string; } | undefined;
}

export class UserMenuItem implements IUserMenuItem {
    name: string | undefined;
    icon: string | undefined;
    displayName: string | undefined;
    order: number;
    url: string | undefined;
    customData: any | undefined;
    target: string | undefined;
    isEnabled: boolean;
    isVisible: boolean;
    items: UserMenuItem[] | undefined;

    constructor(data?: IUserMenuItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.displayName = _data["displayName"];
            this.order = _data["order"];
            this.url = _data["url"];
            this.customData = _data["customData"];
            this.target = _data["target"];
            this.isEnabled = _data["isEnabled"];
            this.isVisible = _data["isVisible"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(UserMenuItem.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): UserMenuItem {
        data = typeof data === 'object' ? data : {};
        let result = new UserMenuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["displayName"] = this.displayName;
        data["order"] = this.order;
        data["url"] = this.url;
        data["customData"] = this.customData;
        data["target"] = this.target;
        data["isEnabled"] = this.isEnabled;
        data["isVisible"] = this.isVisible;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): UserMenuItem {
        const json = this.toJSON();
        let result = new UserMenuItem();
        result.init(json);
        return result;
    }
}

export interface IUserMenuItem {
    name: string | undefined;
    icon: string | undefined;
    displayName: string | undefined;
    order: number;
    url: string | undefined;
    customData: any | undefined;
    target: string | undefined;
    isEnabled: boolean;
    isVisible: boolean;
    items: UserMenuItem[] | undefined;
}

export class UserMenu implements IUserMenu {
    name: string | undefined;
    displayName: string | undefined;
    customData: any | undefined;
    items: UserMenuItem[] | undefined;

    constructor(data?: IUserMenu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.customData = _data["customData"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(UserMenuItem.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): UserMenu {
        data = typeof data === 'object' ? data : {};
        let result = new UserMenu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["customData"] = this.customData;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): UserMenu {
        const json = this.toJSON();
        let result = new UserMenu();
        result.init(json);
        return result;
    }
}

export interface IUserMenu {
    name: string | undefined;
    displayName: string | undefined;
    customData: any | undefined;
    items: UserMenuItem[] | undefined;
}

export class AbpUserNavConfigDto implements IAbpUserNavConfigDto {
    menus: { [key: string]: UserMenu; } | undefined;

    constructor(data?: IAbpUserNavConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["menus"]) {
                this.menus = {} as any;
                for (let key in _data["menus"]) {
                    if (_data["menus"].hasOwnProperty(key)) {
                        this.menus[key] = _data["menus"][key] ? UserMenu.fromJS(_data["menus"][key]) : new UserMenu();
                    }
                }
            }
        }
    }

    static fromJS(data: any): AbpUserNavConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserNavConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.menus) {
            data["menus"] = {};
            for (let key in this.menus) {
                if (this.menus.hasOwnProperty(key)) {
                    data["menus"][key] = this.menus[key] ? this.menus[key].toJSON() : <any> undefined;
                }
            }
        }
        return data;
    }

    clone(): AbpUserNavConfigDto {
        const json = this.toJSON();
        let result = new AbpUserNavConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserNavConfigDto {
    menus: { [key: string]: UserMenu; } | undefined;
}

export class AbpUserSettingConfigDto implements IAbpUserSettingConfigDto {
    values: { [key: string]: string; } | undefined;

    constructor(data?: IAbpUserSettingConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key)) {
                        this.values[key] = _data["values"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): AbpUserSettingConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserSettingConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key)) {
                    data["values"][key] = this.values[key];
                }
            }
        }
        return data;
    }

    clone(): AbpUserSettingConfigDto {
        const json = this.toJSON();
        let result = new AbpUserSettingConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserSettingConfigDto {
    values: { [key: string]: string; } | undefined;
}

export class AbpUserClockConfigDto implements IAbpUserClockConfigDto {
    provider: string | undefined;

    constructor(data?: IAbpUserClockConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): AbpUserClockConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserClockConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        return data;
    }

    clone(): AbpUserClockConfigDto {
        const json = this.toJSON();
        let result = new AbpUserClockConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserClockConfigDto {
    provider: string | undefined;
}

export class AbpUserWindowsTimeZoneConfigDto implements IAbpUserWindowsTimeZoneConfigDto {
    timeZoneId: string | undefined;
    baseUtcOffsetInMilliseconds: number;
    currentUtcOffsetInMilliseconds: number;
    isDaylightSavingTimeNow: boolean;

    constructor(data?: IAbpUserWindowsTimeZoneConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeZoneId = _data["timeZoneId"];
            this.baseUtcOffsetInMilliseconds = _data["baseUtcOffsetInMilliseconds"];
            this.currentUtcOffsetInMilliseconds = _data["currentUtcOffsetInMilliseconds"];
            this.isDaylightSavingTimeNow = _data["isDaylightSavingTimeNow"];
        }
    }

    static fromJS(data: any): AbpUserWindowsTimeZoneConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserWindowsTimeZoneConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId;
        data["baseUtcOffsetInMilliseconds"] = this.baseUtcOffsetInMilliseconds;
        data["currentUtcOffsetInMilliseconds"] = this.currentUtcOffsetInMilliseconds;
        data["isDaylightSavingTimeNow"] = this.isDaylightSavingTimeNow;
        return data;
    }

    clone(): AbpUserWindowsTimeZoneConfigDto {
        const json = this.toJSON();
        let result = new AbpUserWindowsTimeZoneConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserWindowsTimeZoneConfigDto {
    timeZoneId: string | undefined;
    baseUtcOffsetInMilliseconds: number;
    currentUtcOffsetInMilliseconds: number;
    isDaylightSavingTimeNow: boolean;
}

export class AbpUserIanaTimeZoneConfigDto implements IAbpUserIanaTimeZoneConfigDto {
    timeZoneId: string | undefined;

    constructor(data?: IAbpUserIanaTimeZoneConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeZoneId = _data["timeZoneId"];
        }
    }

    static fromJS(data: any): AbpUserIanaTimeZoneConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserIanaTimeZoneConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId;
        return data;
    }

    clone(): AbpUserIanaTimeZoneConfigDto {
        const json = this.toJSON();
        let result = new AbpUserIanaTimeZoneConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserIanaTimeZoneConfigDto {
    timeZoneId: string | undefined;
}

export class AbpUserTimeZoneConfigDto implements IAbpUserTimeZoneConfigDto {
    windows: AbpUserWindowsTimeZoneConfigDto;
    iana: AbpUserIanaTimeZoneConfigDto;

    constructor(data?: IAbpUserTimeZoneConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.windows = _data["windows"] ? AbpUserWindowsTimeZoneConfigDto.fromJS(_data["windows"]) : <any> undefined;
            this.iana = _data["iana"] ? AbpUserIanaTimeZoneConfigDto.fromJS(_data["iana"]) : <any> undefined;
        }
    }

    static fromJS(data: any): AbpUserTimeZoneConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserTimeZoneConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["windows"] = this.windows ? this.windows.toJSON() : <any> undefined;
        data["iana"] = this.iana ? this.iana.toJSON() : <any> undefined;
        return data;
    }

    clone(): AbpUserTimeZoneConfigDto {
        const json = this.toJSON();
        let result = new AbpUserTimeZoneConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserTimeZoneConfigDto {
    windows: AbpUserWindowsTimeZoneConfigDto;
    iana: AbpUserIanaTimeZoneConfigDto;
}

export class AbpUserTimingConfigDto implements IAbpUserTimingConfigDto {
    timeZoneInfo: AbpUserTimeZoneConfigDto;

    constructor(data?: IAbpUserTimingConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeZoneInfo = _data["timeZoneInfo"] ? AbpUserTimeZoneConfigDto.fromJS(_data["timeZoneInfo"]) : <any> undefined;
        }
    }

    static fromJS(data: any): AbpUserTimingConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserTimingConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneInfo"] = this.timeZoneInfo ? this.timeZoneInfo.toJSON() : <any> undefined;
        return data;
    }

    clone(): AbpUserTimingConfigDto {
        const json = this.toJSON();
        let result = new AbpUserTimingConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserTimingConfigDto {
    timeZoneInfo: AbpUserTimeZoneConfigDto;
}

export class AbpUserAntiForgeryConfigDto implements IAbpUserAntiForgeryConfigDto {
    tokenCookieName: string | undefined;
    tokenHeaderName: string | undefined;

    constructor(data?: IAbpUserAntiForgeryConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tokenCookieName = _data["tokenCookieName"];
            this.tokenHeaderName = _data["tokenHeaderName"];
        }
    }

    static fromJS(data: any): AbpUserAntiForgeryConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserAntiForgeryConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenCookieName"] = this.tokenCookieName;
        data["tokenHeaderName"] = this.tokenHeaderName;
        return data;
    }

    clone(): AbpUserAntiForgeryConfigDto {
        const json = this.toJSON();
        let result = new AbpUserAntiForgeryConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserAntiForgeryConfigDto {
    tokenCookieName: string | undefined;
    tokenHeaderName: string | undefined;
}

export class AbpUserSecurityConfigDto implements IAbpUserSecurityConfigDto {
    antiForgery: AbpUserAntiForgeryConfigDto;

    constructor(data?: IAbpUserSecurityConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.antiForgery = _data["antiForgery"] ? AbpUserAntiForgeryConfigDto.fromJS(_data["antiForgery"]) : <any> undefined;
        }
    }

    static fromJS(data: any): AbpUserSecurityConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserSecurityConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["antiForgery"] = this.antiForgery ? this.antiForgery.toJSON() : <any> undefined;
        return data;
    }

    clone(): AbpUserSecurityConfigDto {
        const json = this.toJSON();
        let result = new AbpUserSecurityConfigDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserSecurityConfigDto {
    antiForgery: AbpUserAntiForgeryConfigDto;
}

export class AbpUserConfigurationDto implements IAbpUserConfigurationDto {
    multiTenancy: AbpMultiTenancyConfigDto;
    session: AbpUserSessionConfigDto;
    localization: AbpUserLocalizationConfigDto;
    features: AbpUserFeatureConfigDto;
    auth: AbpUserAuthConfigDto;
    nav: AbpUserNavConfigDto;
    setting: AbpUserSettingConfigDto;
    clock: AbpUserClockConfigDto;
    timing: AbpUserTimingConfigDto;
    security: AbpUserSecurityConfigDto;
    custom: { [key: string]: any; } | undefined;

    constructor(data?: IAbpUserConfigurationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.multiTenancy = _data["multiTenancy"] ? AbpMultiTenancyConfigDto.fromJS(_data["multiTenancy"]) : <any> undefined;
            this.session = _data["session"] ? AbpUserSessionConfigDto.fromJS(_data["session"]) : <any> undefined;
            this.localization = _data["localization"] ? AbpUserLocalizationConfigDto.fromJS(_data["localization"]) : <any> undefined;
            this.features = _data["features"] ? AbpUserFeatureConfigDto.fromJS(_data["features"]) : <any> undefined;
            this.auth = _data["auth"] ? AbpUserAuthConfigDto.fromJS(_data["auth"]) : <any> undefined;
            this.nav = _data["nav"] ? AbpUserNavConfigDto.fromJS(_data["nav"]) : <any> undefined;
            this.setting = _data["setting"] ? AbpUserSettingConfigDto.fromJS(_data["setting"]) : <any> undefined;
            this.clock = _data["clock"] ? AbpUserClockConfigDto.fromJS(_data["clock"]) : <any> undefined;
            this.timing = _data["timing"] ? AbpUserTimingConfigDto.fromJS(_data["timing"]) : <any> undefined;
            this.security = _data["security"] ? AbpUserSecurityConfigDto.fromJS(_data["security"]) : <any> undefined;
            if (_data["custom"]) {
                this.custom = {} as any;
                for (let key in _data["custom"]) {
                    if (_data["custom"].hasOwnProperty(key)) {
                        this.custom[key] = _data["custom"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): AbpUserConfigurationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbpUserConfigurationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["multiTenancy"] = this.multiTenancy ? this.multiTenancy.toJSON() : <any> undefined;
        data["session"] = this.session ? this.session.toJSON() : <any> undefined;
        data["localization"] = this.localization ? this.localization.toJSON() : <any> undefined;
        data["features"] = this.features ? this.features.toJSON() : <any> undefined;
        data["auth"] = this.auth ? this.auth.toJSON() : <any> undefined;
        data["nav"] = this.nav ? this.nav.toJSON() : <any> undefined;
        data["setting"] = this.setting ? this.setting.toJSON() : <any> undefined;
        data["clock"] = this.clock ? this.clock.toJSON() : <any> undefined;
        data["timing"] = this.timing ? this.timing.toJSON() : <any> undefined;
        data["security"] = this.security ? this.security.toJSON() : <any> undefined;
        if (this.custom) {
            data["custom"] = {};
            for (let key in this.custom) {
                if (this.custom.hasOwnProperty(key)) {
                    data["custom"][key] = this.custom[key];
                }
            }
        }
        return data;
    }

    clone(): AbpUserConfigurationDto {
        const json = this.toJSON();
        let result = new AbpUserConfigurationDto();
        result.init(json);
        return result;
    }
}

export interface IAbpUserConfigurationDto {
    multiTenancy: AbpMultiTenancyConfigDto;
    session: AbpUserSessionConfigDto;
    localization: AbpUserLocalizationConfigDto;
    features: AbpUserFeatureConfigDto;
    auth: AbpUserAuthConfigDto;
    nav: AbpUserNavConfigDto;
    setting: AbpUserSettingConfigDto;
    clock: AbpUserClockConfigDto;
    timing: AbpUserTimingConfigDto;
    security: AbpUserSecurityConfigDto;
    custom: { [key: string]: any; } | undefined;
}

export class UpdateUserSignInTokenOutput implements IUpdateUserSignInTokenOutput {
    signInToken: string | undefined;
    encodedUserId: string | undefined;
    encodedTenantId: string | undefined;

    constructor(data?: IUpdateUserSignInTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.signInToken = _data["signInToken"];
            this.encodedUserId = _data["encodedUserId"];
            this.encodedTenantId = _data["encodedTenantId"];
        }
    }

    static fromJS(data: any): UpdateUserSignInTokenOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserSignInTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["encodedUserId"] = this.encodedUserId;
        data["encodedTenantId"] = this.encodedTenantId;
        return data;
    }

    clone(): UpdateUserSignInTokenOutput {
        const json = this.toJSON();
        let result = new UpdateUserSignInTokenOutput();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserSignInTokenOutput {
    signInToken: string | undefined;
    encodedUserId: string | undefined;
    encodedTenantId: string | undefined;
}

/** 文件的列表DTO LTMCompanyName.YoyoCmsTemplate.SystemBaseManage.SysFile */
export class SysFileEditDto implements ISysFileEditDto {
    /** Id */
    id: string | undefined;
    /** 父级Id */
    parentId: string | undefined;
    /** 是否为文件夹 */
    dir: boolean;
    /** 文件名 */
    name: string | undefined;
    /** 原文件名 */
    fileName: string | undefined;

    constructor(data?: ISysFileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.dir = _data["dir"];
            this.name = _data["name"];
            this.fileName = _data["fileName"];
        }
    }

    static fromJS(data: any): SysFileEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysFileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["dir"] = this.dir;
        data["name"] = this.name;
        data["fileName"] = this.fileName;
        return data;
    }

    clone(): SysFileEditDto {
        const json = this.toJSON();
        let result = new SysFileEditDto();
        result.init(json);
        return result;
    }
}

/** 文件的列表DTO LTMCompanyName.YoyoCmsTemplate.SystemBaseManage.SysFile */
export interface ISysFileEditDto {
    /** Id */
    id: string | undefined;
    /** 父级Id */
    parentId: string | undefined;
    /** 是否为文件夹 */
    dir: boolean;
    /** 文件名 */
    name: string | undefined;
    /** 原文件名 */
    fileName: string | undefined;
}

/** 文件的编辑DTO LTMCompanyName.YoyoCmsTemplate.SystemBaseManage.SysFile */
export class SysFileListDto implements ISysFileListDto {
    /** 是否为文件夹 */
    dir: boolean;
    /** 父级 LTMCompanyName.YoyoCmsTemplate.SystemBaseManage.SysFile Id. 如果是根节点，值为null */
    parentId: string | undefined;
    /** 是否为图片 */
    isImg: boolean;
    /** 文件名 */
    name: string | undefined;
    /** 原文件名 */
    fileName: string | undefined;
    /** 路径 */
    path: string | undefined;
    /** 文件格式 */
    fileExt: string | undefined;
    /** 文件类型 */
    contentType: string | undefined;
    /** 格式化大小 */
    formattedSize: string | undefined;
    /** 大小 */
    size: number;
    /** 宽度 */
    width: number;
    /** 高度 */
    height: number;
    /** 编码 */
    code: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;

    constructor(data?: ISysFileListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dir = _data["dir"];
            this.parentId = _data["parentId"];
            this.isImg = _data["isImg"];
            this.name = _data["name"];
            this.fileName = _data["fileName"];
            this.path = _data["path"];
            this.fileExt = _data["fileExt"];
            this.contentType = _data["contentType"];
            this.formattedSize = _data["formattedSize"];
            this.size = _data["size"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.code = _data["code"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SysFileListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysFileListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dir"] = this.dir;
        data["parentId"] = this.parentId;
        data["isImg"] = this.isImg;
        data["name"] = this.name;
        data["fileName"] = this.fileName;
        data["path"] = this.path;
        data["fileExt"] = this.fileExt;
        data["contentType"] = this.contentType;
        data["formattedSize"] = this.formattedSize;
        data["size"] = this.size;
        data["width"] = this.width;
        data["height"] = this.height;
        data["code"] = this.code;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): SysFileListDto {
        const json = this.toJSON();
        let result = new SysFileListDto();
        result.init(json);
        return result;
    }
}

/** 文件的编辑DTO LTMCompanyName.YoyoCmsTemplate.SystemBaseManage.SysFile */
export interface ISysFileListDto {
    /** 是否为文件夹 */
    dir: boolean;
    /** 父级 LTMCompanyName.YoyoCmsTemplate.SystemBaseManage.SysFile Id. 如果是根节点，值为null */
    parentId: string | undefined;
    /** 是否为图片 */
    isImg: boolean;
    /** 文件名 */
    name: string | undefined;
    /** 原文件名 */
    fileName: string | undefined;
    /** 路径 */
    path: string | undefined;
    /** 文件格式 */
    fileExt: string | undefined;
    /** 文件类型 */
    contentType: string | undefined;
    /** 格式化大小 */
    formattedSize: string | undefined;
    /** 大小 */
    size: number;
    /** 宽度 */
    width: number;
    /** 高度 */
    height: number;
    /** 编码 */
    code: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: string;
}

/** 读取可编辑文件的Dto */
export class GetSysFileForEditOutput implements IGetSysFileForEditOutput {
    sysFile: SysFileEditDto;

    constructor(data?: IGetSysFileForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysFile = _data["sysFile"] ? SysFileEditDto.fromJS(_data["sysFile"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetSysFileForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetSysFileForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysFile"] = this.sysFile ? this.sysFile.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetSysFileForEditOutput {
        const json = this.toJSON();
        let result = new GetSysFileForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑文件的Dto */
export interface IGetSysFileForEditOutput {
    sysFile: SysFileEditDto;
}

export class PagedResultDtoOfSysFileListDto implements IPagedResultDtoOfSysFileListDto {
    totalCount: number;
    items: SysFileListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSysFileListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(SysFileListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSysFileListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSysFileListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfSysFileListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSysFileListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSysFileListDto {
    totalCount: number;
    items: SysFileListDto[] | undefined;
}

export class MoveSysFilesInput implements IMoveSysFilesInput {
    id: string;
    newParentId: string | undefined;

    constructor(data?: IMoveSysFilesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.newParentId = _data["newParentId"];
        }
    }

    static fromJS(data: any): MoveSysFilesInput {
        data = typeof data === 'object' ? data : {};
        let result = new MoveSysFilesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data;
    }

    clone(): MoveSysFilesInput {
        const json = this.toJSON();
        let result = new MoveSysFilesInput();
        result.init(json);
        return result;
    }
}

export interface IMoveSysFilesInput {
    id: string;
    newParentId: string | undefined;
}

/** 标签的列表DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Tagging.Tag */
export class TagEditDto implements ITagEditDto {
    /** 博客Id */
    blogId: string;
    /** Id */
    id: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 标签描述 */
    description: string | undefined;

    constructor(data?: ITagEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blogId = _data["blogId"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): TagEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blogId"] = this.blogId;
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }

    clone(): TagEditDto {
        const json = this.toJSON();
        let result = new TagEditDto();
        result.init(json);
        return result;
    }
}

/** 标签的列表DTO LTMCompanyName.YoyoCmsTemplate.Blogging.Tagging.Tag */
export interface ITagEditDto {
    /** 博客Id */
    blogId: string;
    /** Id */
    id: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 标签描述 */
    description: string | undefined;
}

export class CreateOrUpdateTagInput implements ICreateOrUpdateTagInput {
    tag: TagEditDto;

    constructor(data?: ICreateOrUpdateTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.tag = new TagEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"] ? TagEditDto.fromJS(_data["tag"]) : new TagEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag ? this.tag.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateTagInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTagInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTagInput {
    tag: TagEditDto;
}

/** 读取可编辑标签的Dto */
export class GetTagForEditOutput implements IGetTagForEditOutput {
    tag: TagEditDto;

    constructor(data?: IGetTagForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"] ? TagEditDto.fromJS(_data["tag"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetTagForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTagForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag ? this.tag.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetTagForEditOutput {
        const json = this.toJSON();
        let result = new GetTagForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑标签的Dto */
export interface IGetTagForEditOutput {
    tag: TagEditDto;
}

export class PagedResultDtoOfTagListDto implements IPagedResultDtoOfTagListDto {
    totalCount: number;
    items: TagListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTagListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(TagListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTagListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTagListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfTagListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTagListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTagListDto {
    totalCount: number;
    items: TagListDto[] | undefined;
}

export class EntityDto implements IEntityDto {
    id: number;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): EntityDto {
        const json = this.toJSON();
        let result = new EntityDto();
        result.init(json);
        return result;
    }
}

export interface IEntityDto {
    id: number;
}

export class CreateTenantInput implements ICreateTenantInput {
    tenancyName: string | undefined;
    name: string | undefined;
    adminEmailAddress: string | undefined;
    adminPassword: string | undefined;
    connectionString: string | undefined;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number | undefined;
    isActive: boolean;
    subscriptionEndUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean;

    constructor(data?: ICreateTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.adminEmailAddress = _data["adminEmailAddress"];
            this.adminPassword = _data["adminPassword"];
            this.connectionString = _data["connectionString"];
            this.shouldChangePasswordOnNextLogin = _data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = _data["sendActivationEmail"];
            this.editionId = _data["editionId"];
            this.isActive = _data["isActive"];
            this.subscriptionEndUtc = _data["subscriptionEndUtc"] ? moment(_data["subscriptionEndUtc"].toString()) : <any> undefined;
            this.isInTrialPeriod = _data["isInTrialPeriod"];
        }
    }

    static fromJS(data: any): CreateTenantInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndUtc"] = this.subscriptionEndUtc ? this.subscriptionEndUtc.toISOString() : <any> undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        return data;
    }

    clone(): CreateTenantInput {
        const json = this.toJSON();
        let result = new CreateTenantInput();
        result.init(json);
        return result;
    }
}

export interface ICreateTenantInput {
    tenancyName: string | undefined;
    name: string | undefined;
    adminEmailAddress: string | undefined;
    adminPassword: string | undefined;
    connectionString: string | undefined;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number | undefined;
    isActive: boolean;
    subscriptionEndUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean;
}

export class TenantEditDto implements ITenantEditDto {
    tenancyName: string | undefined;
    name: string | undefined;
    connectionString: string | undefined;
    editionId: number | undefined;
    isActive: boolean;
    subscriptionEndUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean;
    id: number;

    constructor(data?: ITenantEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.connectionString = _data["connectionString"];
            this.editionId = _data["editionId"];
            this.isActive = _data["isActive"];
            this.subscriptionEndUtc = _data["subscriptionEndUtc"] ? moment(_data["subscriptionEndUtc"].toString()) : <any> undefined;
            this.isInTrialPeriod = _data["isInTrialPeriod"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndUtc"] = this.subscriptionEndUtc ? this.subscriptionEndUtc.toISOString() : <any> undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["id"] = this.id;
        return data;
    }

    clone(): TenantEditDto {
        const json = this.toJSON();
        let result = new TenantEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantEditDto {
    tenancyName: string | undefined;
    name: string | undefined;
    connectionString: string | undefined;
    editionId: number | undefined;
    isActive: boolean;
    subscriptionEndUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean;
    id: number;
}

export class TenantListDto implements ITenantListDto {
    tenancyName: string | undefined;
    name: string | undefined;
    editionDisplayName: string | undefined;
    connectionString: string | undefined;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndUtc: moment.Moment | undefined;
    editionId: number | undefined;
    id: number;

    constructor(data?: ITenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.editionDisplayName = _data["editionDisplayName"];
            this.connectionString = _data["connectionString"];
            this.isActive = _data["isActive"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.subscriptionEndUtc = _data["subscriptionEndUtc"] ? moment(_data["subscriptionEndUtc"].toString()) : <any> undefined;
            this.editionId = _data["editionId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["subscriptionEndUtc"] = this.subscriptionEndUtc ? this.subscriptionEndUtc.toISOString() : <any> undefined;
        data["editionId"] = this.editionId;
        data["id"] = this.id;
        return data;
    }

    clone(): TenantListDto {
        const json = this.toJSON();
        let result = new TenantListDto();
        result.init(json);
        return result;
    }
}

export interface ITenantListDto {
    tenancyName: string | undefined;
    name: string | undefined;
    editionDisplayName: string | undefined;
    connectionString: string | undefined;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndUtc: moment.Moment | undefined;
    editionId: number | undefined;
    id: number;
}

export class PagedResultDtoOfTenantListDto implements IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(TenantListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfTenantListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTenantListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[] | undefined;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"]) {
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"]) {
                    this.features.push(FlatFeatureDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues) {
                data["featureValues"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features) {
                data["features"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetTenantFeaturesEditOutput {
        const json = this.toJSON();
        let result = new GetTenantFeaturesEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[] | undefined;

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["featureValues"])) {
                this.featureValues = [] as any;
                for (let item of _data["featureValues"]) {
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.featureValues)) {
            data["featureValues"] = [];
            for (let item of this.featureValues) {
                data["featureValues"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): UpdateTenantFeaturesInput {
        const json = this.toJSON();
        let result = new UpdateTenantFeaturesInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[] | undefined;
}

/** 创建租户的DTO信息 */
export class CreateTenantDto implements ICreateTenantDto {
    /** 全局唯一的租户Id */
    tenancyName: string | undefined;
    /** 租户名称 */
    name: string | undefined;
    userName: string | undefined;
    adminEmailAddress: string | undefined;
    connectionString: string | undefined;
    isActive: boolean;
    /** 验证码 */
    verificationCode: string | undefined;
    /** 租户管理员密码 */
    tenantAdminPassword: string | undefined;

    constructor(data?: ICreateTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.adminEmailAddress = _data["adminEmailAddress"];
            this.connectionString = _data["connectionString"];
            this.isActive = _data["isActive"];
            this.verificationCode = _data["verificationCode"];
            this.tenantAdminPassword = _data["tenantAdminPassword"];
        }
    }

    static fromJS(data: any): CreateTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["verificationCode"] = this.verificationCode;
        data["tenantAdminPassword"] = this.tenantAdminPassword;
        return data;
    }

    clone(): CreateTenantDto {
        const json = this.toJSON();
        let result = new CreateTenantDto();
        result.init(json);
        return result;
    }
}

/** 创建租户的DTO信息 */
export interface ICreateTenantDto {
    /** 全局唯一的租户Id */
    tenancyName: string | undefined;
    /** 租户名称 */
    name: string | undefined;
    userName: string | undefined;
    adminEmailAddress: string | undefined;
    connectionString: string | undefined;
    isActive: boolean;
    /** 验证码 */
    verificationCode: string | undefined;
    /** 租户管理员密码 */
    tenantAdminPassword: string | undefined;
}

export class RegisterTenantResultDto implements IRegisterTenantResultDto {
    /** 租户Id */
    tenantId: number;
    /** 租户是否激活 */
    isActive: boolean;
    /** 租户启用了用户登陆验证码 */
    useCaptchaOnUserLogin: boolean;

    constructor(data?: IRegisterTenantResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.isActive = _data["isActive"];
            this.useCaptchaOnUserLogin = _data["useCaptchaOnUserLogin"];
        }
    }

    static fromJS(data: any): RegisterTenantResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTenantResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["isActive"] = this.isActive;
        data["useCaptchaOnUserLogin"] = this.useCaptchaOnUserLogin;
        return data;
    }

    clone(): RegisterTenantResultDto {
        const json = this.toJSON();
        let result = new RegisterTenantResultDto();
        result.init(json);
        return result;
    }
}

export interface IRegisterTenantResultDto {
    /** 租户Id */
    tenantId: number;
    /** 租户是否激活 */
    isActive: boolean;
    /** 租户启用了用户登陆验证码 */
    useCaptchaOnUserLogin: boolean;
}

export class TenantUserManagementSettingsEditDto implements ITenantUserManagementSettingsEditDto {
    /** 是否启用注册 */
    allowSelfRegistration: boolean;
    /** 是否新注册用户默认激活 */
    isNewRegisteredUserActiveByDefault: boolean;
    /** 是否必须校验邮箱才能登陆 */
    isEmailConfirmationRequiredForLogin: boolean;
    /** 是否注册使用验证码 */
    useCaptchaOnUserRegistration: boolean;
    captchaOnUserRegistrationType: ValidateCodeType;
    /** 注册验证码长度 */
    captchaOnUserRegistrationLength: number;
    /** 是否登陆使用验证码 */
    useCaptchaOnUserLogin: boolean;
    captchaOnUserLoginType: ValidateCodeType;
    /** 登陆验证码长度 */
    captchaOnUserLoginLength: number;

    constructor(data?: ITenantUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.allowSelfRegistration = _data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = _data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = _data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnUserRegistration = _data["useCaptchaOnUserRegistration"];
            this.captchaOnUserRegistrationType = _data["captchaOnUserRegistrationType"];
            this.captchaOnUserRegistrationLength = _data["captchaOnUserRegistrationLength"];
            this.useCaptchaOnUserLogin = _data["useCaptchaOnUserLogin"];
            this.captchaOnUserLoginType = _data["captchaOnUserLoginType"];
            this.captchaOnUserLoginLength = _data["captchaOnUserLoginLength"];
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnUserRegistration"] = this.useCaptchaOnUserRegistration;
        data["captchaOnUserRegistrationType"] = this.captchaOnUserRegistrationType;
        data["captchaOnUserRegistrationLength"] = this.captchaOnUserRegistrationLength;
        data["useCaptchaOnUserLogin"] = this.useCaptchaOnUserLogin;
        data["captchaOnUserLoginType"] = this.captchaOnUserLoginType;
        data["captchaOnUserLoginLength"] = this.captchaOnUserLoginLength;
        return data;
    }

    clone(): TenantUserManagementSettingsEditDto {
        const json = this.toJSON();
        let result = new TenantUserManagementSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantUserManagementSettingsEditDto {
    /** 是否启用注册 */
    allowSelfRegistration: boolean;
    /** 是否新注册用户默认激活 */
    isNewRegisteredUserActiveByDefault: boolean;
    /** 是否必须校验邮箱才能登陆 */
    isEmailConfirmationRequiredForLogin: boolean;
    /** 是否注册使用验证码 */
    useCaptchaOnUserRegistration: boolean;
    captchaOnUserRegistrationType: ValidateCodeType;
    /** 注册验证码长度 */
    captchaOnUserRegistrationLength: number;
    /** 是否登陆使用验证码 */
    useCaptchaOnUserLogin: boolean;
    captchaOnUserLoginType: ValidateCodeType;
    /** 登陆验证码长度 */
    captchaOnUserLoginLength: number;
}

export class LdapSettingsEditDto implements ILdapSettingsEditDto {
    /** 模块启用 */
    isModuleEnabled: boolean;
    /** 启用 */
    isEnabled: boolean;
    domain: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 密码 */
    password: string | undefined;

    constructor(data?: ILdapSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isModuleEnabled = _data["isModuleEnabled"];
            this.isEnabled = _data["isEnabled"];
            this.domain = _data["domain"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new LdapSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isModuleEnabled"] = this.isModuleEnabled;
        data["isEnabled"] = this.isEnabled;
        data["domain"] = this.domain;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }

    clone(): LdapSettingsEditDto {
        const json = this.toJSON();
        let result = new LdapSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ILdapSettingsEditDto {
    /** 模块启用 */
    isModuleEnabled: boolean;
    /** 启用 */
    isEnabled: boolean;
    domain: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 密码 */
    password: string | undefined;
}

export class TenantBillingSettingsEditDto implements ITenantBillingSettingsEditDto {
    legalName: string | undefined;
    address: string | undefined;
    taxVatNo: string | undefined;

    constructor(data?: ITenantBillingSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.legalName = _data["legalName"];
            this.address = _data["address"];
            this.taxVatNo = _data["taxVatNo"];
        }
    }

    static fromJS(data: any): TenantBillingSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantBillingSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        data["taxVatNo"] = this.taxVatNo;
        return data;
    }

    clone(): TenantBillingSettingsEditDto {
        const json = this.toJSON();
        let result = new TenantBillingSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantBillingSettingsEditDto {
    legalName: string | undefined;
    address: string | undefined;
    taxVatNo: string | undefined;
}

export class TenantSettingsEditDto implements ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: TenantBillingSettingsEditDto;

    constructor(data?: ITenantSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.userManagement = new TenantUserManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.general = _data["general"] ? GeneralSettingsEditDto.fromJS(_data["general"]) : <any> undefined;
            this.userManagement = _data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(_data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = _data["email"] ? EmailSettingsEditDto.fromJS(_data["email"]) : <any> undefined;
            this.ldap = _data["ldap"] ? LdapSettingsEditDto.fromJS(_data["ldap"]) : <any> undefined;
            this.security = _data["security"] ? SecuritySettingsEditDto.fromJS(_data["security"]) : new SecuritySettingsEditDto();
            this.billing = _data["billing"] ? TenantBillingSettingsEditDto.fromJS(_data["billing"]) : <any> undefined;
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any> undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any> undefined;
        data["email"] = this.email ? this.email.toJSON() : <any> undefined;
        data["ldap"] = this.ldap ? this.ldap.toJSON() : <any> undefined;
        data["security"] = this.security ? this.security.toJSON() : <any> undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : <any> undefined;
        return data;
    }

    clone(): TenantSettingsEditDto {
        const json = this.toJSON();
        let result = new TenantSettingsEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: TenantBillingSettingsEditDto;
}

export enum SettingScopes {
    Application = <any> "Application",
    Tenant = <any> "Tenant",
    User = <any> "User",
    All = <any> "All",
}

export class ListResultDtoOfNameValueDto implements IListResultDtoOfNameValueDto {
    items: NameValueDto[] | undefined;

    constructor(data?: IListResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(NameValueDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfNameValueDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfNameValueDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfNameValueDto {
    items: NameValueDto[] | undefined;
}

/** 用户信息编辑用Dto */
export class UserEditDto implements IUserEditDto {
    /** 根据id是否有值来判断是创建还是添加 */
    id: number | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    password: string | undefined;
    isLockoutEnabled: boolean;
    /** 需要修改密码 */
    needToChangeThePassword: boolean;
    /** 头像Id */
    profilePictureId: string | undefined;
    isTwoFactorEnabled: boolean;
    isActive: boolean;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.password = _data["password"];
            this.isLockoutEnabled = _data["isLockoutEnabled"];
            this.needToChangeThePassword = _data["needToChangeThePassword"];
            this.profilePictureId = _data["profilePictureId"];
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UserEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["needToChangeThePassword"] = this.needToChangeThePassword;
        data["profilePictureId"] = this.profilePictureId;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isActive"] = this.isActive;
        return data;
    }

    clone(): UserEditDto {
        const json = this.toJSON();
        let result = new UserEditDto();
        result.init(json);
        return result;
    }
}

/** 用户信息编辑用Dto */
export interface IUserEditDto {
    /** 根据id是否有值来判断是创建还是添加 */
    id: number | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    password: string | undefined;
    isLockoutEnabled: boolean;
    /** 需要修改密码 */
    needToChangeThePassword: boolean;
    /** 头像Id */
    profilePictureId: string | undefined;
    isTwoFactorEnabled: boolean;
    isActive: boolean;
}

/** 用户信息新增和编辑时用Dto */
export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    user: UserEditDto;
    /** 授权的角色 */
    assignedRoleNames: string[] | undefined;
    /** 所在的组织机构的ID */
    organizationUnits: number[] | undefined;
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 设置随机密码 */
    setRandomPassword: boolean;

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? UserEditDto.fromJS(_data["user"]) : <any> undefined;
            if (Array.isArray(_data["assignedRoleNames"])) {
                this.assignedRoleNames = [] as any;
                for (let item of _data["assignedRoleNames"]) {
                    this.assignedRoleNames.push(item);
                }
            }
            if (Array.isArray(_data["organizationUnits"])) {
                this.organizationUnits = [] as any;
                for (let item of _data["organizationUnits"]) {
                    this.organizationUnits.push(item);
                }
            }
            this.sendActivationEmail = _data["sendActivationEmail"];
            this.setRandomPassword = _data["setRandomPassword"];
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any> undefined;
        if (Array.isArray(this.assignedRoleNames)) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames) {
                data["assignedRoleNames"].push(item);
            }
        }
        if (Array.isArray(this.organizationUnits)) {
            data["organizationUnits"] = [];
            for (let item of this.organizationUnits) {
                data["organizationUnits"].push(item);
            }
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        return data;
    }

    clone(): CreateOrUpdateUserInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateUserInput();
        result.init(json);
        return result;
    }
}

/** 用户信息新增和编辑时用Dto */
export interface ICreateOrUpdateUserInput {
    user: UserEditDto;
    /** 授权的角色 */
    assignedRoleNames: string[] | undefined;
    /** 所在的组织机构的ID */
    organizationUnits: number[] | undefined;
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 设置随机密码 */
    setRandomPassword: boolean;
}

export class UserRoleDto implements IUserRoleDto {
    roleId: number;
    roleName: string | undefined;
    roleDisplayName: string | undefined;
    isAssigned: boolean;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.roleName = _data["roleName"];
            this.roleDisplayName = _data["roleDisplayName"];
            this.isAssigned = _data["isAssigned"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data;
    }

    clone(): UserRoleDto {
        const json = this.toJSON();
        let result = new UserRoleDto();
        result.init(json);
        return result;
    }
}

export interface IUserRoleDto {
    roleId: number;
    roleName: string | undefined;
    roleDisplayName: string | undefined;
    isAssigned: boolean;
}

export class GetUserForEditTreeOutput implements IGetUserForEditTreeOutput {
    user: UserEditDto;
    roles: UserRoleDto[] | undefined;
    allOrganizationUnits: OrganizationUnitListDto[] | undefined;
    memberedOrganizationUnits: string[] | undefined;

    constructor(data?: IGetUserForEditTreeOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? UserEditDto.fromJS(_data["user"]) : <any> undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"]) {
                    this.roles.push(UserRoleDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["allOrganizationUnits"])) {
                this.allOrganizationUnits = [] as any;
                for (let item of _data["allOrganizationUnits"]) {
                    this.allOrganizationUnits.push(OrganizationUnitListDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["memberedOrganizationUnits"])) {
                this.memberedOrganizationUnits = [] as any;
                for (let item of _data["memberedOrganizationUnits"]) {
                    this.memberedOrganizationUnits.push(item);
                }
            }
        }
    }

    static fromJS(data: any): GetUserForEditTreeOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForEditTreeOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any> undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles) {
                data["roles"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.allOrganizationUnits)) {
            data["allOrganizationUnits"] = [];
            for (let item of this.allOrganizationUnits) {
                data["allOrganizationUnits"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.memberedOrganizationUnits)) {
            data["memberedOrganizationUnits"] = [];
            for (let item of this.memberedOrganizationUnits) {
                data["memberedOrganizationUnits"].push(item);
            }
        }
        return data;
    }

    clone(): GetUserForEditTreeOutput {
        const json = this.toJSON();
        let result = new GetUserForEditTreeOutput();
        result.init(json);
        return result;
    }
}

export interface IGetUserForEditTreeOutput {
    user: UserEditDto;
    roles: UserRoleDto[] | undefined;
    allOrganizationUnits: OrganizationUnitListDto[] | undefined;
    memberedOrganizationUnits: string[] | undefined;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(UserListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfUserListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfUserListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[] | undefined;
}

export class GetUserPermissionsTreeForEditOutput implements IGetUserPermissionsTreeForEditOutput {
    permissions: FlatPermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IGetUserPermissionsTreeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"]) {
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"]) {
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsTreeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserPermissionsTreeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions) {
                data["permissions"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames) {
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    }

    clone(): GetUserPermissionsTreeForEditOutput {
        const json = this.toJSON();
        let result = new GetUserPermissionsTreeForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetUserPermissionsTreeForEditOutput {
    permissions: FlatPermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;
}

export class GetUserForEditOutput implements IGetUserForEditOutput {
    profilePictureId: string | undefined;
    user: UserEditDto;
    roles: UserRoleDto[] | undefined;
    allOrganizationUnits: OrganizationUnitListDto[] | undefined;
    memberedOrganizationUnits: string[] | undefined;

    constructor(data?: IGetUserForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.profilePictureId = _data["profilePictureId"];
            this.user = _data["user"] ? UserEditDto.fromJS(_data["user"]) : <any> undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"]) {
                    this.roles.push(UserRoleDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["allOrganizationUnits"])) {
                this.allOrganizationUnits = [] as any;
                for (let item of _data["allOrganizationUnits"]) {
                    this.allOrganizationUnits.push(OrganizationUnitListDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["memberedOrganizationUnits"])) {
                this.memberedOrganizationUnits = [] as any;
                for (let item of _data["memberedOrganizationUnits"]) {
                    this.memberedOrganizationUnits.push(item);
                }
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : <any> undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles) {
                data["roles"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.allOrganizationUnits)) {
            data["allOrganizationUnits"] = [];
            for (let item of this.allOrganizationUnits) {
                data["allOrganizationUnits"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.memberedOrganizationUnits)) {
            data["memberedOrganizationUnits"] = [];
            for (let item of this.memberedOrganizationUnits) {
                data["memberedOrganizationUnits"].push(item);
            }
        }
        return data;
    }

    clone(): GetUserForEditOutput {
        const json = this.toJSON();
        let result = new GetUserForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetUserForEditOutput {
    profilePictureId: string | undefined;
    user: UserEditDto;
    roles: UserRoleDto[] | undefined;
    allOrganizationUnits: OrganizationUnitListDto[] | undefined;
    memberedOrganizationUnits: string[] | undefined;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    /** 所有的权限 */
    permissions: FlatPermissionDto[] | undefined;
    /** 已有权限 */
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"]) {
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"]) {
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions) {
                data["permissions"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames) {
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    }

    clone(): GetUserPermissionsForEditOutput {
        const json = this.toJSON();
        let result = new GetUserPermissionsForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetUserPermissionsForEditOutput {
    /** 所有的权限 */
    permissions: FlatPermissionDto[] | undefined;
    /** 已有权限 */
    grantedPermissionNames: string[] | undefined;
}

export class NullableIdDtoOfInt64 implements INullableIdDtoOfInt64 {
    id: number | undefined;

    constructor(data?: INullableIdDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): NullableIdDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new NullableIdDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): NullableIdDtoOfInt64 {
        const json = this.toJSON();
        let result = new NullableIdDtoOfInt64();
        result.init(json);
        return result;
    }
}

export interface INullableIdDtoOfInt64 {
    id: number | undefined;
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): EntityDtoOfInt64 {
        const json = this.toJSON();
        let result = new EntityDtoOfInt64();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"]) {
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames) {
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    }

    clone(): UpdateUserPermissionsInput {
        const json = this.toJSON();
        let result = new UpdateUserPermissionsInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[] | undefined;
}

export class UserToken implements IUserToken {
    tenantId: number | undefined;
    userId: number;
    loginProvider: string | undefined;
    name: string | undefined;
    value: string | undefined;
    expireDate: moment.Moment | undefined;
    id: number;

    constructor(data?: IUserToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.loginProvider = _data["loginProvider"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.expireDate = _data["expireDate"] ? moment(_data["expireDate"].toString()) : <any> undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserToken {
        data = typeof data === 'object' ? data : {};
        let result = new UserToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["loginProvider"] = this.loginProvider;
        data["name"] = this.name;
        data["value"] = this.value;
        data["expireDate"] = this.expireDate ? this.expireDate.toISOString() : <any> undefined;
        data["id"] = this.id;
        return data;
    }

    clone(): UserToken {
        const json = this.toJSON();
        let result = new UserToken();
        result.init(json);
        return result;
    }
}

export interface IUserToken {
    tenantId: number | undefined;
    userId: number;
    loginProvider: string | undefined;
    name: string | undefined;
    value: string | undefined;
    expireDate: moment.Moment | undefined;
    id: number;
}

export class UserLogin implements IUserLogin {
    tenantId: number | undefined;
    userId: number;
    loginProvider: string | undefined;
    providerKey: string | undefined;
    id: number;

    constructor(data?: IUserLogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.loginProvider = _data["loginProvider"];
            this.providerKey = _data["providerKey"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserLogin {
        data = typeof data === 'object' ? data : {};
        let result = new UserLogin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["id"] = this.id;
        return data;
    }

    clone(): UserLogin {
        const json = this.toJSON();
        let result = new UserLogin();
        result.init(json);
        return result;
    }
}

export interface IUserLogin {
    tenantId: number | undefined;
    userId: number;
    loginProvider: string | undefined;
    providerKey: string | undefined;
    id: number;
}

export class UserRole implements IUserRole {
    tenantId: number | undefined;
    userId: number;
    roleId: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.roleId = _data["roleId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["roleId"] = this.roleId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): UserRole {
        const json = this.toJSON();
        let result = new UserRole();
        result.init(json);
        return result;
    }
}

export interface IUserRole {
    tenantId: number | undefined;
    userId: number;
    roleId: number;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class UserClaim implements IUserClaim {
    tenantId: number | undefined;
    userId: number;
    claimType: string | undefined;
    claimValue: string | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IUserClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserClaim {
        data = typeof data === 'object' ? data : {};
        let result = new UserClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): UserClaim {
        const json = this.toJSON();
        let result = new UserClaim();
        result.init(json);
        return result;
    }
}

export interface IUserClaim {
    tenantId: number | undefined;
    userId: number;
    claimType: string | undefined;
    claimValue: string | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class UserPermissionSetting implements IUserPermissionSetting {
    userId: number;
    tenantId: number | undefined;
    name: string | undefined;
    isGranted: boolean;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IUserPermissionSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.isGranted = _data["isGranted"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UserPermissionSetting {
        data = typeof data === 'object' ? data : {};
        let result = new UserPermissionSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["isGranted"] = this.isGranted;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): UserPermissionSetting {
        const json = this.toJSON();
        let result = new UserPermissionSetting();
        result.init(json);
        return result;
    }
}

export interface IUserPermissionSetting {
    userId: number;
    tenantId: number | undefined;
    name: string | undefined;
    isGranted: boolean;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class Setting implements ISetting {
    tenantId: number | undefined;
    userId: number | undefined;
    name: string | undefined;
    value: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: ISetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Setting {
        data = typeof data === 'object' ? data : {};
        let result = new Setting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["value"] = this.value;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): Setting {
        const json = this.toJSON();
        let result = new Setting();
        result.init(json);
        return result;
    }
}

export interface ISetting {
    tenantId: number | undefined;
    userId: number | undefined;
    name: string | undefined;
    value: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class User implements IUser {
    signInToken: string | undefined;
    needToChangeThePassword: boolean;
    signInTokenExpireTimeUtc: moment.Moment | undefined;
    name: string | undefined;
    profilePictureId: string | undefined;
    surname: string | undefined;
    normalizedUserName: string | undefined;
    normalizedEmailAddress: string | undefined;
    concurrencyStamp: string | undefined;
    tokens: UserToken[] | undefined;
    deleterUser: User;
    creatorUser: User;
    lastModifierUser: User;
    authenticationSource: string | undefined;
    userName: string | undefined;
    tenantId: number | undefined;
    emailAddress: string | undefined;
    readonly fullName: string | undefined;
    password: string | undefined;
    emailConfirmationCode: string | undefined;
    passwordResetCode: string | undefined;
    lockoutEndDateUtc: moment.Moment | undefined;
    accessFailedCount: number;
    isLockoutEnabled: boolean;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean;
    securityStamp: string | undefined;
    isTwoFactorEnabled: boolean;
    logins: UserLogin[] | undefined;
    roles: UserRole[] | undefined;
    claims: UserClaim[] | undefined;
    permissions: UserPermissionSetting[] | undefined;
    settings: Setting[] | undefined;
    isEmailConfirmed: boolean;
    isActive: boolean;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.signInToken = _data["signInToken"];
            this.needToChangeThePassword = _data["needToChangeThePassword"];
            this.signInTokenExpireTimeUtc = _data["signInTokenExpireTimeUtc"] ? moment(_data["signInTokenExpireTimeUtc"].toString()) : <any> undefined;
            this.name = _data["name"];
            this.profilePictureId = _data["profilePictureId"];
            this.surname = _data["surname"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.normalizedEmailAddress = _data["normalizedEmailAddress"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            if (Array.isArray(_data["tokens"])) {
                this.tokens = [] as any;
                for (let item of _data["tokens"]) {
                    this.tokens.push(UserToken.fromJS(item));
                }
            }
            this.deleterUser = _data["deleterUser"] ? User.fromJS(_data["deleterUser"]) : <any> undefined;
            this.creatorUser = _data["creatorUser"] ? User.fromJS(_data["creatorUser"]) : <any> undefined;
            this.lastModifierUser = _data["lastModifierUser"] ? User.fromJS(_data["lastModifierUser"]) : <any> undefined;
            this.authenticationSource = _data["authenticationSource"];
            this.userName = _data["userName"];
            this.tenantId = _data["tenantId"];
            this.emailAddress = _data["emailAddress"];
            (<any> this).fullName = _data["fullName"];
            this.password = _data["password"];
            this.emailConfirmationCode = _data["emailConfirmationCode"];
            this.passwordResetCode = _data["passwordResetCode"];
            this.lockoutEndDateUtc = _data["lockoutEndDateUtc"] ? moment(_data["lockoutEndDateUtc"].toString()) : <any> undefined;
            this.accessFailedCount = _data["accessFailedCount"];
            this.isLockoutEnabled = _data["isLockoutEnabled"];
            this.phoneNumber = _data["phoneNumber"];
            this.isPhoneNumberConfirmed = _data["isPhoneNumberConfirmed"];
            this.securityStamp = _data["securityStamp"];
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            if (Array.isArray(_data["logins"])) {
                this.logins = [] as any;
                for (let item of _data["logins"]) {
                    this.logins.push(UserLogin.fromJS(item));
                }
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"]) {
                    this.roles.push(UserRole.fromJS(item));
                }
            }
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"]) {
                    this.claims.push(UserClaim.fromJS(item));
                }
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"]) {
                    this.permissions.push(UserPermissionSetting.fromJS(item));
                }
            }
            if (Array.isArray(_data["settings"])) {
                this.settings = [] as any;
                for (let item of _data["settings"]) {
                    this.settings.push(Setting.fromJS(item));
                }
            }
            this.isEmailConfirmed = _data["isEmailConfirmed"];
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.deleterUserId = _data["deleterUserId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any> undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["needToChangeThePassword"] = this.needToChangeThePassword;
        data["signInTokenExpireTimeUtc"] = this.signInTokenExpireTimeUtc ? this.signInTokenExpireTimeUtc.toISOString() : <any> undefined;
        data["name"] = this.name;
        data["profilePictureId"] = this.profilePictureId;
        data["surname"] = this.surname;
        data["normalizedUserName"] = this.normalizedUserName;
        data["normalizedEmailAddress"] = this.normalizedEmailAddress;
        data["concurrencyStamp"] = this.concurrencyStamp;
        if (Array.isArray(this.tokens)) {
            data["tokens"] = [];
            for (let item of this.tokens) {
                data["tokens"].push(item.toJSON());
            }
        }
        data["deleterUser"] = this.deleterUser ? this.deleterUser.toJSON() : <any> undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : <any> undefined;
        data["lastModifierUser"] = this.lastModifierUser ? this.lastModifierUser.toJSON() : <any> undefined;
        data["authenticationSource"] = this.authenticationSource;
        data["userName"] = this.userName;
        data["tenantId"] = this.tenantId;
        data["emailAddress"] = this.emailAddress;
        data["fullName"] = this.fullName;
        data["password"] = this.password;
        data["emailConfirmationCode"] = this.emailConfirmationCode;
        data["passwordResetCode"] = this.passwordResetCode;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any> undefined;
        data["accessFailedCount"] = this.accessFailedCount;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["securityStamp"] = this.securityStamp;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        if (Array.isArray(this.logins)) {
            data["logins"] = [];
            for (let item of this.logins) {
                data["logins"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles) {
                data["roles"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims) {
                data["claims"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions) {
                data["permissions"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings) {
                data["settings"].push(item.toJSON());
            }
        }
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any> undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): User {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    signInToken: string | undefined;
    needToChangeThePassword: boolean;
    signInTokenExpireTimeUtc: moment.Moment | undefined;
    name: string | undefined;
    profilePictureId: string | undefined;
    surname: string | undefined;
    normalizedUserName: string | undefined;
    normalizedEmailAddress: string | undefined;
    concurrencyStamp: string | undefined;
    tokens: UserToken[] | undefined;
    deleterUser: User;
    creatorUser: User;
    lastModifierUser: User;
    authenticationSource: string | undefined;
    userName: string | undefined;
    tenantId: number | undefined;
    emailAddress: string | undefined;
    fullName: string | undefined;
    password: string | undefined;
    emailConfirmationCode: string | undefined;
    passwordResetCode: string | undefined;
    lockoutEndDateUtc: moment.Moment | undefined;
    accessFailedCount: number;
    isLockoutEnabled: boolean;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean;
    securityStamp: string | undefined;
    isTwoFactorEnabled: boolean;
    logins: UserLogin[] | undefined;
    roles: UserRole[] | undefined;
    claims: UserClaim[] | undefined;
    permissions: UserPermissionSetting[] | undefined;
    settings: Setting[] | undefined;
    isEmailConfirmed: boolean;
    isActive: boolean;
    isDeleted: boolean;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class LinkedUserDto implements ILinkedUserDto {
    tenantId: number | undefined;
    tenancyName: string | undefined;
    username: string | undefined;
    id: number;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.tenancyName = _data["tenancyName"];
            this.username = _data["username"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["id"] = this.id;
        return data;
    }

    clone(): LinkedUserDto {
        const json = this.toJSON();
        let result = new LinkedUserDto();
        result.init(json);
        return result;
    }
}

export interface ILinkedUserDto {
    tenantId: number | undefined;
    tenancyName: string | undefined;
    username: string | undefined;
    id: number;
}

export class PagedResultDtoOfLinkedUserDto implements IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(LinkedUserDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfLinkedUserDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[] | undefined;
}

export class ListResultDtoOfLinkedUserDto implements IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[] | undefined;

    constructor(data?: IListResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(LinkedUserDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfLinkedUserDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[] | undefined;
}

export class LinkToUserInput implements ILinkToUserInput {
    tenancyName: string | undefined;
    usernameOrEmailAddress: string | undefined;
    password: string | undefined;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.usernameOrEmailAddress = _data["usernameOrEmailAddress"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data;
    }

    clone(): LinkToUserInput {
        const json = this.toJSON();
        let result = new LinkToUserInput();
        result.init(json);
        return result;
    }
}

export interface ILinkToUserInput {
    tenancyName: string | undefined;
    usernameOrEmailAddress: string | undefined;
    password: string | undefined;
}

export class UnlinkUserInput implements IUnlinkUserInput {
    tenantId: number | undefined;
    userId: number;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    }

    clone(): UnlinkUserInput {
        const json = this.toJSON();
        let result = new UnlinkUserInput();
        result.init(json);
        return result;
    }
}

export interface IUnlinkUserInput {
    tenantId: number | undefined;
    userId: number;
}

export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    tenancyName: string | undefined;
    userNameOrEmailAddress: string | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    result: string | undefined;
    creationTime: moment.Moment;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"];
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
            this.clientIpAddress = _data["clientIpAddress"];
            this.clientName = _data["clientName"];
            this.browserInfo = _data["browserInfo"];
            this.result = _data["result"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        return data;
    }

    clone(): UserLoginAttemptDto {
        const json = this.toJSON();
        let result = new UserLoginAttemptDto();
        result.init(json);
        return result;
    }
}

export interface IUserLoginAttemptDto {
    tenancyName: string | undefined;
    userNameOrEmailAddress: string | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    result: string | undefined;
    creationTime: moment.Moment;
}

export class ListResultDtoOfUserLoginAttemptDto implements IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[] | undefined;

    constructor(data?: IListResultDtoOfUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(UserLoginAttemptDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): ListResultDtoOfUserLoginAttemptDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[] | undefined;
}

export class GetLatestWebLogsOutput implements IGetLatestWebLogsOutput {
    latestWebLogLines: string[] | undefined;

    constructor(data?: IGetLatestWebLogsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["latestWebLogLines"])) {
                this.latestWebLogLines = [] as any;
                for (let item of _data["latestWebLogLines"]) {
                    this.latestWebLogLines.push(item);
                }
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.latestWebLogLines)) {
            data["latestWebLogLines"] = [];
            for (let item of this.latestWebLogLines) {
                data["latestWebLogLines"].push(item);
            }
        }
        return data;
    }

    clone(): GetLatestWebLogsOutput {
        const json = this.toJSON();
        let result = new GetLatestWebLogsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetLatestWebLogsOutput {
    latestWebLogLines: string[] | undefined;
}

/** 网站公告的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Notices.WebSiteNotice */
export class WebSiteNoticeEditDto implements IWebSiteNoticeEditDto {
    /** Id */
    id: number | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** ViewCount */
    viewCount: number;

    constructor(data?: IWebSiteNoticeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.viewCount = _data["viewCount"];
        }
    }

    static fromJS(data: any): WebSiteNoticeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new WebSiteNoticeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["viewCount"] = this.viewCount;
        return data;
    }

    clone(): WebSiteNoticeEditDto {
        const json = this.toJSON();
        let result = new WebSiteNoticeEditDto();
        result.init(json);
        return result;
    }
}

/** 网站公告的列表DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Notices.WebSiteNotice */
export interface IWebSiteNoticeEditDto {
    /** Id */
    id: number | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** ViewCount */
    viewCount: number;
}

export class CreateOrUpdateWebSiteNoticeInput implements ICreateOrUpdateWebSiteNoticeInput {
    webSiteNotice: WebSiteNoticeEditDto;

    constructor(data?: ICreateOrUpdateWebSiteNoticeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.webSiteNotice = new WebSiteNoticeEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.webSiteNotice = _data["webSiteNotice"] ? WebSiteNoticeEditDto.fromJS(_data["webSiteNotice"]) : new WebSiteNoticeEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateWebSiteNoticeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateWebSiteNoticeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["webSiteNotice"] = this.webSiteNotice ? this.webSiteNotice.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateWebSiteNoticeInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateWebSiteNoticeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateWebSiteNoticeInput {
    webSiteNotice: WebSiteNoticeEditDto;
}

/** 网站公告的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Notices.WebSiteNotice */
export class WebSiteNoticeListDto implements IWebSiteNoticeListDto {
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** ViewCount */
    viewCount: number;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IWebSiteNoticeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.content = _data["content"];
            this.viewCount = _data["viewCount"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): WebSiteNoticeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new WebSiteNoticeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["viewCount"] = this.viewCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): WebSiteNoticeListDto {
        const json = this.toJSON();
        let result = new WebSiteNoticeListDto();
        result.init(json);
        return result;
    }
}

/** 网站公告的编辑DTO LTMCompanyName.YoyoCmsTemplate.Modules.WebSiteSetting.Notices.WebSiteNotice */
export interface IWebSiteNoticeListDto {
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** ViewCount */
    viewCount: number;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

/** 读取可编辑网站公告的Dto */
export class GetWebSiteNoticeForEditOutput implements IGetWebSiteNoticeForEditOutput {
    webSiteNotice: WebSiteNoticeEditDto;

    constructor(data?: IGetWebSiteNoticeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.webSiteNotice = _data["webSiteNotice"] ? WebSiteNoticeEditDto.fromJS(_data["webSiteNotice"]) : <any> undefined;
        }
    }

    static fromJS(data: any): GetWebSiteNoticeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWebSiteNoticeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["webSiteNotice"] = this.webSiteNotice ? this.webSiteNotice.toJSON() : <any> undefined;
        return data;
    }

    clone(): GetWebSiteNoticeForEditOutput {
        const json = this.toJSON();
        let result = new GetWebSiteNoticeForEditOutput();
        result.init(json);
        return result;
    }
}

/** 读取可编辑网站公告的Dto */
export interface IGetWebSiteNoticeForEditOutput {
    webSiteNotice: WebSiteNoticeEditDto;
}

export class PagedResultDtoOfWebSiteNoticeListDto implements IPagedResultDtoOfWebSiteNoticeListDto {
    totalCount: number;
    items: WebSiteNoticeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfWebSiteNoticeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(WebSiteNoticeListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfWebSiteNoticeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfWebSiteNoticeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfWebSiteNoticeListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfWebSiteNoticeListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfWebSiteNoticeListDto {
    totalCount: number;
    items: WebSiteNoticeListDto[] | undefined;
}

export enum WechatAppTypeEnum {
    订阅号 = <any> "订阅号",
    认证订阅号 = <any> "认证订阅号",
    服务号 = <any> "服务号",
    认证服务号 = <any> "认证服务号",
}

export class WechatAppConfigEditDto implements IWechatAppConfigEditDto {
    /** Id */
    id: number | undefined;
    /** AppId */
    appId: string | undefined;
    /** AppSecret */
    appSecret: string | undefined;
    /** Token */
    token: string | undefined;
    /** EncodingAESKey */
    encodingAESKey: string | undefined;
    /** 公众号名称 */
    name: string | undefined;
    /** 公众号原始ID */
    appOrgId: string | undefined;
    appType: WechatAppTypeEnum;
    /** QRCodeUrl */
    qrCodeUrl: string | undefined;

    constructor(data?: IWechatAppConfigEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.appId = _data["appId"];
            this.appSecret = _data["appSecret"];
            this.token = _data["token"];
            this.encodingAESKey = _data["encodingAESKey"];
            this.name = _data["name"];
            this.appOrgId = _data["appOrgId"];
            this.appType = _data["appType"];
            this.qrCodeUrl = _data["qrCodeUrl"];
        }
    }

    static fromJS(data: any): WechatAppConfigEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new WechatAppConfigEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appId"] = this.appId;
        data["appSecret"] = this.appSecret;
        data["token"] = this.token;
        data["encodingAESKey"] = this.encodingAESKey;
        data["name"] = this.name;
        data["appOrgId"] = this.appOrgId;
        data["appType"] = this.appType;
        data["qrCodeUrl"] = this.qrCodeUrl;
        return data;
    }

    clone(): WechatAppConfigEditDto {
        const json = this.toJSON();
        let result = new WechatAppConfigEditDto();
        result.init(json);
        return result;
    }
}

export interface IWechatAppConfigEditDto {
    /** Id */
    id: number | undefined;
    /** AppId */
    appId: string | undefined;
    /** AppSecret */
    appSecret: string | undefined;
    /** Token */
    token: string | undefined;
    /** EncodingAESKey */
    encodingAESKey: string | undefined;
    /** 公众号名称 */
    name: string | undefined;
    /** 公众号原始ID */
    appOrgId: string | undefined;
    appType: WechatAppTypeEnum;
    /** QRCodeUrl */
    qrCodeUrl: string | undefined;
}

export class CreateOrUpdateWechatAppConfigInput implements ICreateOrUpdateWechatAppConfigInput {
    wechatAppConfig: WechatAppConfigEditDto;

    constructor(data?: ICreateOrUpdateWechatAppConfigInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
        if (!data) {
            this.wechatAppConfig = new WechatAppConfigEditDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wechatAppConfig = _data["wechatAppConfig"] ? WechatAppConfigEditDto.fromJS(_data["wechatAppConfig"]) : new WechatAppConfigEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateWechatAppConfigInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateWechatAppConfigInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wechatAppConfig"] = this.wechatAppConfig ? this.wechatAppConfig.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrUpdateWechatAppConfigInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateWechatAppConfigInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateWechatAppConfigInput {
    wechatAppConfig: WechatAppConfigEditDto;
}

export class WechatAppConfigListDto implements IWechatAppConfigListDto {
    /** AppId */
    appId: string | undefined;
    /** 公众号名称 */
    name: string | undefined;
    appType: WechatAppTypeEnum;
    /** 公众号类型中文名称 */
    appTypeStr: string | undefined;
    /** QRCodeUrl */
    qrCodeUrl: string | undefined;
    /** 已注册到应用冲 */
    registered: boolean;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;

    constructor(data?: IWechatAppConfigListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appId = _data["appId"];
            this.name = _data["name"];
            this.appType = _data["appType"];
            this.appTypeStr = _data["appTypeStr"];
            this.qrCodeUrl = _data["qrCodeUrl"];
            this.registered = _data["registered"];
            this.lastModificationTime = _data["lastModificationTime"] ? moment(_data["lastModificationTime"].toString()) : <any> undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any> undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): WechatAppConfigListDto {
        data = typeof data === 'object' ? data : {};
        let result = new WechatAppConfigListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["name"] = this.name;
        data["appType"] = this.appType;
        data["appTypeStr"] = this.appTypeStr;
        data["qrCodeUrl"] = this.qrCodeUrl;
        data["registered"] = this.registered;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any> undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any> undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    }

    clone(): WechatAppConfigListDto {
        const json = this.toJSON();
        let result = new WechatAppConfigListDto();
        result.init(json);
        return result;
    }
}

export interface IWechatAppConfigListDto {
    /** AppId */
    appId: string | undefined;
    /** 公众号名称 */
    name: string | undefined;
    appType: WechatAppTypeEnum;
    /** 公众号类型中文名称 */
    appTypeStr: string | undefined;
    /** QRCodeUrl */
    qrCodeUrl: string | undefined;
    /** 已注册到应用冲 */
    registered: boolean;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment;
    creatorUserId: number | undefined;
    id: number;
}

export class KeyValuePairOfStringInt32 implements IKeyValuePairOfStringInt32 {
    readonly key: string | undefined;
    readonly value: number;

    constructor(data?: IKeyValuePairOfStringInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any> this).key = _data["key"];
            (<any> this).value = _data["value"];
        }
    }

    static fromJS(data: any): KeyValuePairOfStringInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfStringInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }

    clone(): KeyValuePairOfStringInt32 {
        const json = this.toJSON();
        let result = new KeyValuePairOfStringInt32();
        result.init(json);
        return result;
    }
}

export interface IKeyValuePairOfStringInt32 {
    key: string | undefined;
    value: number;
}

export class GetWechatAppConfigForEditOutput implements IGetWechatAppConfigForEditOutput {
    wechatAppConfig: WechatAppConfigEditDto;
    wechatAppTypeList: KeyValuePairOfStringInt32[] | undefined;

    constructor(data?: IGetWechatAppConfigForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wechatAppConfig = _data["wechatAppConfig"] ? WechatAppConfigEditDto.fromJS(_data["wechatAppConfig"]) : <any> undefined;
            if (Array.isArray(_data["wechatAppTypeList"])) {
                this.wechatAppTypeList = [] as any;
                for (let item of _data["wechatAppTypeList"]) {
                    this.wechatAppTypeList.push(KeyValuePairOfStringInt32.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetWechatAppConfigForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWechatAppConfigForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wechatAppConfig"] = this.wechatAppConfig ? this.wechatAppConfig.toJSON() : <any> undefined;
        if (Array.isArray(this.wechatAppTypeList)) {
            data["wechatAppTypeList"] = [];
            for (let item of this.wechatAppTypeList) {
                data["wechatAppTypeList"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetWechatAppConfigForEditOutput {
        const json = this.toJSON();
        let result = new GetWechatAppConfigForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetWechatAppConfigForEditOutput {
    wechatAppConfig: WechatAppConfigEditDto;
    wechatAppTypeList: KeyValuePairOfStringInt32[] | undefined;
}

export class PagedResultDtoOfWechatAppConfigListDto implements IPagedResultDtoOfWechatAppConfigListDto {
    totalCount: number;
    items: WechatAppConfigListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfWechatAppConfigListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(WechatAppConfigListDto.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfWechatAppConfigListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfWechatAppConfigListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfWechatAppConfigListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfWechatAppConfigListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfWechatAppConfigListDto {
    totalCount: number;
    items: WechatAppConfigListDto[] | undefined;
}

export class GetImageTextMaterialsInput implements IGetImageTextMaterialsInput {
    appId: string | undefined;
    maxResultCount: number;
    skipCount: number;

    constructor(data?: IGetImageTextMaterialsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appId = _data["appId"];
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
        }
    }

    static fromJS(data: any): GetImageTextMaterialsInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetImageTextMaterialsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    }

    clone(): GetImageTextMaterialsInput {
        const json = this.toJSON();
        let result = new GetImageTextMaterialsInput();
        result.init(json);
        return result;
    }
}

export interface IGetImageTextMaterialsInput {
    appId: string | undefined;
    maxResultCount: number;
    skipCount: number;
}

export class Media_News_Content_Item implements IMedia_News_Content_Item {
    url: string | undefined;
    thumb_url: string | undefined;
    thumb_media_id: string | undefined;
    author: string | undefined;
    title: string | undefined;
    content_source_url: string | undefined;
    content: string | undefined;
    digest: string | undefined;
    show_cover_pic: string | undefined;
    need_open_comment: number;
    only_fans_can_comment: number;

    constructor(data?: IMedia_News_Content_Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.thumb_url = _data["thumb_url"];
            this.thumb_media_id = _data["thumb_media_id"];
            this.author = _data["author"];
            this.title = _data["title"];
            this.content_source_url = _data["content_source_url"];
            this.content = _data["content"];
            this.digest = _data["digest"];
            this.show_cover_pic = _data["show_cover_pic"];
            this.need_open_comment = _data["need_open_comment"];
            this.only_fans_can_comment = _data["only_fans_can_comment"];
        }
    }

    static fromJS(data: any): Media_News_Content_Item {
        data = typeof data === 'object' ? data : {};
        let result = new Media_News_Content_Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["thumb_url"] = this.thumb_url;
        data["thumb_media_id"] = this.thumb_media_id;
        data["author"] = this.author;
        data["title"] = this.title;
        data["content_source_url"] = this.content_source_url;
        data["content"] = this.content;
        data["digest"] = this.digest;
        data["show_cover_pic"] = this.show_cover_pic;
        data["need_open_comment"] = this.need_open_comment;
        data["only_fans_can_comment"] = this.only_fans_can_comment;
        return data;
    }

    clone(): Media_News_Content_Item {
        const json = this.toJSON();
        let result = new Media_News_Content_Item();
        result.init(json);
        return result;
    }
}

export interface IMedia_News_Content_Item {
    url: string | undefined;
    thumb_url: string | undefined;
    thumb_media_id: string | undefined;
    author: string | undefined;
    title: string | undefined;
    content_source_url: string | undefined;
    content: string | undefined;
    digest: string | undefined;
    show_cover_pic: string | undefined;
    need_open_comment: number;
    only_fans_can_comment: number;
}

export class Media_News_Content implements IMedia_News_Content {
    news_item: Media_News_Content_Item[] | undefined;

    constructor(data?: IMedia_News_Content) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["news_item"])) {
                this.news_item = [] as any;
                for (let item of _data["news_item"]) {
                    this.news_item.push(Media_News_Content_Item.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): Media_News_Content {
        data = typeof data === 'object' ? data : {};
        let result = new Media_News_Content();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.news_item)) {
            data["news_item"] = [];
            for (let item of this.news_item) {
                data["news_item"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): Media_News_Content {
        const json = this.toJSON();
        let result = new Media_News_Content();
        result.init(json);
        return result;
    }
}

export interface IMedia_News_Content {
    news_item: Media_News_Content_Item[] | undefined;
}

export class MediaList_News_Item implements IMediaList_News_Item {
    media_id: string | undefined;
    content: Media_News_Content;
    update_time: number;

    constructor(data?: IMediaList_News_Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.media_id = _data["media_id"];
            this.content = _data["content"] ? Media_News_Content.fromJS(_data["content"]) : <any> undefined;
            this.update_time = _data["update_time"];
        }
    }

    static fromJS(data: any): MediaList_News_Item {
        data = typeof data === 'object' ? data : {};
        let result = new MediaList_News_Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["media_id"] = this.media_id;
        data["content"] = this.content ? this.content.toJSON() : <any> undefined;
        data["update_time"] = this.update_time;
        return data;
    }

    clone(): MediaList_News_Item {
        const json = this.toJSON();
        let result = new MediaList_News_Item();
        result.init(json);
        return result;
    }
}

export interface IMediaList_News_Item {
    media_id: string | undefined;
    content: Media_News_Content;
    update_time: number;
}

export class PagedResultDtoOfMediaList_News_Item implements IPagedResultDtoOfMediaList_News_Item {
    totalCount: number;
    items: MediaList_News_Item[] | undefined;

    constructor(data?: IPagedResultDtoOfMediaList_News_Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(MediaList_News_Item.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMediaList_News_Item {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMediaList_News_Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfMediaList_News_Item {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMediaList_News_Item();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMediaList_News_Item {
    totalCount: number;
    items: MediaList_News_Item[] | undefined;
}

export enum UploadMediaFileType {
    Image = <any> "image",
    Voice = <any> "voice",
    Video = <any> "video",
    Thumb = <any> "thumb",
    News = <any> "news",
}

export class GetOtherMaterialsInput implements IGetOtherMaterialsInput {
    appId: string | undefined;
    materialType: UploadMediaFileType;
    maxResultCount: number;
    skipCount: number;

    constructor(data?: IGetOtherMaterialsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appId = _data["appId"];
            this.materialType = _data["materialType"];
            this.maxResultCount = _data["maxResultCount"];
            this.skipCount = _data["skipCount"];
        }
    }

    static fromJS(data: any): GetOtherMaterialsInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetOtherMaterialsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["materialType"] = this.materialType;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    }

    clone(): GetOtherMaterialsInput {
        const json = this.toJSON();
        let result = new GetOtherMaterialsInput();
        result.init(json);
        return result;
    }
}

export interface IGetOtherMaterialsInput {
    appId: string | undefined;
    materialType: UploadMediaFileType;
    maxResultCount: number;
    skipCount: number;
}

export class MediaList_Others_Item implements IMediaList_Others_Item {
    media_id: string | undefined;
    name: string | undefined;
    update_time: number;
    url: string | undefined;

    constructor(data?: IMediaList_Others_Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.media_id = _data["media_id"];
            this.name = _data["name"];
            this.update_time = _data["update_time"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): MediaList_Others_Item {
        data = typeof data === 'object' ? data : {};
        let result = new MediaList_Others_Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["media_id"] = this.media_id;
        data["name"] = this.name;
        data["update_time"] = this.update_time;
        data["url"] = this.url;
        return data;
    }

    clone(): MediaList_Others_Item {
        const json = this.toJSON();
        let result = new MediaList_Others_Item();
        result.init(json);
        return result;
    }
}

export interface IMediaList_Others_Item {
    media_id: string | undefined;
    name: string | undefined;
    update_time: number;
    url: string | undefined;
}

export class PagedResultDtoOfMediaList_Others_Item implements IPagedResultDtoOfMediaList_Others_Item {
    totalCount: number;
    items: MediaList_Others_Item[] | undefined;

    constructor(data?: IPagedResultDtoOfMediaList_Others_Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"]) {
                    this.items.push(MediaList_Others_Item.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMediaList_Others_Item {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMediaList_Others_Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items) {
                data["items"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): PagedResultDtoOfMediaList_Others_Item {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMediaList_Others_Item();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMediaList_Others_Item {
    totalCount: number;
    items: MediaList_Others_Item[] | undefined;
}

export class NewsInfoItem implements INewsInfoItem {
    title: string | undefined;
    author: string | undefined;
    digest: string | undefined;
    show_cover: number;
    cover_url: string | undefined;
    content_url: string | undefined;
    source_url: string | undefined;

    constructor(data?: INewsInfoItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.author = _data["author"];
            this.digest = _data["digest"];
            this.show_cover = _data["show_cover"];
            this.cover_url = _data["cover_url"];
            this.content_url = _data["content_url"];
            this.source_url = _data["source_url"];
        }
    }

    static fromJS(data: any): NewsInfoItem {
        data = typeof data === 'object' ? data : {};
        let result = new NewsInfoItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["author"] = this.author;
        data["digest"] = this.digest;
        data["show_cover"] = this.show_cover;
        data["cover_url"] = this.cover_url;
        data["content_url"] = this.content_url;
        data["source_url"] = this.source_url;
        return data;
    }

    clone(): NewsInfoItem {
        const json = this.toJSON();
        let result = new NewsInfoItem();
        result.init(json);
        return result;
    }
}

export interface INewsInfoItem {
    title: string | undefined;
    author: string | undefined;
    digest: string | undefined;
    show_cover: number;
    cover_url: string | undefined;
    content_url: string | undefined;
    source_url: string | undefined;
}

export class NewsInfo implements INewsInfo {
    list: NewsInfoItem[] | undefined;

    constructor(data?: INewsInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["list"])) {
                this.list = [] as any;
                for (let item of _data["list"]) {
                    this.list.push(NewsInfoItem.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): NewsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new NewsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.list)) {
            data["list"] = [];
            for (let item of this.list) {
                data["list"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): NewsInfo {
        const json = this.toJSON();
        let result = new NewsInfo();
        result.init(json);
        return result;
    }
}

export interface INewsInfo {
    list: NewsInfoItem[] | undefined;
}

export class MenuFull_RootButton implements IMenuFull_RootButton {
    type: string | undefined;
    key: string | undefined;
    name: string | undefined;
    url: string | undefined;
    news_info: NewsInfo;
    appid: string | undefined;
    pagepath: string | undefined;
    media_id: string | undefined;
    sub_button: MenuFull_RootButton[] | undefined;

    constructor(data?: IMenuFull_RootButton) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.key = _data["key"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.news_info = _data["news_info"] ? NewsInfo.fromJS(_data["news_info"]) : <any> undefined;
            this.appid = _data["appid"];
            this.pagepath = _data["pagepath"];
            this.media_id = _data["media_id"];
            if (Array.isArray(_data["sub_button"])) {
                this.sub_button = [] as any;
                for (let item of _data["sub_button"]) {
                    this.sub_button.push(MenuFull_RootButton.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): MenuFull_RootButton {
        data = typeof data === 'object' ? data : {};
        let result = new MenuFull_RootButton();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["key"] = this.key;
        data["name"] = this.name;
        data["url"] = this.url;
        data["news_info"] = this.news_info ? this.news_info.toJSON() : <any> undefined;
        data["appid"] = this.appid;
        data["pagepath"] = this.pagepath;
        data["media_id"] = this.media_id;
        if (Array.isArray(this.sub_button)) {
            data["sub_button"] = [];
            for (let item of this.sub_button) {
                data["sub_button"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): MenuFull_RootButton {
        const json = this.toJSON();
        let result = new MenuFull_RootButton();
        result.init(json);
        return result;
    }
}

export interface IMenuFull_RootButton {
    type: string | undefined;
    key: string | undefined;
    name: string | undefined;
    url: string | undefined;
    news_info: NewsInfo;
    appid: string | undefined;
    pagepath: string | undefined;
    media_id: string | undefined;
    sub_button: MenuFull_RootButton[] | undefined;
}

export class MenuMatchRule implements IMenuMatchRule {
    tag_id: string | undefined;
    group_id: string | undefined;
    sex: string | undefined;
    country: string | undefined;
    province: string | undefined;
    city: string | undefined;
    client_platform_type: string | undefined;
    language: string | undefined;

    constructor(data?: IMenuMatchRule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag_id = _data["tag_id"];
            this.group_id = _data["group_id"];
            this.sex = _data["sex"];
            this.country = _data["country"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.client_platform_type = _data["client_platform_type"];
            this.language = _data["language"];
        }
    }

    static fromJS(data: any): MenuMatchRule {
        data = typeof data === 'object' ? data : {};
        let result = new MenuMatchRule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag_id"] = this.tag_id;
        data["group_id"] = this.group_id;
        data["sex"] = this.sex;
        data["country"] = this.country;
        data["province"] = this.province;
        data["city"] = this.city;
        data["client_platform_type"] = this.client_platform_type;
        data["language"] = this.language;
        return data;
    }

    clone(): MenuMatchRule {
        const json = this.toJSON();
        let result = new MenuMatchRule();
        result.init(json);
        return result;
    }
}

export interface IMenuMatchRule {
    tag_id: string | undefined;
    group_id: string | undefined;
    sex: string | undefined;
    country: string | undefined;
    province: string | undefined;
    city: string | undefined;
    client_platform_type: string | undefined;
    language: string | undefined;
}

/** 创建或编辑菜单 */
export class CreateOrEditWechatMenuInput implements ICreateOrEditWechatMenuInput {
    /** 应用key */
    appId: string | undefined;
    /** 菜单数据结构 */
    menu: MenuFull_RootButton[] | undefined;
    matchRule: MenuMatchRule;

    constructor(data?: ICreateOrEditWechatMenuInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appId = _data["appId"];
            if (Array.isArray(_data["menu"])) {
                this.menu = [] as any;
                for (let item of _data["menu"]) {
                    this.menu.push(MenuFull_RootButton.fromJS(item));
                }
            }
            this.matchRule = _data["matchRule"] ? MenuMatchRule.fromJS(_data["matchRule"]) : <any> undefined;
        }
    }

    static fromJS(data: any): CreateOrEditWechatMenuInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditWechatMenuInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        if (Array.isArray(this.menu)) {
            data["menu"] = [];
            for (let item of this.menu) {
                data["menu"].push(item.toJSON());
            }
        }
        data["matchRule"] = this.matchRule ? this.matchRule.toJSON() : <any> undefined;
        return data;
    }

    clone(): CreateOrEditWechatMenuInput {
        const json = this.toJSON();
        let result = new CreateOrEditWechatMenuInput();
        result.init(json);
        return result;
    }
}

/** 创建或编辑菜单 */
export interface ICreateOrEditWechatMenuInput {
    /** 应用key */
    appId: string | undefined;
    /** 菜单数据结构 */
    menu: MenuFull_RootButton[] | undefined;
    matchRule: MenuMatchRule;
}

export class GetWechatMenuForEditOutput implements IGetWechatMenuForEditOutput {
    /** 默认菜单
     (单独对象,数据结构参照 MenuFull_ButtonGroup) */
    menu: any | undefined;
    /** 有个性化菜单时显示。最新的在最前。
     (集合 数据结构参照 MenuFull_ConditionalButtonGroup) */
    conditionalmenu: any | undefined;
    /** 菜单类型 */
    menuTypeList: KeyValuePairOfStringString[] | undefined;

    constructor(data?: IGetWechatMenuForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.menu = _data["menu"];
            this.conditionalmenu = _data["conditionalmenu"];
            if (Array.isArray(_data["menuTypeList"])) {
                this.menuTypeList = [] as any;
                for (let item of _data["menuTypeList"]) {
                    this.menuTypeList.push(KeyValuePairOfStringString.fromJS(item));
                }
            }
        }
    }

    static fromJS(data: any): GetWechatMenuForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWechatMenuForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menu"] = this.menu;
        data["conditionalmenu"] = this.conditionalmenu;
        if (Array.isArray(this.menuTypeList)) {
            data["menuTypeList"] = [];
            for (let item of this.menuTypeList) {
                data["menuTypeList"].push(item.toJSON());
            }
        }
        return data;
    }

    clone(): GetWechatMenuForEditOutput {
        const json = this.toJSON();
        let result = new GetWechatMenuForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetWechatMenuForEditOutput {
    /** 默认菜单
     (单独对象,数据结构参照 MenuFull_ButtonGroup) */
    menu: any | undefined;
    /** 有个性化菜单时显示。最新的在最前。
     (集合 数据结构参照 MenuFull_ConditionalButtonGroup) */
    conditionalmenu: any | undefined;
    /** 菜单类型 */
    menuTypeList: KeyValuePairOfStringString[] | undefined;
}

export enum ActivateType {
    NewAccount = <any> "NewAccount",
    BindExistAccount = <any> "BindExistAccount",
}

export class ActivateAccountModel implements IActivateAccountModel {
    emailAddress: string | undefined;
    password: string | undefined;
    userId: string | undefined;
    verificationCode: string | undefined;
    activateType: ActivateType;

    constructor(data?: IActivateAccountModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
            this.userId = _data["userId"];
            this.verificationCode = _data["verificationCode"];
            this.activateType = _data["activateType"];
        }
    }

    static fromJS(data: any): ActivateAccountModel {
        data = typeof data === 'object' ? data : {};
        let result = new ActivateAccountModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["userId"] = this.userId;
        data["verificationCode"] = this.verificationCode;
        data["activateType"] = this.activateType;
        return data;
    }

    clone(): ActivateAccountModel {
        const json = this.toJSON();
        let result = new ActivateAccountModel();
        result.init(json);
        return result;
    }
}

export interface IActivateAccountModel {
    emailAddress: string | undefined;
    password: string | undefined;
    userId: string | undefined;
    verificationCode: string | undefined;
    activateType: ActivateType;
}

export class ActivateAccountResultModel implements IActivateAccountResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: number;

    constructor(data?: IActivateAccountResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ActivateAccountResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ActivateAccountResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data;
    }

    clone(): ActivateAccountResultModel {
        const json = this.toJSON();
        let result = new ActivateAccountResultModel();
        result.init(json);
        return result;
    }
}

export interface IActivateAccountResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: number;
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string | undefined;
    password: string | undefined;
    verificationCode: string | undefined;
    rememberClient: boolean;
    returnUrl: string | undefined;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
            this.password = _data["password"];
            this.verificationCode = _data["verificationCode"];
            this.rememberClient = _data["rememberClient"];
            this.returnUrl = _data["returnUrl"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["verificationCode"] = this.verificationCode;
        data["rememberClient"] = this.rememberClient;
        data["returnUrl"] = this.returnUrl;
        return data;
    }

    clone(): AuthenticateModel {
        const json = this.toJSON();
        let result = new AuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string | undefined;
    password: string | undefined;
    verificationCode: string | undefined;
    rememberClient: boolean;
    returnUrl: string | undefined;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: number;
    shouldResetPassword: boolean;
    passwordResetCode: string | undefined;
    returnUrl: string | undefined;
    waitingForActivation: boolean;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.userId = _data["userId"];
            this.shouldResetPassword = _data["shouldResetPassword"];
            this.passwordResetCode = _data["passwordResetCode"];
            this.returnUrl = _data["returnUrl"];
            this.waitingForActivation = _data["waitingForActivation"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["returnUrl"] = this.returnUrl;
        data["waitingForActivation"] = this.waitingForActivation;
        return data;
    }

    clone(): AuthenticateResultModel {
        const json = this.toJSON();
        let result = new AuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: number;
    shouldResetPassword: boolean;
    passwordResetCode: string | undefined;
    returnUrl: string | undefined;
    waitingForActivation: boolean;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider: string | undefined;
    providerKey: string | undefined;
    providerAccessCode: string | undefined;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authProvider = _data["authProvider"];
            this.providerKey = _data["providerKey"];
            this.providerAccessCode = _data["providerAccessCode"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data;
    }

    clone(): ExternalAuthenticateModel {
        const json = this.toJSON();
        let result = new ExternalAuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string | undefined;
    providerKey: string | undefined;
    providerAccessCode: string | undefined;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    waitingForActivation: boolean;
    userId: number;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.waitingForActivation = _data["waitingForActivation"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["userId"] = this.userId;
        return data;
    }

    clone(): ExternalAuthenticateResultModel {
        const json = this.toJSON();
        let result = new ExternalAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    waitingForActivation: boolean;
    userId: number;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name: string | undefined;
    clientId: string | undefined;
    additionalParams: { [key: string]: string; } | undefined;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.clientId = _data["clientId"];
            if (_data["additionalParams"]) {
                this.additionalParams = {} as any;
                for (let key in _data["additionalParams"]) {
                    if (_data["additionalParams"].hasOwnProperty(key)) {
                        this.additionalParams[key] = _data["additionalParams"][key];
                    }
                }
            }
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        if (this.additionalParams) {
            data["additionalParams"] = {};
            for (let key in this.additionalParams) {
                if (this.additionalParams.hasOwnProperty(key)) {
                    data["additionalParams"][key] = this.additionalParams[key];
                }
            }
        }
        return data;
    }

    clone(): ExternalLoginProviderInfoModel {
        const json = this.toJSON();
        let result = new ExternalLoginProviderInfoModel();
        result.init(json);
        return result;
    }
}

export interface IExternalLoginProviderInfoModel {
    name: string | undefined;
    clientId: string | undefined;
    additionalParams: { [key: string]: string; } | undefined;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    }

    clone(): ImpersonatedAuthenticateResultModel {
        const json = this.toJSON();
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IImpersonatedAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
}

export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property)) {
                    (<any> this)[property] = (<any> data)[property];
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    }

    clone(): SwitchedAccountAuthenticateResultModel {
        const json = this.toJSON();
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface ISwitchedAccountAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
}

export enum CaptchaType {
    Defulat = <any> "Defulat",
    HostTenantRegister = <any> "HostTenantRegister",
    HostUserLogin = <any> "HostUserLogin",
    TenantUserRegister = <any> "TenantUserRegister",
    TenantUserLogin = <any> "TenantUserLogin",
    TenantUserRegisterActiveEmail = <any> "TenantUserRegisterActiveEmail",
    TenantUserForotPassword = <any> "TenantUserForotPassword",
    TenantUserResetPassword = <any> "TenantUserResetPassword",
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined) {
        throw result;
    } else {
        throw new SwaggerException(message, status, response, headers, null);
    }
}
